<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[website vault]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib/media/favicon.png</url><title>website vault</title><link></link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Mon, 10 Mar 2025 11:55:44 GMT</lastBuildDate><atom:link href="lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Mon, 10 Mar 2025 11:55:09 GMT</pubDate><ttl>60</ttl><dc:creator></dc:creator><item><title><![CDATA[Bases]]></title><description><![CDATA[ 
 <br>base 10 sums and products<br><br> (this is a convention which makes things work nicely)<br> because it is the product of one 10<br> because it is the product of two tens<br> because it is the product of three tens <br>Generally, a one followed by -many zeros is .<br>The exponent of 10 is equal to the number of zeros.<br>This form is sometimes called scientific notation.<br>We may think of  as .<br>We can do this with all numbers ending in 0s.<br>Ex: , , .<br>And when the numbers don't end in 0s, we can still write  like this:<br>.<br>Recall that positive integers can be decomposed into sums of positive integers, each of which having exactly one nonzero digit:<br>Ex: , , .<br>You use this fact when you multiply numbers.<br>We may write each term in this sum in scientific notation:<br>Ex:<br><br><br>This is called the decimal expansion of  (also called the base 10 expansion).<br>As it turns out, we can write any positive integer in any base expansion, and many of the same properties hold.<br><br>Base 2 Expansion<br><br><br>The base 2 expansion of a number is closely related to the binary representation.<br>For instance,  may be written as:<br><br>Notice the coefficients  and  of  and  respectively.<br>For this reason, we say that the binary representation of  is:<br>.<br><br>General Base Expansion<br><br><br>The base  expansion of  is:<br><br>Where all .<br>The associated base  representation is:<br><br>For instance, here is a base 3 expansion of :<br>.<br>And the base 3 representation of  is:<br>.<br><br>Here is a base 5 expansion of :<br>.<br>And the base 5 representation of  is:<br>.<br><br>When , this is called the decimal expansion.<br>When , this is called the binary expansion.<br>When , this is called the octal expansion.<br>When , this is called the hexadecimal expansion.<br><br><br>We can combine this with other ideas.<br>For example:<br><br>And:<br><br><br>Modular Exponentiation<br><br>Let's calculate something of the form .<br>
For example, let's find .<br><br>We would like to calculate something of the form . <a href=".?query=tag:crpytography" class="tag" target="_blank" rel="noopener nofollow">#crpytography</a><br>We would typically think to first compute , but when  is large,  is massive. A reminder of 30^30.<br><br>We will use modular exponentiation instead.<br><br>Find the base 2 representation of <br><a data-tooltip-position="top" aria-label="https://imanulhuq.yolasite.com/resources/Discrete%20Mathematics%20and%20Its%20Applications%20-%208e%20%28Kenneth%20Rosen%29%20%5B9781259676512%5D_compressed-compressed.pdf#page=291" rel="noopener nofollow" class="external-link" href="https://imanulhuq.yolasite.com/resources/Discrete%20Mathematics%20and%20Its%20Applications%20-%208e%20%28Kenneth%20Rosen%29%20%5B9781259676512%5D_compressed-compressed.pdf#page=291" target="_blank">Rosen</a> has another example. <br><br>Therefore <br>You can find this in python to double check<br>1in_binary=bin(1234)2print(in_binary[2:])<br>Binary, Decimal, Octal, and Hexadecimal Conversions<br><br><br>Here are some sample problems from Rosen.<br><br>
<br>Convert the decimal expansion of each of these integers to a binary expansion.

<br>a) 231
<br>b) 4532
<br>c) 97644


<br>Convert the decimal expansion of each of these integers to a binary expansion.

<br>a) 321
<br>b) 1023
<br>c) 100632


<br><br>
<br>Convert the binary expansion of each of these integers to a decimal expansion.

<br>a) (1 1111)‚ÇÇ
<br>b) (10 0000 0001)‚ÇÇ
<br>c) (1 0101 0101)‚ÇÇ
<br>d) (110 1001 0001 0000)‚ÇÇ


<br>Convert the binary expansion of each of these integers to a decimal expansion.

<br>a) (1 1011)‚ÇÇ
<br>b) (10 1011 0101)‚ÇÇ
<br>c) (11 1011 1110)‚ÇÇ
<br>d) (111 1100 0001 1111)‚ÇÇ


<br><br>
<br>Convert the octal expansion of each of these integers to a binary expansion.

<br>a) (572)‚Çà
<br>b) (1604)‚Çà
<br>c) (423)‚Çà
<br>d) (2417)‚Çà


<br><br>
<br>Convert the binary expansion of each of these integers to an octal expansion.

<br>a) (1111 0111)‚ÇÇ
<br>b) (1010 1010 1010)‚ÇÇ
<br>c) (111 0111 0111 0111)‚ÇÇ
<br>d) (101 0101 0101 0101)‚ÇÇ


<br><br>
<br>Convert the hexadecimal expansion of each of these integers to a binary expansion.

<br>a) (80E)‚ÇÅ‚ÇÜ
<br>b) (135AB)‚ÇÅ‚ÇÜ
<br>c) (ABBA)‚ÇÅ‚ÇÜ
<br>d) (DEFACED)‚ÇÅ‚ÇÜ


<br>Convert (BADFACED)‚ÇÅ‚ÇÜ from its hexadecimal expansion to its binary expansion.
<br>Convert (ABCDEF)‚ÇÅ‚ÇÜ from its hexadecimal expansion to its binary expansion.
<br><br>
<br>Convert each of the integers in Exercise 6 from a binary expansion to a hexadecimal expansion.
<br>Convert (1011 0111 1011)‚ÇÇ from its binary expansion to its hexadecimal expansion.
<br>Convert (1 1000 0110 0011)‚ÇÇ from its binary expansion to its hexadecimal expansion.
<br>]]></description><link>2300/_not_published/bases.html</link><guid isPermaLink="false">2300/_not_published/Bases.md</guid><pubDate>Fri, 25 Oct 2024 05:10:39 GMT</pubDate></item><item><title><![CDATA[DUMP]]></title><description><![CDATA[<a class="tag" href="?query=tag:z3" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#z3</a> <a class="tag" href="?query=tag:z3" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#z3</a> 
 <br>
<br>have some intro resources for z3 so students can see what is happening <a href=".?query=tag:z3" class="tag" target="_blank" rel="noopener nofollow">#z3</a> üîΩ üìÖ 2025-01-01 ‚úÖ 2024-10-25
<br>import the z3 projects <a href=".?query=tag:z3" class="tag" target="_blank" rel="noopener nofollow">#z3</a> üìÖ 2025-01-01 ‚úÖ 2024-10-25

<br>project1
<br>project2


]]></description><link>2300/_not_published/dump.html</link><guid isPermaLink="false">2300/_not_published/DUMP.md</guid><pubDate>Fri, 25 Oct 2024 15:05:47 GMT</pubDate></item><item><title><![CDATA[Syllabus Updates]]></title><description><![CDATA[ 
 <br>Do not schedule quizzes or exams with LEP/DSP during the class period. <br>Do not schedule group quizzes or exams with LEP/DSP during the class period. <br>
<br>I offer time during OH to take this. this is NOT covered by LEP DSP.
<br>Do not DO class groupwork assignments if you missed class and expect full credit. <br>If you want clarity on anything-- ask me directly in class. <br>You are expected to attend all lectures to receive relevant course information THIS IS NOT AN ASYNCHRANOUS COURSE-- I OFTEN DO NOT USE CANVAS DUE DATES ON ASSIGNMENT WITH FLEXABLE DEADLINES. THIS DOES NOT MEAN YOU DON"T HAVE TO DO THESE ASSIGNMENTS<br>I expect you to let me know if you are going to miss an exam. If you do not let me know the class period before (with the exception of extenuating unforeseeable circumstances) you will not have the opportunity to make this up. You are expected to come to OH and attend class until you have found a time with me to retake. Accommodating my schedule for your missed class responsibility. ]]></description><link>2300/_not_published/syllabus-updates.html</link><guid isPermaLink="false">2300/_not_published/Syllabus Updates.md</guid><pubDate>Tue, 19 Nov 2024 19:11:28 GMT</pubDate></item><item><title><![CDATA[Untitled]]></title><description><![CDATA[ 
 ]]></description><link>2300/_not_published/untitled.html</link><guid isPermaLink="false">2300/_not_published/Untitled.md</guid><pubDate>Fri, 25 Oct 2024 03:55:46 GMT</pubDate></item><item><title><![CDATA[Untitled 1]]></title><description><![CDATA[ 
 ]]></description><link>2300/_not_published/untitled-1.html</link><guid isPermaLink="false">2300/_not_published/Untitled 1.md</guid><pubDate>Sat, 26 Oct 2024 00:48:15 GMT</pubDate></item><item><title><![CDATA[troubleshooting import]]></title><description><![CDATA[ 
 <br>Here is some code that when placed in a script and run, should allow you to import a python package that you may be having trouble with<br><br>Replace your_package with the name of the package you would like to install, then save and run this script in your working directory.<br>import sys 
import subprocess
subprocess.check_call([sys.executable, "-m", "pip", "install", "your_package"]) 
]]></description><link>2300/code/troubleshooting-import.html</link><guid isPermaLink="false">2300/code/troubleshooting import.md</guid><pubDate>Fri, 25 Oct 2024 01:52:18 GMT</pubDate></item><item><title><![CDATA[contraposition proof]]></title><description><![CDATA[<a class="tag" href="?query=tag:set" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#set</a> <a class="tag" href="?query=tag:proofs" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#proofs</a> 
 <br><a href=".?query=tag:set" class="tag" target="_blank" rel="noopener nofollow">#set</a> <a href=".?query=tag:proofs" class="tag" target="_blank" rel="noopener nofollow">#proofs</a>  <br>Theorem:
Suppose  and . If   then . 
<br>scratch work:<br>
I would start with doing some scratch work, listing off the Hypothesis and conclusions<br><br>We notice that rewriting the conclusion as it's contrapositive may give us something easier to work with, as will rewriting the Hypothesis.<br><br>If we assume the premise of our new conclusion,  then we just need to show .<br><br>We are assuming all of our hypothesis are true, so we can combine them in any way we like to generate assertions<br><br>Combining this new assertion and a hypothesis we can see <br><br>Now from this last assertion we can assert the conclusion!<br>Now we can formally write up this proof which should capture all the assumptions assertions and conclusions we have made. <br>Proof
We proceed by contradiction. Suppose that  and that . Since , . By assumption  and . Therefore . By the implication above, and since  we have  and therefore .
<br>
<br>
<br>this is a hypothesis<a href="about:blank#fnref-1-f183098385cd80d5" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">‚Ü©Ô∏é</a>
<br>a conclusion<a href="about:blank#fnref-2-f183098385cd80d5" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">‚Ü©Ô∏é</a>
<br>another hypothesis<a href="about:blank#fnref-3-f183098385cd80d5" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">‚Ü©Ô∏é</a>
<br>hypothesis 1<a href="about:blank#fnref-4-f183098385cd80d5" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">‚Ü©Ô∏é</a>
<br>conclusion<a href="about:blank#fnref-5-f183098385cd80d5" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">‚Ü©Ô∏é</a>
<br>hypothesis 2<a href="about:blank#fnref-6-f183098385cd80d5" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">‚Ü©Ô∏é</a>
<br>conclusion rewritten as contrapositive<a href="about:blank#fnref-7-f183098385cd80d5" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">‚Ü©Ô∏é</a>
<br>hypothesis 1 rewritten<a href="about:blank#fnref-8-f183098385cd80d5" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">‚Ü©Ô∏é</a>
<br>hypothesis 1<a href="about:blank#fnref-9-f183098385cd80d5" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">‚Ü©Ô∏é</a>
<br>conclusion<a href="about:blank#fnref-10-f183098385cd80d5" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">‚Ü©Ô∏é</a>
<br>hypothesis 2<a href="about:blank#fnref-11-f183098385cd80d5" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">‚Ü©Ô∏é</a>
<br>conclusion rewritten as contrapositive<a href="about:blank#fnref-12-f183098385cd80d5" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">‚Ü©Ô∏é</a>
<br>hypothesis 1 rewritten<a href="about:blank#fnref-13-f183098385cd80d5" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">‚Ü©Ô∏é</a>
<br>conclusion  of the inference is our new conclusion<a href="about:blank#fnref-14-f183098385cd80d5" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">‚Ü©Ô∏é</a>
<br>we add the premise of the inference of the conclusion as another hypothesis<a href="about:blank#fnref-15-f183098385cd80d5" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">‚Ü©Ô∏é</a>
<br>hypothesis 1<a href="about:blank#fnref-16-f183098385cd80d5" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">‚Ü©Ô∏é</a>
<br>conclusion<a href="about:blank#fnref-17-f183098385cd80d5" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">‚Ü©Ô∏é</a>
<br>hypothesis 2<a href="about:blank#fnref-18-f183098385cd80d5" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">‚Ü©Ô∏é</a>
<br>conclusion rewritten as contrapositive<a href="about:blank#fnref-19-f183098385cd80d5" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">‚Ü©Ô∏é</a>
<br>hypothesis 1 rewritten<a href="about:blank#fnref-20-f183098385cd80d5" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">‚Ü©Ô∏é</a>
<br>conclusion  of the inference is our new conclusion<a href="about:blank#fnref-21-f183098385cd80d5" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">‚Ü©Ô∏é</a>
<br>we add the premise of the inference of the conclusion as another hypothesis<a href="about:blank#fnref-22-f183098385cd80d5" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">‚Ü©Ô∏é</a>
<br>we get this from the  of two hypothesis<a href="about:blank#fnref-23-f183098385cd80d5" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">‚Ü©Ô∏é</a>
<br>hypothesis 1<a href="about:blank#fnref-24-f183098385cd80d5" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">‚Ü©Ô∏é</a>
<br>conclusion<a href="about:blank#fnref-25-f183098385cd80d5" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">‚Ü©Ô∏é</a>
<br>hypothesis 2<a href="about:blank#fnref-26-f183098385cd80d5" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">‚Ü©Ô∏é</a>
<br>conclusion rewritten as contrapositive<a href="about:blank#fnref-27-f183098385cd80d5" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">‚Ü©Ô∏é</a>
<br>hypothesis 1 rewritten<a href="about:blank#fnref-28-f183098385cd80d5" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">‚Ü©Ô∏é</a>
<br>conclusion  of the inference is our new conclusion<a href="about:blank#fnref-29-f183098385cd80d5" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">‚Ü©Ô∏é</a>
<br>we add the premise of the inference of the conclusion as another hypothesis<a href="about:blank#fnref-30-f183098385cd80d5" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">‚Ü©Ô∏é</a>
<br>we get this from the  of two hypothesis<a href="about:blank#fnref-31-f183098385cd80d5" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">‚Ü©Ô∏é</a>
]]></description><link>2300/example-proofs/contraposition-proof.html</link><guid isPermaLink="false">2300/Example Proofs/contraposition proof.md</guid><pubDate>Thu, 24 Oct 2024 09:43:57 GMT</pubDate></item><item><title><![CDATA[2300 Home]]></title><description><![CDATA[ 
 Home page for the 2300 course notes and resources.]]></description><link>2300/2300-home.html</link><guid isPermaLink="false">2300/2300 Home.md</guid><pubDate>Mon, 10 Mar 2025 10:47:11 GMT</pubDate></item><item><title><![CDATA[2300 Week 9 prep]]></title><description><![CDATA[ 
 <br>We will be covering All of the material from logic, sets, functions, number theory, base representation that were on week 6<br>We will also Cover The following new material:<br><br>Direct Proofs<br>
<a data-href="Direct Proofs" href="rosen-videos/direct-proofs.html" class="internal-link" target="_self" rel="noopener nofollow">Direct Proofs</a><br>
Proof by Contradiction<br>
<a data-href="Proof by Contradiction" href="rosen-videos/proof-by-contradiction.html" class="internal-link" target="_self" rel="noopener nofollow">Proof by Contradiction</a><br>
Proof by Contraposition<br>
<a data-href="Proof by Contrapositive" href="rosen-videos/proof-by-contrapositive.html" class="internal-link" target="_self" rel="noopener nofollow">Proof by Contrapositive</a><br>
Proof By Cases<br>
<a data-href="Proof by Cases" href="rosen-videos/proof-by-cases.html" class="internal-link" target="_self" rel="noopener nofollow">Proof by Cases</a><br>
Weak Induction<br>
<a data-href="Weak Induction" href="2300/weak-induction.html" class="internal-link" target="_self" rel="noopener nofollow">Weak Induction</a><br>
Strong Induction<br>
<a data-href="Strong Induction" href="2300/strong-induction.html" class="internal-link" target="_self" rel="noopener nofollow">Strong Induction</a><br>More Problems<br>
<a data-href="Direct, Contraposition and Contradiction" href="2300/direct,-contraposition-and-contradiction.html" class="internal-link" target="_self" rel="noopener nofollow">Direct, Contraposition and Contradiction</a><br><br><a data-tooltip-position="top" aria-label="https://cs.du.edu/~ftl/2300/resources/Ch5/2300.5.1aProofByInduction.10.20.mp4" rel="noopener nofollow" class="external-link" href="https://cs.du.edu/~ftl/2300/resources/Ch5/2300.5.1aProofByInduction.10.20.mp4" target="_blank">Proof By Induction</a><br>
<a data-tooltip-position="top" aria-label="https://cs.du.edu/~ftl/2300/resources/Ch5/2300.5.1aProofByInduction.10.20.mp4" rel="noopener nofollow" class="external-link" href="https://cs.du.edu/~ftl/2300/resources/Ch5/2300.5.1aProofByInduction.10.20.mp4" target="_blank">Another Induction Example </a><br><br><a data-href="Counting Rules" href="2300/counting-rules.html" class="internal-link" target="_self" rel="noopener nofollow">Counting Rules</a><br>
<a data-href="Product Rule Problems" href="2300/product-rule-problems.html" class="internal-link" target="_self" rel="noopener nofollow">Product Rule Problems</a><br>
<a data-href="Common Counting Problem Types" href="2300/common-counting-problem-types.html" class="internal-link" target="_self" rel="noopener nofollow">Common Counting Problem Types</a><br>
<a data-href="Tree Diagrams Worksheet" href="rosen-videos/tree-diagrams-worksheet.html" class="internal-link" target="_self" rel="noopener nofollow">Tree Diagrams Worksheet</a><br>
<a data-href="Pigeon Hole Principle" href="rosen-videos/pigeon-hole-principle.html" class="internal-link" target="_self" rel="noopener nofollow">Pigeon Hole Principle</a><br>
<a data-href="Generalized Pigeonhole Principle" href="2300/generalized-pigeonhole-principle.html" class="internal-link" target="_self" rel="noopener nofollow">Generalized Pigeonhole Principle</a><br><br>Materials can be found in Rosen and a short version of what I would love you to be familiar with is below:<br>
<a data-href="counting examples" href="2300/counting-examples.html" class="internal-link" target="_self" rel="noopener nofollow">counting examples</a> (we will not be covering the division rule yet)<br><br><br>Vertices with the Same Degree:<br>‚Ä¢ Problem: Prove that in any graph with at least two vertices, there exist at least two vertices with the same degree.<br>No-Three-in-Line Problem:<br>‚Ä¢ Problem: Find an upper bound on the number of points that can be placed on an&nbsp; &nbsp; grid such that no three points are collinear. Here is an example when  is 10. How good of an upper bound can you find?<br>
<img alt="Pasted image 20250304134726.png" src="lib/media/pasted-image-20250304134726.png"><br>This is 20 points -- why can't we fit 21 points?<br><br>
<br>
How many ways are there to roll two&nbsp;  -sided dice such that the numbers on the two faces are different? Use a tree diagram

<br>
How many ways are there to roll  three  -sided dice such that exactly two dice show the same number and one shows a different number? Use a tree diagram

]]></description><link>2300/2300-week-9-prep.html</link><guid isPermaLink="false">2300/2300 Week 9 prep.md</guid><pubDate>Wed, 05 Mar 2025 23:07:19 GMT</pubDate><enclosure url="lib/media/pasted-image-20250304134726.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;lib/media/pasted-image-20250304134726.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Base 2 Expansion]]></title><description><![CDATA[ 
 <br><br>The base 2 expansion of a number is closely related to the binary representation.<br>For instance,  may be written as:<br><br>Notice the coefficients  and  of  and  respectively.<br>For this reason, we say that the binary representation of  is:<br>.]]></description><link>2300/base-2-expansion.html</link><guid isPermaLink="false">2300/Base 2 Expansion.md</guid><pubDate>Fri, 25 Oct 2024 05:07:06 GMT</pubDate></item><item><title><![CDATA[base 10 sums and products]]></title><description><![CDATA[ 
 <br> (this is a convention which makes things work nicely)<br> because it is the product of one 10<br> because it is the product of two tens<br> because it is the product of three tens <br>Generally, a one followed by -many zeros is .<br>The exponent of 10 is equal to the number of zeros.<br>This form is sometimes called scientific notation.<br>We may think of  as .<br>We can do this with all numbers ending in 0s.<br>Ex: , , .<br>And when the numbers don't end in 0s, we can still write  like this:<br>.<br>Recall that positive integers can be decomposed into sums of positive integers, each of which having exactly one nonzero digit:<br>Ex: , , .<br>You use this fact when you multiply numbers.<br>We may write each term in this sum in scientific notation:<br>Ex:<br><br><br>This is called the decimal expansion of  (also called the base 10 expansion).<br>As it turns out, we can write any positive integer in any base expansion, and many of the same properties hold.]]></description><link>2300/base-10-sums-and-products.html</link><guid isPermaLink="false">2300/base 10 sums and products.md</guid><pubDate>Fri, 25 Oct 2024 05:08:33 GMT</pubDate></item><item><title><![CDATA[Bayes Example]]></title><description><![CDATA[ 
 <br><br>Imagine there is a test for a rare disease. Here‚Äôs the information we have:<br>
<br>Only 1% of people have this disease
<br>If a person has the disease, the test correctly detects it 95% of the time
<br>If a person does not have the disease, the test is correct 90% of the time (meaning it gives a false positive 10% of the time)
<br>Question: What is the probability that a person who tests positive actually has the disease?<br><br><br>Disease Rate: Only 1% of people have this disease.<br>
‚Ä¢ Let&nbsp; &nbsp; be the event that a person has the disease.<br>
‚Ä¢ So,&nbsp;  .<br>
‚Ä¢ The complement,&nbsp;  , is the event that the person does not have the disease, so&nbsp;  .<br>Test Accuracy<br>
‚Ä¢ If a person has the disease, the test correctly detects it 95% of the time.<br>
‚Ä¢ This means&nbsp;  .<br>
‚Ä¢ If a person does not have the disease, the test is correct 90% of the time (meaning it gives a false positive 10% of the time).<br>
‚Ä¢ So,&nbsp;  .<br><br>Question: What is the probability that a person who tests positive actually has the disease?<br>
We want to find&nbsp;  : the probability that a person has the disease given they tested positive.<br>Step 1: Use the Law of Total Probability to Find&nbsp; &nbsp;<br>To calculate&nbsp; &nbsp; using Bayes‚Äô Rule, we need&nbsp;  . Using the Law of Total Probability, we break down&nbsp; &nbsp; into two cases: testing positive when the person has the disease and testing positive when they don‚Äôt.<br><br>Plugging in the values:<br><br><br>So,&nbsp;  .<br><br>Step 2: Use Bayes‚Äô Rule to Find&nbsp; <br>Now, we can apply Bayes‚Äô Rule:<br><br>Substitute the values:<br><br><br><br>Interpretation<br>
Even though the person tested positive, the probability that they actually have the disease is only 8.76%. This is because the disease is rare, so even with a positive result, the low base rate of the disease lowers the overall probability. Bayes‚Äô Rule helps us adjust our belief based on this new evidence.]]></description><link>2300/bayes-example.html</link><guid isPermaLink="false">2300/Bayes Example.md</guid><pubDate>Tue, 12 Nov 2024 17:25:22 GMT</pubDate></item><item><title><![CDATA[Bayes Rule]]></title><description><![CDATA[ 
 <br>Definition: Bayes‚Äô Rule (or Bayes‚Äô Theorem) is a fundamental formula in probability that allows us to update the probability of an event based on new evidence. It is particularly useful for reversing conditional probabilities and determining the likelihood of causes given observed effects.<br>Recall:<br>
<br>Recall  represents the probability that  occurs provided we have information that  occurs.
<br>Similarly,  represents the probability that  occurs provided we have information that  occurs.
<br>It is often the case that we can experimentally find  with a high accuracy, but we would rather know .<br><br><br>For two events    and   , Bayes‚Äô Rule states:<br><br>
Proof:<br>
Suppose  and  are nonempty.<br>
Clearly, .<br>
Multiplying the left and righthand side of the equality by one yields, .<br>
By the definition,  and .<br>
Through substitution we see .]]></description><link>2300/bayes-rule.html</link><guid isPermaLink="false">2300/Bayes Rule.md</guid><pubDate>Tue, 12 Nov 2024 17:58:21 GMT</pubDate></item><item><title><![CDATA[Binary, Decimal, Octal, and Hexadecimal Conversions]]></title><description><![CDATA[ 
 <br>Here are some sample problems from Rosen.<br><br>
<br>Convert the decimal expansion of each of these integers to a binary expansion.

<br>a) 231
<br>b) 4532
<br>c) 97644


<br>Convert the decimal expansion of each of these integers to a binary expansion.

<br>a) 321
<br>b) 1023
<br>c) 100632


<br><br>
<br>Convert the binary expansion of each of these integers to a decimal expansion.

<br>a) (1 1111)‚ÇÇ
<br>b) (10 0000 0001)‚ÇÇ
<br>c) (1 0101 0101)‚ÇÇ
<br>d) (110 1001 0001 0000)‚ÇÇ


<br>Convert the binary expansion of each of these integers to a decimal expansion.

<br>a) (1 1011)‚ÇÇ
<br>b) (10 1011 0101)‚ÇÇ
<br>c) (11 1011 1110)‚ÇÇ
<br>d) (111 1100 0001 1111)‚ÇÇ


<br><br>
<br>Convert the octal expansion of each of these integers to a binary expansion.

<br>a) (572)‚Çà
<br>b) (1604)‚Çà
<br>c) (423)‚Çà
<br>d) (2417)‚Çà


<br><br>
<br>Convert the binary expansion of each of these integers to an octal expansion.

<br>a) (1111 0111)‚ÇÇ
<br>b) (1010 1010 1010)‚ÇÇ
<br>c) (111 0111 0111 0111)‚ÇÇ
<br>d) (101 0101 0101 0101)‚ÇÇ


<br><br>
<br>Convert the hexadecimal expansion of each of these integers to a binary expansion.

<br>a) (80E)‚ÇÅ‚ÇÜ
<br>b) (135AB)‚ÇÅ‚ÇÜ
<br>c) (ABBA)‚ÇÅ‚ÇÜ
<br>d) (DEFACED)‚ÇÅ‚ÇÜ


<br>Convert (BADFACED)‚ÇÅ‚ÇÜ from its hexadecimal expansion to its binary expansion.
<br>Convert (ABCDEF)‚ÇÅ‚ÇÜ from its hexadecimal expansion to its binary expansion.
<br><br>
<br>Convert each of the integers in Exercise 6 from a binary expansion to a hexadecimal expansion.
<br>Convert (1011 0111 1011)‚ÇÇ from its binary expansion to its hexadecimal expansion.
<br>Convert (1 1000 0110 0011)‚ÇÇ from its binary expansion to its hexadecimal expansion.
]]></description><link>2300/binary,-decimal,-octal,-and-hexadecimal-conversions.html</link><guid isPermaLink="false">2300/Binary, Decimal, Octal, and Hexadecimal Conversions.md</guid><pubDate>Mon, 10 Mar 2025 10:15:10 GMT</pubDate></item><item><title><![CDATA[Binomial Distribution Expected Value(do something with it)]]></title><description><![CDATA[ 
 <br><br>Definition:<br>
The expected value, or mean, of a binomially distributed random variable represents the average outcome of repeated trials over time. It provides a measure of the central tendency for the number of successes in a series of identical, independent trials.<br>Formula:<br>
For a binomial distribution with parameters  (number of trials) and  (probability of success in each trial), the expected value is given by:<br><br>Interpretation:<br>
This value represents the average number of successes you would expect over many repetitions of the experiment. For example, if you flip a fair coin (where ) 10 times, the expected number of heads is .<br><br><br>Definition:<br>
The variance of a binomially distributed random variable quantifies the spread or variability of the number of successes around the expected value. It is a measure of how much the outcomes are likely to differ from the average number of successes.<br>Formula:<br>
For a binomial distribution with parameters  and , the variance is:<br><br>Interpretation:<br>
Variance gives insight into the consistency of the number of successes in repeated trials. A higher variance indicates a wider range of possible outcomes, while a lower variance suggests that the number of successes tends to be close to the expected value.<br><br><br>Definition:<br>
The standard deviation is the square root of the variance and provides a direct measure of the typical distance of each outcome from the expected value in the same units as the number of successes.<br>Formula:  <br><br>Interpretation:<br>
The standard deviation represents the typical deviation from the expected number of successes. It is especially useful in understanding the likely range of outcomes in practical terms.<br>]]></description><link>2300/binomial-distribution-expected-value(do-something-with-it).html</link><guid isPermaLink="false">2300/Binomial Distribution Expected Value(do something with it).md</guid><pubDate>Thu, 14 Nov 2024 19:56:54 GMT</pubDate></item><item><title><![CDATA[central limit theorem]]></title><description><![CDATA[ 
 <br><br>]]></description><link>2300/central-limit-theorem.html</link><guid isPermaLink="false">2300/central limit theorem.md</guid><pubDate>Thu, 31 Oct 2024 05:46:34 GMT</pubDate></item><item><title><![CDATA[Combinations and Permutations]]></title><description><![CDATA[ 
 <br><br>‚Ä¢	Product Rule: Multiply the choices in sequence to calculate all possible arrangements or selections (used in permutations).<br>
‚Ä¢	Division Rule: Divide by    to remove duplicates when order is irrelevant (used in combinations and binomial coefficients).<br><br>‚Ä¢	Definition: A permutation counts the number of ways to arrange  r  objects from  n  distinct objects, where order matters.<br>
‚Ä¢	Formula:  <br>
‚Ä¢	Example: Suppose we have 5 books and want to arrange 3 of them on a shelf. How many ways can we arrange 3 books out of 5?<br>
Example:

So, there are 60 different ways to arrange 3 books from 5 when order matters.
<br><br>‚Ä¢	Definition: A combination counts the number of ways to choose  r  objects from  n  objects when order does not matter.<br>
‚Ä¢	Formula:  <br>
‚Ä¢	Example: Suppose we have 5 books and want to choose 3 of them to take on a trip, but the order in which we choose them doesn‚Äôt matter.<br>
Example:

So, there are 10 ways to choose 3 books from 5 when the order doesn‚Äôt matter.
<br><br>‚Ä¢	Definition: The binomial coefficient    represents the number of ways to choose  r  items from  n , and it‚Äôs often used in binomial expansions.<br>
‚Ä¢	Formula:  <br>
‚Ä¢	Example: If we want to find the coefficient of    in the expansion of   , we use    because we‚Äôre choosing 3 instances of    out of  total terms (the rest being   ).<br>
Example:

Thus, the coefficient of    is  in the expansion of  .
]]></description><link>2300/combinations-and-permutations.html</link><guid isPermaLink="false">2300/Combinations and Permutations.md</guid><pubDate>Thu, 31 Oct 2024 20:08:26 GMT</pubDate></item><item><title><![CDATA[Common Counting Problem Types]]></title><description><![CDATA[ 
 <br>To cover a broad range of combinatorial counting problems, let‚Äôs look at different setups commonly encountered in combinatorics. These involve variations with distinguishable/indistinguishable objects and distinguishable/indistinguishable bins (bags or containers). I‚Äôll provide an example of each type, along with the relevant counting approach. Some techniques are covered and others are not (they can be very hard)!<br><br><br>Problem: You have three unique balls (say, numbered 1, 2, and 3) and two unique bins (say, A and B). How many ways can you place the balls into the bins, allowing each bin to hold any number of balls (including zero)?<br>Solution: Each ball has two choices (it can go into bin A or bin B). Since we have three balls, we apply the product rule:<br>
<br><br>Problem: You have five identical balls and three unique bins (A, B, and C). How many ways can you place the balls in the bins?<br>
Solution: This is a classic ‚Äústars and bars‚Äù problem, where we want to partition 5 identical objects into 3 distinct groups.<br><br>Problem: How many ways can you arrange the letters in the word ‚ÄúBALLOON‚Äù?<br>
Solution: The word ‚ÄúBALLOON‚Äù contains 7 letters where ‚ÄòL‚Äô and ‚ÄòO‚Äô each appear twice.<br>
Ôøº<br><br>Problem: Out of a group of 10 people, how many ways can you choose a committee of 4?<br>
Solution: This is a straightforward combination problem, where order does not matter:Ôøº<br><br>Problem: You have three types of candies (chocolate, gummy, and hard candy) and you want to choose 5 pieces. How many ways can you choose the candies if order doesn‚Äôt matter and you can select any type multiple times?<br>
Solution: This is a combination with repetition problem, which we solve using the stars and bars method.<br>
Ôøº<br><br>Problem: You have a group of 6 people, and you want to split them into two teams: one with 4 people and one with 2. How many ways can you do this?<br>
Solution: First, select 4 people out of 6 for the first team, and the remaining 2 will automatically form the second team:<br>
‚Ä¢	Answer: There are 15 ways to partition the group into the specified teams.<br><br><br>Problem: You have three unique balls (numbered 1, 2, and 3) and two indistinguishable bins. How many ways can you distribute the balls into the bins?<br><br>Problem: You have fiveballs and three bins. How many ways can you distribute the balls into the bins?<br>
Solution: Since both the balls and bins are indistinguishable, we‚Äôre dealing with integer partitions of 5 into at most 3 parts. We enumerate the distinct partitions:<br>
‚Ä¢	5 balls in one bin: Ôøº<br>
‚Ä¢	4 balls in one bin, 1 in another: Ôøº<br>
‚Ä¢	3 balls in one bin, 2 in another: Ôøº<br>
‚Ä¢	2 balls in each of two bins, 1 in the third: Ôøº<br>
‚Ä¢	Answer: There are 4 ways to distribute the balls.]]></description><link>2300/common-counting-problem-types.html</link><guid isPermaLink="false">2300/Common Counting Problem Types.md</guid><pubDate>Tue, 05 Nov 2024 22:00:13 GMT</pubDate></item><item><title><![CDATA[counting examples]]></title><description><![CDATA[ 
 <br><br>THE PRODUCT RULE 
Suppose that a procedure can be broken down into a sequence of two tasks. If there are n1 ways to do the first task and for each of these ways of doing the first task, there are n2 ways to do the second task, then there are n1n2 ways to do the procedure.
<br><br>Example:<br>
<br>A new company with just two employees, Sanchez and Patel, rents a floor of a building with 12 offices. How many ways are there to assign different offices to these two employees?
<br><br>Example:<br>
<br>The chairs of an auditorium are to be labeled with an uppercase English letter followed by a positive integer not exceeding 100. What is the largest number of chairs that can be labeled differently?
<br><br>Example:<br>
<br>There are 32 microcomputers in a computer center. Each microcomputer has 24 ports. How many different ports to a microcomputer in the center are there?
<br><br>Example:<br>
<br>How many different bit strings of length seven are there?
<br><br>Example:<br>
<br>How many different license plates can be made if each plate contains a sequence of three uppercase English letters followed by three digits (and no sequences of letters are prohibited, even if they are obscene)?
<br><br>Example:<br>
<br>How many functions are there from a set with m elements to a set with n elements?
<br><br>Example:<br>
<br>One-to-One Functions How many one-to-one functions are there from a set with m elements to one with n elements?
<br><br>Example:<br>
<br>What is the value of k after the following code, where n1, n2, . . . , nm are positive integers, has been executed?
<br>k=0
for i1 in range(n1):
	for i2 in range(n2):
		...
		for ik in range(nk):
			k=k+1

<br><br>Example:<br>
<br>Counting Subsets of a Finite Set Use the product rule to show that the number of different subsets of a finite set S is 2|S|.
<br><br><br>THE SUM RULE 
If a task can be done either in one of  ways or in one of  ways, where<br>
none of the set of  ways is the same as any of the set of  ways, then there are  ways to do the task. 
<br>Sum rule for Sets 
If  and   are disjoint sets, then 
<br><br>Example:<br>
<br>Suppose that either a member of the mathematics faculty or a student who is a mathematics major is chosen as a representative to a university committee. How many different choices are there for this representative if there are 37 members of the mathematics faculty and 83 mathematics majors and no one is both a faculty member and a student?
<br><br>Example:<br>
<br>A student can choose a computer project from one of three lists. The three lists contain 23, 15, and 19 possible projects, respectively. No project is on more than one list. How many possible projects are there to choose from?
<br><br>Example:<br>
<br>What is the value of k after the following code, where  are positive integers, has been executed?
<br>k=0
for i in range(n1):
	k=k+1
for i in range(n2):
	k=k+1
for i in range(n3):
	k=k+1
	.
	.
	.
for i in range(nm):
	k=k+1
	
<br><br>Example:<br>
<br>Each user on a computer system has a password, which is six to eight characters long, where each character is an uppercase letter or a digit. Each password must contain at least one digit. How many possible passwords are there?
<br><br><br> THE SUBTRACTION RULE
If a task can be done in either  ways or  ways, then the number of ways to do the task is  minus the number of ways to do the task that are common to the two different ways.
<br>Tip

<br><br>Example:<br>
<br>How many bit strings of length eight either start with a 1 bit or end with the two bits 00?
<br><br>Example:<br>
<br>A computer company receives 350 applications from computer graduates for a job planning a line of newWeb servers. Suppose that 220 of these applicants majored in computer science, 147 majored in business, and 51 majored both in computer science and in business. How many of these applicants majored neither in computer science nor in business?
<br><br>THE DIVISION RULE
There are  ways to do a task if it can be done using a procedure that can be carried out in  ways, and for every way , exactly  of the  ways correspond to way .
<br>What is in a standard Deck of Cards?
A standard deck of 52 cards has 13 kinds of cards, with four cards of each of kind, one in each of the four suits, hearts, diamonds, spades, and clubs.
<br><br>Example:<br>
<br>How many hands are four of a kind?

<br>Find  : How many ways can a dealer carry out the procedure of dealing four cards of the same rank? (find )

<br>Dealer chooses a first card (52 choices)
<br>Another card of the same rank (3 choices)
<br>Another card of the same rank (2 choices)
<br>Last card of the same rank (1 choices)
<br>The Product Rule tells us there are  ways to do this. 


<br>Find : How many ways can a dealer carry out the procedure of dealing four cards of the same rank? Ex:  

<br>Dealer chooses the first  (4 choices)
<br>Another  (3 choices)
<br>Another  (2 choices)
<br>The Last  (1 choices)
<br>Product Rule tells us there are  ways to do this.


<br>Find : For every four of a kind, there are exactly 24 ways of dealing this hand. 

<br>Therefore there are  four of a kinds.




<br><br>
<br>How many different ways are there to seat four people around a circular table, where two seatings are considered the same when each person has the same left neighbor and the same right neighbor?
<br><br><br>THE PIGEONHOLE PRINCIPLE 
If  is a positive integer and  or more objects are placed into  boxes, then there is at least one box containing two or more of the objects.
<br><br>Injectivity 
A function  from a set with  or more elements to a set with  elements is not one-to-one.
<br><br>Example:<br>
<br>Among any group of 367 people, there must be at least two with the same birthday, because there are only 366 possible birthdays.
<br><br>Example:<br>
<br>How many students must be in a class to guarantee that at least two students receive the same score on the final exam, if the exam is graded on a scale from 0 to 100 points?
<br><br>THE GENERALIZED PIGEONHOLE PRINCIPLE
If  objects are placed into  boxes, then there is at least one box containing at least ‚ÄÄ‚ÄÄ objects.
<br><br>Example:<br>
<br>Among 100 people there are at least ‚ÄÄ100/12‚ÄÄ = 9 who were born in the same month.
<br><br>Example:<br>
<br>
a) How many cards must be selected from a standard deck of 52 cards to guarantee that at least<br>
three cards of the same suit are chosen?

<br>
b) How many must be selected to guarantee that at least three hearts are selected?

]]></description><link>2300/counting-examples.html</link><guid isPermaLink="false">2300/counting examples.md</guid><pubDate>Thu, 31 Oct 2024 19:44:20 GMT</pubDate></item><item><title><![CDATA[Counting Rules]]></title><description><![CDATA[ 
 <br><br>Counting principles are fundamental tools in combinatorics that help determine the number of ways events can occur. This worksheet covers the Product Rule, Sum Rule, Difference Rule, and the Pigeonhole Principle, all of which are essential for solving combinatorial problems.<br>Key Concept: Counting Principles  

<br>Product Rule: If a task can be done in  ways and another independent task can be done in  ways, then the total number of ways to perform both tasks is .  
<br>Sum Rule: If a task can be done in  ways or in  ways, and the two options are mutually exclusive, then the total number of ways to perform the task is .  
<br>Difference Rule: If we count the total number of possibilities and subtract those that do not meet certain criteria, we obtain the number of valid cases.  
<br>Pigeonhole Principle: If more objects are placed into fewer containers than the number of objects, then at least one container must contain more than one object.

<br><br><br>Example: Choosing an Outfit  
Suppose you have 4 different shirts and 3 different pairs of pants. How many different outfit combinations can you make?  
Solution:  

<br>You can choose a shirt in 4 ways.  
<br>You can choose pants in 3 ways.  
<br>Since the choices are independent, we apply the Product Rule:  


<br>Conclusion: There are 12 different outfits possible.

<br><br><br>Example: Selecting a Dessert  
A restaurant offers 5 types of cakes and 3 types of ice cream. If you can choose either a cake or ice cream but not both, how many choices do you have?  
Solution:  

<br>There are 5 choices of cake.  
<br>There are 3 choices of ice cream.  
<br>Since these choices are mutually exclusive, we apply the Sum Rule:  


<br>Conclusion: There are 8 different ways to choose a dessert.

<br><br><br>Example: Counting Complementary Cases  
A school has 500 students, and 200 of them are enrolled in a coding class. How many students are not taking the coding class?  
Solution:  

<br>The total number of students is 500.  
<br>The number of students in the coding class is 200.  
<br>Applying the Difference Rule:  


<br>Conclusion: There are 300 students not taking the coding class.

<br><br><br>Example: Sock Pairs  
You have 10 pairs of socks in a drawer (20 socks total) but you randomly pick 11 socks. Prove that you must have at least one matching pair.  
Solution:  

<br>Each pair of socks is a pigeonhole (container).  
<br>The socks picked are the pigeons (objects).  
<br>Since there are 10 pairs but 11 socks are chosen, by the Pigeonhole Principle, at least one pair must be complete.  
<br>Conclusion: You must have at least one matching pair.

<br><br><br>Exercise 1: Product Rule  
A student has 6 options for breakfast and 4 options for lunch. How many different meal combinations can they have?
<br>Exercise 2: Sum Rule  
A bookshelf has 10 fiction books and 8 non-fiction books. If a person chooses one book, how many different choices do they have?
<br>Exercise 3: Difference Rule  
A university has 2,500 students. If 1,300 students are enrolled in a math course, how many are not taking a math course?
<br>Exercise 4: Pigeonhole Principle  
In a group of 367 people, prove that at least two people must have the same birthday.
<br><br><br>Solution (Click to expand)  
Exercise 1 Solution (Product Rule):  

<br>The student has 6 choices for breakfast.  
<br>The student has 4 choices for lunch.  
<br>Since these choices are independent, applying the Product Rule:  


<br>Conclusion: There are 24 possible meal combinations.

Exercise 2 Solution (Sum Rule):  

<br>The bookshelf has 10 fiction books and 8 non-fiction books.  
<br>Since these choices are mutually exclusive, applying the Sum Rule:  


<br>Conclusion: There are 18 book choices.

Exercise 3 Solution (Difference Rule):  

<br>The total number of students is 2,500.  
<br>The number of students in the math course is 1,300.  
<br>Applying the Difference Rule:  


<br>Conclusion: There are 1,200 students not taking a math course.

Exercise 4 Solution (Pigeonhole Principle):  

<br>There are 367 people and 365 possible birthdays.  
<br>The pigeonholes are the 365 birthdays, and the pigeons are the 367 people.  
<br>Since there are more people than birthdays, by the Pigeonhole Principle, at least one birthday must be shared by at least two people.  
<br>Conclusion: At least two people have the same birthday.

<br><br><br><br>Example 1: License Plates  
A license plate consists of 3 letters (A-Z) followed by 4 digits (0-9). How many different license plates can be created?  
Solution:  

<br>There are 26 choices for each letter.  
<br>There are 10 choices for each digit.  
<br>Applying the Product Rule:  


<br>Conclusion: There are 175,760,000 unique license plates.

<br><br>Example 2: Passwords  
A password consists of 5 lowercase letters followed by 2 digits. How many different passwords can be created?  
Solution:  

<br>Each letter has 26 choices.  
<br>Each digit has 10 choices.  
<br>Applying the Product Rule:  


<br>Conclusion: There are over 11 billion possible passwords.

<br><br>Example 3: Meal Choices  
A restaurant offers 4 types of appetizers, 6 main courses, and 3 desserts. How many different three-course meals can a customer order?  
Solution:  

<br>Choices for the appetizer: 4  
<br>Choices for the main course: 6  
<br>Choices for the dessert: 3  
<br>Applying the Product Rule:  


<br>Conclusion: There are 72 unique meal combinations.

<br><br><br>Example 4: Club Membership  
A student can join one of two clubs: a Robotics Club (30 members) or a Chess Club (25 members). How many total choices does the student have?  
Solution:  

<br>Since the student can join either club but not both, apply the Sum Rule:  


<br>Conclusion: The student has 55 choices.

<br><br>Example 5: Course Selection  
A university offers 5 morning classes and 8 evening classes. If a student can take one class in either time slot, how many choices do they have?  
Solution:  

<br>Since the classes are mutually exclusive, apply the Sum Rule:  


<br>Conclusion: The student has 13 different class choices.

<br><br>Example 6: Sports Teams  
A school has 10 boys' teams and 7 girls' teams. If a student can join any one team, how many options are available?  
Solution:  

<br>Since the student can choose from either category but not both, apply the Sum Rule:  


<br>Conclusion: The student has 17 different teams to choose from.

<br><br><br>Example 7: Sock Drawer  
A drawer contains 10 pairs of socks (20 socks in total). If you randomly pick 11 socks, show that you must have at least one matching pair.  
Solution:  

<br>Each pair of socks is a pigeonhole (container).  
<br>The socks picked are the pigeons (objects).  
<br>Since there are 10 pairs but 11 socks are chosen, by the Pigeonhole Principle, at least one pair must be complete.  
<br>Conclusion: You must have at least one matching pair.

<br><br>Example 8: Birthdays  
In a room of 367 people, show that at least two people must have the same birthday.  
Solution:  

<br>There are 365 possible birthdays (ignoring leap years).  
<br>There are 367 people (more people than birthdays).  
<br>By the Pigeonhole Principle, at least one birthday must be shared by at least two people.  
<br>Conclusion: At least two people share the same birthday.

<br><br>Example 9: Letters in Words  
Consider a word with 6 letters, where each letter is chosen from the English alphabet (26 options). If you write down 27 different words, prove that at least two must have started with the same letter.  
Solution:  

<br>There are 26 possible first letters (pigeonholes).  
<br>There are 27 words (pigeons).  
<br>Since 27 exceeds 26, at least two words must start with the same letter.  
<br>Conclusion: At least two words start with the same letter.

<br><br>Example 10: Handshakes  
In a group of 100 people, each person shakes hands with at least one other person. Prove that at least two people shook hands with the same number of people.  
Solution:  

<br>Each person can shake hands with between 1 and 99 people.  
<br>This creates 99 possible pigeonholes.  
<br>Since there are 100 people, by the Pigeonhole Principle, at least two people must have shaken hands with the same number of others.  
<br>Conclusion: At least two people shook hands with the same number of people.

]]></description><link>2300/counting-rules.html</link><guid isPermaLink="false">2300/Counting Rules.md</guid><pubDate>Mon, 10 Mar 2025 10:16:50 GMT</pubDate></item><item><title><![CDATA[Deck of Cards and Coin Flip Examples]]></title><description><![CDATA[ 
 <br>Virtually all counting and probability problems can be seen through cards and coins. <br><br>
<br>Sum Rule<br>
‚Ä¢	Example: How many ways can we draw either a heart or a spade?<br>
‚Ä¢	There are  hearts and  spades in the deck.<br>
‚Ä¢	Total:    ways.
<br>Product Rule<br>
‚Ä¢	Example: How many ways can we draw a two-card sequence, where the first is red and the second is black?<br>
‚Ä¢	There are  red cards and  black cards.<br>
‚Ä¢	Total:    ways.
<br>Division Rule<br>
‚Ä¢	Example: How many ways can we draw two identical cards from two identical decks?<br>
‚Ä¢	There are  possible pairs, but since order doesn‚Äôt matter, divide by 2.<br>
‚Ä¢	Total:    ways.
<br>Permutation<br>
‚Ä¢	Example: How many ways can we arrange 3 cards from a deck of 52?<br>
‚Ä¢	Order matters, so we use permutations:   .
<br>Combination<br>
‚Ä¢	Example: How many ways can we choose 5 cards from a deck?<br>
‚Ä¢	Order doesn‚Äôt matter, so we use combinations:    ways.
<br><br>
<br>Sum Rule<br>
‚Ä¢	Example: Suppose you want to find the number of ways to get either exactly 1 heads or exactly 2 heads in 3 coin flips.<br>
‚Ä¢	Solution:<br>
‚Ä¢	There are 3 ways to get exactly 1 head (HTT, THT, TTH).<br>
‚Ä¢	There are 3 ways to get exactly 2 heads (HHT, HTH, THH).<br>
‚Ä¢	Total:    ways.
<br>Product Rule<br>
‚Ä¢	Example: Suppose you flip a coin 3 times. How many total outcomes are possible?<br>
‚Ä¢	Solution: Each flip has 2 possible outcomes (heads or tails).<br>
‚Ä¢	Total:    possible outcomes.
<br>Division Rule<br>
‚Ä¢	Example: Suppose you have 4 flips with the result HTHH, but the order does not matter. How many unique sequences does this result represent?<br>
‚Ä¢	Solution: There are    total arrangements of the sequence HTHH, but the two H‚Äôs are indistinguishable.<br>
‚Ä¢	Total:   = 4  unique arrangements.
<br>Permutation<br>
‚Ä¢	Example: Suppose you want to arrange 2 heads in 4 flips. How many distinct ordered arrangements are there?<br>
‚Ä¢	Solution: Here, we are looking at the arrangement of heads in specific positions within the 4 flips.<br>
‚Ä¢	Total:    ordered arrangements.
<br>Combination<br>
‚Ä¢	Example: Suppose you want to choose 2 flips to be heads out of 4 flips, and order doesn‚Äôt matter.<br>
‚Ä¢	Solution: This is a combination problem where we choose 2 heads in any order out of 4 flips.<br>
‚Ä¢	Total:    ways to choose 2 heads out of 4 flips.
]]></description><link>2300/deck-of-cards-and-coin-flip-examples.html</link><guid isPermaLink="false">2300/Deck of Cards and Coin Flip Examples.md</guid><pubDate>Thu, 31 Oct 2024 19:38:42 GMT</pubDate></item><item><title><![CDATA[Proof Techniques: Direct Proof, Contraposition, and Contradiction]]></title><description><![CDATA[ 
 <br><br><br>In mathematical proof writing, different proof techniques are used depending on the structure of the statement. This worksheet covers three fundamental methods: Direct Proof, Proof by Contraposition, and Proof by Contradiction.<br>Key Concept: Proof Techniques  

<br>Direct Proof: Start from the given assumptions and logically deduce the desired conclusion.  
<br>Proof by Contraposition: Instead of proving , prove .  
<br>Proof by Contradiction: Assume  and  derive a contradiction.

<br><br><br>Example: Sum of Two Even Numbers is Even  
Statement: If  and  are even integers, then their sum  is also even.  
Proof:  

<br>By definition, an integer  is even if it can be written as  for some integer .  
<br>Suppose  and  are even. Then there exist integers  and  such that:  


<br>Adding both equations:  


<br>Since  is an integer,  is also even.  
<br>Conclusion: The sum of two even numbers is even. 

<br><br><br>Example: If  is Odd, then  is Odd  
Statement: If  is odd, then  is odd.  
Proof by Contraposition:  

<br>We prove the contrapositive: If  is even, then  is even.  
<br>Suppose  is even. By definition,  for some integer .  
<br>Squaring both sides:  


<br>Since  is an integer,  is even.  
<br>This proves that if  were even,  would also be even, which is the contrapositive of the original statement.  
<br>Conclusion: By the contrapositive, if  is odd, then  must be odd. 

<br><br><br>Example:  is Irrational  
Statement:  is irrational, meaning it cannot be expressed as  for integers  with .  
Proof by Contradiction:  

<br>Assume, for contradiction, that  is rational.  
<br>Then there exist integers  (with ) such that:  


<br>Assume  is in simplest form, meaning  and  have no common factors other than 1.  
<br>Squaring both sides:  



<br>Since  is divisible by 2,  must also be even (only even numbers have even squares).  
<br>Let  for some integer . Substituting:  



<br>Since  is divisible by 2,  must also be even.  
<br>This contradicts our assumption that  and  have no common factors (since both are divisible by 2).  
<br>Conclusion: The assumption that  is rational leads to a contradiction. Therefore,  is irrational. 

<br><br><br>Exercise 1: Direct Proof  
Prove that for any integer , if  is divisible by 3, then  is also divisible by 3.
<br>Exercise 2: Proof by Contraposition  
Prove that if  is not divisible by 4, then  is odd.
<br>Exercise 3: Proof by Contradiction  
Prove that there are infinitely many prime numbers.
<br><br><br>Solution (Click to expand)  
Exercise 1 Solution (Direct Proof):<br>
Suppose  is divisible by 3. Then there exists an integer  such that:  

Squaring both sides:  

Since  is an integer,  is divisible by 3. 
Exercise 2 Solution (Proof by Contraposition):<br>
We prove the contrapositive: If  is even, then  is divisible by 4.<br>
Suppose  is even, so  for some integer .<br>
Squaring:  

Clearly,  is divisible by 4. By contraposition, if  is not divisible by 4, then  must be odd. 
Exercise 3 Solution (Proof by Contradiction):<br>
Assume, for contradiction, that there are only finitely many primes:  

Consider the number:  

This number is not divisible by any of the primes in our list (since it leaves a remainder of 1).<br>
Therefore,  is either prime itself or has a prime factor not in our list. This contradicts our assumption of a finite number of primes.<br>
Conclusion: There must be infinitely many primes. 
<br><br><br>Example: The Square of an Even Number is Even  
Statement: If  is even, then  is even.  
Proof:  

<br>By definition, an integer  is even if it can be written as  for some integer .  
<br>Squaring both sides:  


<br>Since  is an integer,  is also even.  
<br>Conclusion: The square of an even number is even. 

<br><br><br>Example: If  is Odd, then  is Odd  
Statement: If  is odd, then  is odd.  
Proof by Contraposition:  

<br>We prove the contrapositive: If  is even, then  is even.  
<br>Suppose  is even. Then there exists an integer  such that:  


<br>Substituting into the expression:  


<br>Since  is an integer,  is even.  
<br>Thus, by contraposition, if  is odd, then  must be odd. 

<br><br><br>Example: There is No Largest Prime Number  
Statement: There are infinitely many prime numbers.  
Proof by Contradiction:  

<br>Assume, for contradiction, that there are only finitely many prime numbers:  


<br>Consider the number:  


<br>This number  is not divisible by any  (since dividing by any  leaves a remainder of 1).  
<br>So  is either prime itself or has a prime factor not in our list, contradicting the assumption that we listed all primes.  
<br>Conclusion: The assumption that there are finitely many primes is false. Hence, there must be infinitely many primes. 

<br><br><br>Exercise 1: Direct Proof  
Prove that the sum of two odd numbers is even.
<br>Exercise 2: Proof by Contraposition  
Prove that if  is not divisible by 9, then  is not divisible by 3.
<br>Exercise 3: Proof by Contradiction  
Prove that  is irrational.
<br><br><br>Solution (Click to expand)  
Exercise 1 Solution (Direct Proof):  

<br>Suppose  and  are both odd. Then there exist integers  and  such that:  


<br>Adding both equations:  


<br>Since  is an integer,  is even. 

Exercise 2 Solution (Proof by Contraposition):  

<br>We prove the contrapositive: If  is divisible by 3, then  is divisible by 9.  
<br>Suppose  is divisible by 3. Then there exists an integer  such that:  


<br>Squaring both sides:  


<br>Clearly,  is divisible by 9. By contraposition, if  is not divisible by 9, then  is not divisible by 3. 

Exercise 3 Solution (Proof by Contradiction):  

<br>Assume, for contradiction, that  is rational.  
<br>Then there exist integers  (with ) such that:  


<br>Assume  is in simplest form, meaning  and  have no common factors other than 1.  
<br>Squaring both sides:  



<br>Since  is divisible by 3,  must also be divisible by 3 (only multiples of 3 have squares that are multiples of 3).  
<br>Let  for some integer . Substituting:  



<br>Since  is divisible by 3,  must also be divisible by 3.  
<br>This contradicts our assumption that  and  have no common factors (since both are divisible by 3).  
<br>Conclusion: The assumption that  is rational leads to a contradiction. Therefore,  is irrational. 

<br>]]></description><link>2300/direct,-contraposition-and-contradiction.html</link><guid isPermaLink="false">2300/Direct, Contraposition and Contradiction.md</guid><pubDate>Thu, 27 Feb 2025 20:50:32 GMT</pubDate></item><item><title><![CDATA[Discrete Probability]]></title><description><![CDATA[ 
 <br><br>Probability theory was originally developed to analyze gambling but has since become a fundamental tool in various fields, including genetics, algorithm complexity, and artificial intelligence. This worksheet introduces discrete probability, focusing on experiments with finitely many equally likely outcomes.<br>Key Concept: Probability of an Event
The probability of an event  occurring in an experiment with equally likely outcomes is given by:

where all outcomes are assumed to be equally likely.
<br><br>Rolling a Fair Die
Consider a standard six-sided die. What is the probability that the die shows an odd number?
Solution:

<br>There are six possible outcomes: {1, 2, 3, 4, 5, 6}.
<br>The successful outcomes (odd numbers) are {1, 3, 5}, totaling 3 outcomes.
<br>Using the probability formula:



<br>Drawing a Card from a Deck
A standard deck of 52 playing cards contains 4 suits with 13 cards each. What is the probability of drawing a heart?
Solution:

<br>There are 52 total cards.
<br>There are 13 hearts.
<br>Probability:



<br><br>Basic Probability Computation

<br>A bag contains 5 red, 3 blue, and 2 green balls. If one ball is drawn at random, what is the probability that:

<br>(a) It is red?
<br>(b) It is not blue?


<br>A fair coin is flipped three times. What is the probability of getting exactly two heads?
<br>A number is randomly selected from the set {1, 2, 3, ..., 10}. What is the probability that the number is prime?

<br><br>Solutions

1. Probability of Drawing a Ball

<br>Total balls: $ + 3 + 2 = 10$
<br>(a) 
<br>(b) 

2. Probability of Two Heads in Three Flips

<br>Possible outcomes: {HHH, HHT, HTH, HTT, THH, THT, TTH, TTT}
<br>Favorable cases: {HHT, HTH, THH} (3 out of 8)
<br>

3. Probability of a Prime Number

<br>Prime numbers in {1, 2, ..., 10} = {2, 3, 5, 7} (4 numbers)
<br>


<br><br>What other exercises would be useful for practicing discrete probability?]]></description><link>2300/discrete-probability.html</link><guid isPermaLink="false">2300/Discrete Probability.md</guid><pubDate>Mon, 10 Mar 2025 11:40:21 GMT</pubDate></item><item><title><![CDATA[Fall 2024 2300]]></title><description><![CDATA[ 
 <br>make an amazing weather prediction app using real live weather data<br>This should include probabilities, expected number of inches of rain. We can ask questions like total number of inches of rain over the next week. Probability it will not rain at all, probability it will rain over an inch etc.<br>Week 9<br>
<br>Tuesday

<br>prep for Thursday

<br>logic
<br>sets
<br>functions
<br>number theory
<br>integer representations
<br>counting


<br>review of counting techniques
<br>more comfortable with number theory


<br>4 pages (two double sided)<br>Thursday<br>SUMMATIVE QUIZZZZZZZ<br>Week 10<br>Tuesday<br>Thursday<br>Final]]></description><link>2300/fall-2024-2300.html</link><guid isPermaLink="false">2300/Fall 2024 2300.md</guid><pubDate>Tue, 19 Nov 2024 19:11:05 GMT</pubDate></item><item><title><![CDATA[General Base Expansion]]></title><description><![CDATA[ 
 <br><br>The base  expansion of  is:<br><br>Where all .<br>The associated base  representation is:<br><br>For instance, here is a base 3 expansion of :<br>.<br>And the base 3 representation of  is:<br>.<br><br>Here is a base 5 expansion of :<br>.<br>And the base 5 representation of  is:<br>.<br><br>When , this is called the decimal expansion.<br>When , this is called the binary expansion.<br>When , this is called the octal expansion.<br>When , this is called the hexadecimal expansion.<br><br><br>We can combine this with other ideas.<br>For example:<br><br>And:<br>]]></description><link>2300/general-base-expansion.html</link><guid isPermaLink="false">2300/General Base Expansion.md</guid><pubDate>Mon, 10 Mar 2025 10:07:25 GMT</pubDate></item><item><title><![CDATA[Generalized Pigeonhole Principle]]></title><description><![CDATA[ 
 <br><br>The Generalized Pigeonhole Principle (GPHP) is an extension of the standard Pigeonhole Principle. It states that if  items are placed into  containers, and , then at least one container must contain more than  items. This principle is widely used in combinatorics, probability, and problem-solving.<br>Key Concept: Generalized Pigeonhole Principle
If  objects are distributed among  containers, then at least one container must contain at least  objects.
Mathematical Formulation:

Example Application: If 20 students are assigned to 6 study groups, then at least one group must have at least  students.
<br><br>Example 1: Sock Drawer
Suppose you have 10 pairs of socks in 3 drawers. By the GPHP, at least one drawer must contain at least  pairs of socks.
<br>Example 2: Birthday Months
If a group of 40 people is randomly assigned birth months, then at least one month must have at least  people with birthdays in that month.
<br><br>Exercise 1: Student Distribution
A school places 50 students into 8 classrooms. Show that at least one classroom has at least 7 students.
<br>Exercise 2: Number Selection
In a set of 15 numbers chosen from the integers 1 to 100, show that at least two numbers must differ by at most 6.
<br>Exercise 3: Letters in a Word
Consider a 30-letter sequence made up of only 5 different letters (A, B, C, D, E). Prove that at least one letter appears at least 6 times.
<br><br>Solutions (Click to expand)

<br>Exercise 1: By GPHP, at least one classroom must have at least  students.
<br>Exercise 2: By dividing the range into 15 groups of size at most 6, at least two numbers must belong to the same group.
<br>Exercise 3: By dividing 30 occurrences into 5 letter groups, at least one letter must appear at least  times.

]]></description><link>2300/generalized-pigeonhole-principle.html</link><guid isPermaLink="false">2300/Generalized Pigeonhole Principle.md</guid><pubDate>Mon, 10 Mar 2025 10:16:52 GMT</pubDate></item><item><title><![CDATA[Generated Problems]]></title><description><![CDATA[ 
 <br>As an AI assistant within <a data-href="Obsidian" href="Obsidian" class="internal-link" target="_self" rel="noopener nofollow">Obsidian</a>, your primary goal is to help users manage their ideas and knowledge more effectively. Format your responses using Markdown syntax, following these conventions:<br>
1.	Linking: Use the <a data-href="Obsidian" href="Obsidian" class="internal-link" target="_self" rel="noopener nofollow">Obsidian</a> link format for references. If an alias is needed, use <a data-tooltip-position="top" aria-label="Obsidian" data-href="Obsidian" href="Obsidian" class="internal-link" target="_self" rel="noopener nofollow">alias</a>.<br>
2.	Mathematical Notation:<br>
‚Ä¢	Use LaTeX syntax for all mathematical expressions.<br>
‚Ä¢	Inline math: Wrap expressions in single $ symbols (e.g., ).<br>
‚Ä¢	Block math: Use double dollar signs ($$) for larger equations, placing them on separate lines:<br><br>‚Ä¢	Example of inline math: ‚Äú($\eta$ = learning rate, $\delta_j$ = error term, $x_{ij}$ = input)‚Äù.

3.	Exercises Formatting:
‚Ä¢	Each exercise should be inside a %3E [!question] block.
‚Ä¢	Use a numbered title: Exercise X, followed by the problem statement.
4.	Solutions Formatting:
‚Ä¢	Solutions should be inside a &gt; [!tip]- Click to reveal solutions block.
‚Ä¢	Use bullet points for clarity.
‚Ä¢	Break solutions into logical steps, using case-based reasoning when applicable.
‚Ä¢	Always use LaTeX for math notation.
‚Ä¢	Conclude each proof with a filled square (‚ñ†) to indicate completion.
<br>Now, format the following exercises and solutions using these conventions:<br>Exercises:<br>
‚Ä¢	[Insert list of math problems here]<br>Solutions:<br>
‚Ä¢	Provide step-by-step solutions using the outlined format.‚Äù<br>‚∏ª<br>This version ensures the formatting aligns with both Obsidian conventions and proper Markdown syntax while maintaining mathematical clarity. Let me know if you need tweaks!&gt;)]]></description><link>2300/generated_problems_{date}{time}.html</link><guid isPermaLink="false">2300/generated_problems_{date}{time}.md</guid><pubDate>Mon, 10 Mar 2025 10:16:57 GMT</pubDate></item><item><title><![CDATA[Geometric Expected Value Derivation]]></title><description><![CDATA[ 
 <br><br>The expected value  of a geometric random variable  represents the average number of trials needed to achieve the first success in a series of independent, identical trials with a constant probability of success, .<br>For a geometric random variable  with probability of success , the probability that the first success occurs on the -th trial is:<br><br>where .<br>We aim to find , the expected or mean value of , which is defined for a discrete random variable as:<br><br>Substituting in the probability mass function , we get:<br><br><br>Since  is constant with respect to , we can factor it out of the summation:<br><br><br>Let  for simplicity. Then we can rewrite the expression as:<br><br><br>To solve the sum , we use a known identity for the sum of the form :<br><br>Proof of the Series Identity:<br>The sum  can be derived by differentiating the sum of a geometric series:<br>
<br>Start with the geometric series sum:  


<br>(calc trick!) Differentiate both sides with respect to :  



<br>Applying this identity with  (where ), we get:<br><br><br>Substituting this result back into our expression for :<br><br><br>The expected value of a geometric random variable  with probability  of success is:<br><br>This result shows that, on average, it will take  trials to get the first success in a series of independent trials with probability of success .]]></description><link>2300/geometric-expected-value-derivation.html</link><guid isPermaLink="false">2300/Geometric Expected Value Derivation.md</guid><pubDate>Thu, 14 Nov 2024 20:44:48 GMT</pubDate></item><item><title><![CDATA[Group Questions]]></title><description><![CDATA[ 
 <br>Thought Puzzles.]]></description><link>2300/group-questions.html</link><guid isPermaLink="false">2300/Group Questions.md</guid><pubDate>Tue, 07 Jan 2025 18:29:34 GMT</pubDate></item><item><title><![CDATA[Introduction to Discrete Probability]]></title><description><![CDATA[ 
 <br><br>Probability theory provides a mathematical framework for quantifying uncertainty. Originating from the study of gambling, it is now widely applied in fields such as genetics, algorithm analysis, and artificial intelligence. This worksheet introduces fundamental concepts in discrete probability.<br>Key Concept: Finite Probability
An experiment is a procedure that results in one of several possible outcomes. The sample space  is the set of all possible outcomes. An event  is a subset of .
Laplace‚Äôs Probability Definition:<br>
If  is a finite nonempty sample space of equally likely outcomes and  is an event, then:

Probability values range between 0 and 1.
<br><br>Example 1: Probability of Drawing a Blue Ball
An urn contains 4 blue and 5 red balls. If one ball is randomly selected, what is the probability that it is blue?
Solution:<br>
The sample space contains 9 outcomes (4 blue + 5 red).<br>
The event of drawing a blue ball has 4 outcomes.  

<br>Example 2: Rolling Two Dice
What is the probability that the sum of two rolled dice equals 7?
Solution:<br>
The total number of possible outcomes is:

The favorable outcomes are:  (6 total).  

<br><br>Exercise 1: Drawing a Card
What is the probability of drawing an ace from a standard deck of 52 cards?
<br>Exercise 2: Rolling an Even Sum
What is the probability that the sum of the numbers on two rolled dice is even?
<br>Exercise 3: Poker Hands
What is the probability that a randomly drawn 5-card poker hand contains exactly one ace?
<br>Exercise 4: Lottery
In a lottery where players pick six numbers from 1 to 40, what is the probability of correctly selecting all six numbers?
<br><br>Solutions (Click to Expand)
Solution to Exercise 1<br>
A deck has 52 cards, and 4 of them are aces.  

Solution to Exercise 2<br>
There are 36 possible outcomes when rolling two dice.<br>
Half (18) result in even sums.  

<br><br>
<br>Consider the Monty Hall problem: Is it better to switch doors or stay with your initial choice?
<br>How do probability distributions change when outcomes are not equally likely?
<br><br>What exercises would you like to explore in more detail?]]></description><link>2300/introduction-to-discrete-probability.html</link><guid isPermaLink="false">2300/Introduction to Discrete Probability.md</guid><pubDate>Mon, 10 Mar 2025 11:19:02 GMT</pubDate></item><item><title><![CDATA[Kanban]]></title><description><![CDATA[ 
 <br><br>
<br><a data-href="Fall 2024 2300" href="2300/fall-2024-2300.html" class="internal-link" target="_self" rel="noopener nofollow">Fall 2024 2300</a> ‚úÖ 2025-03-10
<br><a data-href="2300 Home" href="2300/2300-home.html" class="internal-link" target="_self" rel="noopener nofollow">2300 Home</a>
<br><a data-href="All Assignments" href="All Assignments" class="internal-link" target="_self" rel="noopener nofollow">All Assignments</a>
<br><a data-href="base 10 sums and products" href="2300/base-10-sums-and-products.html" class="internal-link" target="_self" rel="noopener nofollow">base 10 sums and products</a>
<br><a data-href="Bayes Rule" href="2300/bayes-rule.html" class="internal-link" target="_self" rel="noopener nofollow">Bayes Rule</a>
<br><a data-href="Bayes Example" href="2300/bayes-example.html" class="internal-link" target="_self" rel="noopener nofollow">Bayes Example</a>
<br><a data-href="Bayes Rule" href="2300/bayes-rule.html" class="internal-link" target="_self" rel="noopener nofollow">Bayes Rule</a>
<br><a data-href="central limit theorem" href="2300/central-limit-theorem.html" class="internal-link" target="_self" rel="noopener nofollow">central limit theorem</a>
<br><a data-href="Combinations and Permutations" href="2300/combinations-and-permutations.html" class="internal-link" target="_self" rel="noopener nofollow">Combinations and Permutations</a>
<br><a data-href="Expected Value Definition and Examples" href="probability/expected-value-definition-and-examples.html" class="internal-link" target="_self" rel="noopener nofollow">Expected Value Definition and Examples</a>
<br><a data-href="Expected ValueExamples" href="probability/expected-valueexamples.html" class="internal-link" target="_self" rel="noopener nofollow">Expected ValueExamples</a>
<br><a data-href="Geometric Expected Value Derivation" href="2300/geometric-expected-value-derivation.html" class="internal-link" target="_self" rel="noopener nofollow">Geometric Expected Value Derivation</a>
<br><a data-href="Geometric Distribution Definition" href="Geometric Distribution Definition" class="internal-link" target="_self" rel="noopener nofollow">Geometric Distribution Definition</a>
<br><a data-href="Random Variable Definition" href="random-variable-definition.html" class="internal-link" target="_self" rel="noopener nofollow">Random Variable Definition</a>
<br><a data-href="Binomial Distribution Expected Value(do something with it)" href="2300/binomial-distribution-expected-value(do-something-with-it).html" class="internal-link" target="_self" rel="noopener nofollow">Binomial Distribution Expected Value(do something with it)</a>
<br><a data-href="counting examples" href="2300/counting-examples.html" class="internal-link" target="_self" rel="noopener nofollow">counting examples</a>
<br><a data-href="Product Rule Problems" href="2300/product-rule-problems.html" class="internal-link" target="_self" rel="noopener nofollow">Product Rule Problems</a>
<br><a data-href="proofs_quiz" href="2300/proofs_quiz.html" class="internal-link" target="_self" rel="noopener nofollow">proofs_quiz</a>
<br><a data-href="General Base Expansion" href="2300/general-base-expansion.html" class="internal-link" target="_self" rel="noopener nofollow">General Base Expansion</a>
<br><a data-href="Modular Exponentiation" href="2300/modular-exponentiation.html" class="internal-link" target="_self" rel="noopener nofollow">Modular Exponentiation</a>
<br><a data-href="Plan VS Strategy" href="2300/plan-vs-strategy.html" class="internal-link" target="_self" rel="noopener nofollow">Plan VS Strategy</a>
<br><a data-href="Probability Definitions" href="2300/probability-definitions.html" class="internal-link" target="_self" rel="noopener nofollow">Probability Definitions</a>
<br><a data-href="Mathematical Axioms" href="2300/mathematical-axioms.html" class="internal-link" target="_self" rel="noopener nofollow">Mathematical Axioms</a>
<br><a data-href="Deck of Cards and Coin Flip Examples" href="2300/deck-of-cards-and-coin-flip-examples.html" class="internal-link" target="_self" rel="noopener nofollow">Deck of Cards and Coin Flip Examples</a>
<br><a data-href="Common Counting Problem Types" href="2300/common-counting-problem-types.html" class="internal-link" target="_self" rel="noopener nofollow">Common Counting Problem Types</a>
<br><a data-href="Binary, Decimal, Octal, and Hexadecimal Conversions" href="2300/binary,-decimal,-octal,-and-hexadecimal-conversions.html" class="internal-link" target="_self" rel="noopener nofollow">Binary, Decimal, Octal, and Hexadecimal Conversions</a>
<br><a data-href="Base 2 Expansion" href="2300/base-2-expansion.html" class="internal-link" target="_self" rel="noopener nofollow">Base 2 Expansion</a>
<br><br><br>]]></description><link>2300/kanban.html</link><guid isPermaLink="false">2300/Kanban.md</guid><pubDate>Mon, 10 Mar 2025 08:32:48 GMT</pubDate></item><item><title><![CDATA[Logic Notes]]></title><description><![CDATA[ 
 <br><br>Here is a list of Notes on Logic<br><br>Feel free to modify any of the values in the YAML header, such as date, title, or tags, to better fit your specific needs.&gt;)]]></description><link>2300/2300-logic.html</link><guid isPermaLink="false">2300/2300 Logic.md</guid><pubDate>Mon, 10 Mar 2025 10:17:11 GMT</pubDate></item><item><title><![CDATA[Logic Practice Problems]]></title><description><![CDATA[<a class="tag" href="?query=tag:logic" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#logic</a> 
 <br><a href=".?query=tag:logic" class="tag" target="_blank" rel="noopener nofollow">#logic</a><br><br>For each statement, let the universal set be the collection of all objects.<br>
<br>
Predicate: (a proposition, with space for a variable)<br>Predicate 

<br>
<br>

<br>Universal Quantifier

<br>Natural Language:<br>
"everything can swim!"
<br>Formal Logic:<br>


<br>Universal Quantifier

<br>Natural Language: "All dogs can swim"
<br>Natural Language Rephrase: "For all objects , if  is a dog, then  can swim"
<br>Formal Logic:
<br>

<br>Formal Logic to Natural Language

<br>Formal Language: 
<br>Natural Language: "If a fish is a dog, then a fish can swim."

<br>Formal Logic to Natural Language

<br>Formal Language: 
<br>Natural Language:"If a collie is a dog, then a collie can swim"

<br>Formal Logic to Natural Language

<br>Formal Logic: 
<br>Natural Language: "There is a dog that can swim"

<br>Understanding equalities and inequalities as predicates
<br>

<br>Understanding equalities and inequalities as predicates
<br>

<br><br>We will define the universal set of all objects that  may represent.<br><br><br><br><br>
"For all objects, "<br><br>
'Everyone loves Lasagna'<br><br><br>
There exists an object  such that .<br><br>
"Someone loves lasagna"<br>Nested Quantifiers

<br>
<br>Natural Language: "Everyone loves Raymond"
<br>Formal Language: 

<br>Nested Quantifiers

<br>
<br>Natural Language: "Everyone loves everyone"
<br>Formal Language:  

<br>Nested Quantifiers

<br>
<br>Natural Language: "Nobody loves everyone"
<br>Formal Language:  

<br>Nested Quantifiers

<br>
<br>Natural Language: "Everyone loves someone"
<br>Formal Language:  

<br><br><br>Define additional predicates as needed.<br>
 := ‚Äùx is a fruit‚Äù<br>
P (x) := ‚Äùx is a plant‚Äù<br>‚ÄùAll fruits are plants.‚Äù<br>
<br>Example
<br>
Natural Language: "There exists a fruit that smells bad"<br>
Restate "There is an object that is a fruit and smells bad"<br>

<br><br><br>Let  := ‚Äùsterile equipment‚Äù<br>Let  := ‚Äùa well-designed experiment‚Äù<br>‚ÄùSterile equipment is necessary for a well-designed experiment‚Äù<br> (implication!)<br>‚ÄùSterile equipment is sufficient for a well-designed experiment‚Äù<br>
(this is saying that sterile equipment is enough, or can guarantee a well designed experiment)<br> (when we swap the two we call this the converse)<br>‚ÄùIf equipment isn‚Äôt sterile, the experiment is not well designed‚Äù<br>
 (inverse of )<br>‚ÄùIf the experiment is not well designed then equipment isn‚Äôt sterile‚Äù<br>
<br><br>The implication is logically equivalent to the contrapositive.<br>The converse is logically equivalent to the inverse.<br><br>Let <br> is odd<br>
 <br>Q(x) = x is even<br>
<br>
Determine the Truth values of the following:<br>‚Ä¢ P(3)<br>
True!<br>
‚Ä¢ ‚àÄx, P(x)<br>
<br>
<br>
False!<br><br> (these are the natural numbers)<br><br>
<br>:<br>
: False<br>
(counterexample is an assignment which shows this is not true)<br>
x=4 and y=2<br>
False!
<br><br>
<br>
let , notice that since  is a natural number, so is  and therefore this is True!
<br><br>
Let y=0, then for all x,  and therefore, for no , . False!
<br><br>We will show that if Bob committed the murder, that he was in two places at once.<br>We assume that drive times and witness testimony are all correct. We also assume that forensic and cell data is accurate.<br>Assume that murder took place after 7:30pm.<br>
Assume that Bob committed the murder.<br>Since Bob was was seen at the gas station at 7:30, and the drive from the gas station to the victim's house is 25 minutes-- the earliest he could get to the victim's house was at 7:55. However, he was pinged at his home around 7:45, therefore Bob went home before visiting the victim's house.<br>We will assume that Bob was home by 9:05. Since the drive from Jack's house to Bobs is 15 minutes, Bob left Jack's house by 8:50 at the latest. <br>Since Bob left Jack's house by 8:50 at the latest and they watched a 1/2 hour show together, Bob arrived at jack's house by 8:20 at the latest. Since it is a 20 minute drive from the victim's house to Jack's house, the latest Bob could have left the victim's house is 8pm.<br>Since it is a 15 minute drive from Bob's house to the victim's house, the earliest that Bob could arrive at the victim's house is 8pm.<br>Therefore, Bob arrives at the victim's house the same minute that he leaves the victim's house. This contradicts the forensic testimony and the witness testimony of the victim's neighbor as to the timing. (ad hominem are the personal attacks, the prosecution is ridiculous etc)<br>Converting to Formal Language
Rewrite the following using only conjunctions, disjunctions and negations<br>
<br>

<br>Converting to Formal Language
Rewrite the following using only conjunctions, disjunctions and negations<br>
<br>
<br>

<br>]]></description><link>2300/logic-practice-problems.html</link><guid isPermaLink="false">2300/Logic Practice Problems.md</guid><pubDate>Mon, 10 Mar 2025 10:17:02 GMT</pubDate></item><item><title><![CDATA[Mathematical Axioms]]></title><description><![CDATA[ 
 <br>When we are practicing proofs, we may use some mathematical properties we haven't spent time covering.<br>
You are welcome to use any of these rules without counting them as additional assumptions (we are assuming these are true any time we use math)<br>]]></description><link>2300/mathematical-axioms.html</link><guid isPermaLink="false">2300/Mathematical Axioms.md</guid><pubDate>Mon, 04 Nov 2024 22:31:45 GMT</pubDate></item><item><title><![CDATA[Modular Exponentiation]]></title><description><![CDATA[<a class="tag" href="?query=tag:crpytography" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#crpytography</a> 
 <br>Let's calculate something of the form .<br>
For example, let's find .<br><br>We would like to calculate something of the form . <a href=".?query=tag:crpytography" class="tag" target="_blank" rel="noopener nofollow">#crpytography</a><br>We would typically think to first compute , but when  is large,  is massive. A reminder of 30^30.<br><br>We will use modular exponentiation instead.<br><br>Find the base 2 representation of <br><a data-tooltip-position="top" aria-label="https://imanulhuq.yolasite.com/resources/Discrete%20Mathematics%20and%20Its%20Applications%20-%208e%20%28Kenneth%20Rosen%29%20%5B9781259676512%5D_compressed-compressed.pdf#page=291" rel="noopener nofollow" class="external-link" href="https://imanulhuq.yolasite.com/resources/Discrete%20Mathematics%20and%20Its%20Applications%20-%208e%20%28Kenneth%20Rosen%29%20%5B9781259676512%5D_compressed-compressed.pdf#page=291" target="_blank">Rosen</a> has another example. <br><br>Therefore <br>You can find this in python to double check<br>in_binary=bin(1234)
print(in_binary[2:])
<br>Binary, Decimal, Octal, and Hexadecimal Conversions<br><br>Here are some sample problems from Rosen.<br><br>
<br>Convert the decimal expansion of each of these integers to a binary expansion.

<br>a) 231
<br>b) 4532
<br>c) 97644


<br>Convert the decimal expansion of each of these integers to a binary expansion.

<br>a) 321
<br>b) 1023
<br>c) 100632


<br><br>
<br>Convert the binary expansion of each of these integers to a decimal expansion.

<br>a) (1 1111)‚ÇÇ
<br>b) (10 0000 0001)‚ÇÇ
<br>c) (1 0101 0101)‚ÇÇ
<br>d) (110 1001 0001 0000)‚ÇÇ


<br>Convert the binary expansion of each of these integers to a decimal expansion.

<br>a) (1 1011)‚ÇÇ
<br>b) (10 1011 0101)‚ÇÇ
<br>c) (11 1011 1110)‚ÇÇ
<br>d) (111 1100 0001 1111)‚ÇÇ


<br><br>
<br>Convert the octal expansion of each of these integers to a binary expansion.

<br>a) (572)‚Çà
<br>b) (1604)‚Çà
<br>c) (423)‚Çà
<br>d) (2417)‚Çà


<br><br>
<br>Convert the binary expansion of each of these integers to an octal expansion.

<br>a) (1111 0111)‚ÇÇ
<br>b) (1010 1010 1010)‚ÇÇ
<br>c) (111 0111 0111 0111)‚ÇÇ
<br>d) (101 0101 0101 0101)‚ÇÇ


<br><br>
<br>Convert the hexadecimal expansion of each of these integers to a binary expansion.

<br>a) (80E)‚ÇÅ‚ÇÜ
<br>b) (135AB)‚ÇÅ‚ÇÜ
<br>c) (ABBA)‚ÇÅ‚ÇÜ
<br>d) (DEFACED)‚ÇÅ‚ÇÜ


<br>Convert (BADFACED)‚ÇÅ‚ÇÜ from its hexadecimal expansion to its binary expansion.
<br>Convert (ABCDEF)‚ÇÅ‚ÇÜ from its hexadecimal expansion to its binary expansion.
<br><br>
<br>Convert each of the integers in Exercise 6 from a binary expansion to a hexadecimal expansion.
<br>Convert (1011 0111 1011)‚ÇÇ from its binary expansion to its hexadecimal expansion.
<br>Convert (1 1000 0110 0011)‚ÇÇ from its binary expansion to its hexadecimal expansion.
]]></description><link>2300/modular-exponentiation.html</link><guid isPermaLink="false">2300/Modular Exponentiation.md</guid><pubDate>Fri, 25 Oct 2024 14:47:16 GMT</pubDate></item><item><title><![CDATA[Number Theory Basics]]></title><description><![CDATA[ 
 <br><br>Definition: A prime number is an integer greater than 1 that has no positive divisors other than 1 and itself.<br><br>Prime Numbers Example

<br>2 is a prime number because its only divisors are 1 and 2.
<br>3 is a prime number because its only divisors are 1 and 3.
<br>4 is not a prime number because it is divisible by 2.

<br><br><br>Definition: The greatest common divisor of two integers,  and , is the largest integer that divides both  and  without leaving a remainder.<br><br>Consider the numbers 48 and 18:<br><br>Using the Euclidean algorithm:<br>
<br> remainder 12.
<br> remainder 6.
<br> remainder 0.
<br><br><br>Definition: The least common multiple of two integers is the smallest positive integer that is divisible by both numbers.<br><br>For numbers 4 and 5:<br><br>Enumerate multiples:<br>
<br>Multiples of 4: 4, 8, 12, 16, 20...
<br>Multiples of 5: 5, 10, 15, 20...
<br>Here, 20 is the smallest common multiple. <br><br><br>Definition: Modular arithmetic is a system of arithmetic for integers, where numbers "wrap around" after reaching a certain value‚Äîthe modulus.<br><br>Given  and :<br><br>This implies that when 17 is divided by 5, the remainder is 2.<br><br><br>Definition: Every integer greater than 1 is either a prime number or can be uniquely factored into prime numbers.<br><br>60 can be factored as:<br><br><br>Example of Prime Factorization
Prime factorization is used to express a number as the product of its prime factors.<br>
Consider factorizing :<br>

<br><br>Problem: Prove that for any two integers  and , the relationship between their GCD and LCM is given by:<br><br>Solution:<br>The fundamental theorem of arithmetic allows us to write  and  as:<br><br><br>Then, the GCD is:<br><br>And the LCM is:<br><br>Thus, by multiplying the GCD and the LCM, we essentially reconstruct the product:<br><br>This shows that:<br>]]></description><link>2300/number-theory-basics.html</link><guid isPermaLink="false">2300/Number Theory Basics.md</guid><pubDate>Mon, 10 Mar 2025 05:17:28 GMT</pubDate></item><item><title><![CDATA[Plan VS Strategy]]></title><description><![CDATA[ 
 <br>What is the difference between a Plan and a Strategy?<br>
<a data-tooltip-position="top" aria-label="https://www.youtube.com/watch?v=iuYlGRnC7J8" rel="noopener nofollow" class="external-link" href="https://www.youtube.com/watch?v=iuYlGRnC7J8" target="_blank">plan vs strategy</a>]]></description><link>2300/plan-vs-strategy.html</link><guid isPermaLink="false">2300/Plan VS Strategy.md</guid><pubDate>Thu, 31 Oct 2024 06:01:19 GMT</pubDate></item><item><title><![CDATA[Probability Definitions]]></title><description><![CDATA[ 
 <br><br>Definition: The set of all possible outcomes of a random experiment.<br>
Example: For rolling a six-sided die, the sample space is   .<br><br><br>Definition: A subset of the sample space. An event represents outcomes of interest.<br>
Example: For rolling an even number on a six-sided die, the event    is   .<br><br><br>Definition: The likelihood of an event happening, defined as the ratio of the number of favorable outcomes to the total number of outcomes in the sample space.<br>
Formula: If all outcomes are equally likely,<br>
 .<br>
Example: If you roll a die, the probability of rolling a 4 is   .<br>Set Relationships (uniform distribution)
If  if and only if 
<br><br><br>Definition: The complement of an event    is the set of outcomes in the sample space that are not in   .<br>
Formula:   .<br>
Example: If    is the event of rolling an even number (i.e.,   ), the complement    is   . So,   .<br>Set Relationships (uniform distribution)
We always have  and 
<br><br><br>Definition: The union of two events    and    represents the event that either   ,   , or both occur.<br>
Formula:   .<br>
Example: If    is the event of rolling a 1 or 2 (i.e.,   ), and    is the event of rolling an even number (i.e.,   ), then   . So,   .<br>Set Relationships (uniform distribution)
The above is true because, 
<br><br><br>Definition:: The intersection of two events    and    represents the event where both    and    occur simultaneously.<br>
Formula:   .<br>
Example: With the same events as above,    and   , the intersection   . Thus,   .<br><br><br>Definition: Two events are mutually exclusive if they cannot both occur at the same time (i.e.,   ).<br>
Example: If    is rolling a 1 (i.e.,   ) and  B  is rolling a 6 (i.e.,   ), then  A  and  B  are mutually exclusive. Thus,   .<br>Set Relationships (uniform distribution)
If  then  and 
<br><br><br>Definition: The probability that event    occurs given that event    has already occurred.<br>
Formula:   , assuming   .<br>
Example: In a deck of cards, let    be the event of drawing a King, and    the event of drawing a face card. Given that a face card was drawn, the probability it‚Äôs a King is   .<br>Set Relationships (uniform distribution) 

<br>If  then  in which case .<br>
Therefore  if and only if .
<br>If  then  in which case .<br>
Therefore  if and only if .

<br>Common Rewrite
We will commonly use the following rewrite of the conditional probability definition<br>
Definition: <br>
Rewrite: 
<br><br><br>Definition: Two events  A  and  B  are independent if the occurrence of one does not affect the probability of the other.<br>
Formula:   .<br>
Example: Rolling a die and flipping a coin are independent events because the outcome of one does not influence the outcome of the other.<br>Independence Trick!
Note that if  and  are independent, then <br>
This means that information about the event  does not give us information about the event 
<br>Set Relationships (uniform distribution)
This happens when .
<br>A <a data-tooltip-position="top" aria-label="https://www.desmos.com/calculator/0vyhwazqug" rel="noopener nofollow" class="external-link" href="https://www.desmos.com/calculator/0vyhwazqug" target="_blank">Desmos</a> example of independence.<br><br><br>Definition: The probability of event  occurring is the sum of the probabilities  occurs given that  occurs and the probability that  occurs given that  does not occur.<br>
<br>Set Relationships (uniform distribution)
<br>
The total number of donuts is the number of donuts with sprinkles plus the number of donuts without sprinkles.
<br><br><br>Example:<br>
There is a 6% chance that school will be canceled on any given day.  On the days that it snows, there is a 50% chance school will be canceled. There is a 1% chance it will snow on any given day. If today there is no snow, what is the chance that school will be canceled?<br>Suppose  'school is canceled'<br>
Suppose  'it snows'<br>
Find   , , , .<br>
Then find  by using the Total Probability Law<br>
]]></description><link>2300/probability-definitions.html</link><guid isPermaLink="false">2300/Probability Definitions.md</guid><pubDate>Thu, 14 Nov 2024 19:52:36 GMT</pubDate></item><item><title><![CDATA[Product Rule Problems]]></title><description><![CDATA[ 
 <br><br>This worksheet covers fundamental counting principles, including permutations, combinations, and functions. Work through the exercises to strengthen your understanding of these topics.<br>How to Use This Worksheet

<br>Read each question carefully.
<br>Try solving it before looking at the solution.
<br>Solutions are collapsed below each question.

<br><br><br>Office Assignments
A new company with just two employees, Sanchez and Patel, rents a floor of a building with 12 offices. How many ways are there to assign different offices to these two employees?
Solution
There are 12 choices for Sanchez‚Äôs office and 11 choices for Patel‚Äôs office, giving a total of  ways.

<br><br>Auditorium Chairs
The chairs of an auditorium are to be labeled with an uppercase English letter followed by a positive integer not exceeding 100. What is the largest number of chairs that can be labeled differently?
Solution
There are 26 possible letters and 100 possible numbers, so the total number of labels is .

<br><br>Computer Center Ports
There are 32 microcomputers in a computer center. Each microcomputer has 24 ports. How many different ports to a microcomputer in the center are there?
Solution
Since each of the 32 computers has 24 ports, the total number of ports is .

<br><br>Bit Strings
How many different bit strings of length seven are there?
Solution
Each bit can be either 0 or 1, so there are  different bit strings.

<br><br>License Plates
How many different license plates can be made if each plate contains a sequence of three uppercase English letters followed by three digits (and no sequences of letters are prohibited, even if they are obscene)?
Solution
The number of ways to choose three letters is , and the number of ways to choose three digits is . The total number of plates is:


<br><br>Counting Functions
How many functions are there from a set with  elements to a set with  elements?
Solution
Each of the  elements can be mapped to any of the  elements, so there are  functions.

<br><br>One-to-One Functions
How many functions are there from a set with  elements to one with  elements?
Solution
A function assigns each of the  elements to an element in the -element set. The number of ways to do this is the number of ways to choose  potentially repeating elements from , which is given by:

This is equivalent to the permutation formula: .

<br><br>Loop Counting
What is the value of  after the following code, where  are positive integers, has been executed?
k = 0
for i1 in range(n1):
    for i2 in range(n2):
        ...
        for ik in range(nk):
            k = k + 1

Solution
The variable  counts the total number of iterations of the nested loops. The number of times  is incremented is:


<br><br>Counting Subsets
Use the product rule to show that the number of different subsets of a finite set  is .
Solution
Each element of  can either be included in a subset or not, giving two choices per element. If , the total number of subsets is .

]]></description><link>2300/product-rule-problems.html</link><guid isPermaLink="false">2300/Product Rule Problems.md</guid><pubDate>Tue, 04 Mar 2025 20:31:00 GMT</pubDate></item><item><title><![CDATA[Proof Techniques (old)]]></title><description><![CDATA[<a class="tag" href="?query=tag:logic" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#logic</a> 
 <br><a href=".?query=tag:logic" class="tag" target="_blank" rel="noopener nofollow">#logic</a><br><br>Mathematical proofs provide a rigorous way to establish the truth of statements. This worksheet covers three key proof techniques: Direct Proof, Proof by Contraposition, and Proof by Contradiction, each of which is suited for different types of mathematical statements.<br>Key Concept: Proof Techniques  

<br>Direct Proof: Proves  by logically deducing  from .  
<br>Proof by Contraposition: Instead of proving , proves .  
<br>Proof by Contradiction: Assumes  and derives a contradiction, proving .

<br><br><br>Example: The Square of an Even Number is Even  
Statement: If  is even, then  is even.  
Proof:  

<br>By definition, an integer  is even if it can be written as  for some integer .  
<br>Squaring both sides:  


<br>Since  is an integer,  is also even.  
<br>Conclusion: The square of an even number is even. 

<br><br><br>Example: If  is Odd, then  is Odd  
Statement: If  is odd, then  is odd.  
Proof by Contraposition:  

<br>We prove the contrapositive: If  is even, then  is even.  
<br>Suppose  is even. Then there exists an integer  such that:  


<br>Substituting into the expression:  


<br>Since  is an integer,  is even.  
<br>Thus, by contraposition, if  is odd, then  must be odd. 

<br><br><br>Example: There is No Largest Prime Number  
Statement: There are infinitely many prime numbers.  
Proof by Contradiction:  

<br>Assume, for contradiction, that there are only finitely many prime numbers:  


<br>Consider the number:  


<br>This number  is not divisible by any  (since dividing by any  leaves a remainder of 1).  
<br>So  is either prime itself or has a prime factor not in our list, contradicting the assumption that we listed all primes.  
<br>Conclusion: The assumption that there are finitely many primes is false. Hence, there must be infinitely many primes. 

<br><br><br>Exercise 1: Direct Proof  
Prove that the sum of two odd numbers is even.
<br>Exercise 2: Proof by Contraposition  
Prove that if  is not divisible by 9, then  is not divisible by 3.
<br>Exercise 3: Proof by Contradiction  
Prove that  is irrational.
<br><br><br>Solution (Click to expand)  
Exercise 1 Solution (Direct Proof):  

<br>Suppose  and  are both odd. Then there exist integers  and  such that:  


<br>Adding both equations:  


<br>Since  is an integer,  is even. 

Exercise 2 Solution (Proof by Contraposition):  

<br>We prove the contrapositive: If  is divisible by 3, then  is divisible by 9.  
<br>Suppose  is divisible by 3. Then there exists an integer  such that:  


<br>Squaring both sides:  


<br>Clearly,  is divisible by 9. By contraposition, if  is not divisible by 9, then  is not divisible by 3. 

Exercise 3 Solution (Proof by Contradiction):  

<br>Assume, for contradiction, that  is rational.  
<br>Then there exist integers  (with ) such that:  


<br>Assume  is in simplest form, meaning  and  have no common factors other than 1.  
<br>Squaring both sides:  



<br>Since  is divisible by 3,  must also be divisible by 3 (only multiples of 3 have squares that are multiples of 3).  
<br>Let  for some integer . Substituting:  



<br>Since  is divisible by 3,  must also be divisible by 3.  
<br>This contradicts our assumption that  and  have no common factors (since both are divisible by 3).  
<br>Conclusion: The assumption that  is rational leads to a contradiction. Therefore,  is irrational. 

]]></description><link>2300/proof-techniques-(old).html</link><guid isPermaLink="false">2300/Proof Techniques (old).md</guid><pubDate>Mon, 10 Mar 2025 09:37:48 GMT</pubDate></item><item><title><![CDATA[proofs_quiz]]></title><description><![CDATA[<a class="tag" href="?query=tag:logic" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#logic</a> 
 <br><a href=".?query=tag:logic" class="tag" target="_blank" rel="noopener nofollow">#logic</a><br>
<br>We will show that this is injective.<br>
Suppose that<br>
<br>
then either  or <br>
Case 1: 
<br>Suppose <br>
Then  divides , but the highest power of 2 dividing  is only .<br>
By fundamental theorem of arithmetic, prime factorization of numbers are unique, and so <br>
(by symmetry we see the same if )<br>
Case 2:
<br>the same idea but with powers of 3<br>we want  to show that ]]></description><link>2300/proofs_quiz.html</link><guid isPermaLink="false">2300/proofs_quiz.md</guid><pubDate>Mon, 10 Mar 2025 09:38:04 GMT</pubDate></item><item><title><![CDATA[Set Duality Don't publish]]></title><description><![CDATA[ 
 <br>Suppose that.<br><br>
Let, <br>
,<br>
.<br>A big question in theory of mind is "is a blanket soft? or is soft the feeling of a blanket?"<br>This may sound poetic, but our understanding of properties is often mediated through objects.<br>Consider the dual set<br>
<br>
,<br>
,<br>
<br>Our understanding of an attribute is mediated through the objects we associate with them.  <br>Please come up with your own example with objects and predicates that you see in your life. ]]></description><link>2300/set-duality.html</link><guid isPermaLink="false">2300/set duality.md</guid><pubDate>Mon, 10 Mar 2025 10:17:07 GMT</pubDate></item><item><title><![CDATA[Strong Induction]]></title><description><![CDATA[<a class="tag" href="?query=tag:logic" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#logic</a> 
 Notes on strong induction.]]></description><link>2300/strong-induction.html</link><guid isPermaLink="false">2300/Strong Induction.md</guid><pubDate>Mon, 10 Mar 2025 10:03:14 GMT</pubDate></item><item><title><![CDATA[Untitled]]></title><description><![CDATA[ 
 Untitled document.]]></description><link>2300/untitled.html</link><guid isPermaLink="false">2300/Untitled.md</guid><pubDate>Mon, 10 Mar 2025 10:05:13 GMT</pubDate></item><item><title><![CDATA[Untitled 1]]></title><description><![CDATA[ 
 ]]></description><link>2300/untitled-1.html</link><guid isPermaLink="false">2300/Untitled 1.md</guid><pubDate>Mon, 10 Mar 2025 10:05:05 GMT</pubDate></item><item><title><![CDATA[Untitled 2]]></title><description><![CDATA[ 
 Untitled document.]]></description><link>2300/untitled-2.html</link><guid isPermaLink="false">2300/Untitled 2.md</guid><pubDate>Mon, 10 Mar 2025 10:05:09 GMT</pubDate></item><item><title><![CDATA[Weak Induction]]></title><description><![CDATA[<a class="tag" href="?query=tag:logic" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#logic</a> 
 Notes on weak induction.]]></description><link>2300/weak-induction.html</link><guid isPermaLink="false">2300/Weak Induction.md</guid><pubDate>Mon, 10 Mar 2025 10:05:45 GMT</pubDate></item><item><title><![CDATA[Week 8]]></title><description><![CDATA[ 
 Notes and resources for Week 8.]]></description><link>2300/week-8.html</link><guid isPermaLink="false">2300/Week 8.md</guid><pubDate>Mon, 10 Mar 2025 10:05:49 GMT</pubDate></item><item><title><![CDATA[z3 Pipes Getting Setup]]></title><description><![CDATA[<a class="tag" href="?query=tag:z3pipes" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#z3pipes</a> 
 Instructions for setting up the z3 pipes project.]]></description><link>2300/z3-pipes-getting-setup.html</link><guid isPermaLink="false">2300/z3 pipes getting setup.md</guid><pubDate>Mon, 10 Mar 2025 10:05:54 GMT</pubDate><enclosure url="lib/media/pasted-image-20241017215916.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;lib/media/pasted-image-20241017215916.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[z3 Pipes Project Overview]]></title><description><![CDATA[<a class="tag" href="?query=tag:todo" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#todo</a> <a class="tag" href="?query=tag:school" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#school</a> <a class="tag" href="?query=tag:todo" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#todo</a> <a class="tag" href="?query=tag:school" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#school</a> 
 Overview of the z3 pipes project.]]></description><link>2300/z3-pipes-project-overview.html</link><guid isPermaLink="false">2300/z3 pipes project overview.md</guid><pubDate>Mon, 10 Mar 2025 10:05:58 GMT</pubDate><enclosure url="lib/media/pasted-image-20241017150228.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;lib/media/pasted-image-20241017150228.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2.4 Sequences and Sums]]></title><description><![CDATA[ 
 <br><br>What is the term  of the sequence  if an equals<br>
a) ?<br>b) ?<br>c) ? <br>d) ?<br>Show that the sequence  is a solution of the recurrence<br>
relation  if<br>
a)  <br>b) .<br>For each of these sequences find a recurrence relation satisfied by this sequence. (The answers are not unique because there are infinitely many different recurrence<br>
relations satisfied by any sequence.)<br><br>
<br>
 (talk to Alex)]]></description><link>3004/2.4-sequences-and-sums.html</link><guid isPermaLink="false">3004/2.4 Sequences and Sums.md</guid><pubDate>Fri, 31 Jan 2025 06:19:25 GMT</pubDate></item><item><title><![CDATA[3004 Data Structures Arrays(old?)]]></title><description><![CDATA[ 
 <br><br>
<br>Ignore constant factors and low-order terms.
<br>Bounds:

<br>Upper bounds: 
<br>Lower bounds: 
<br>Tight bounds: 


<br>Particles in the observable universe estimated .
<br><br><br><br><br>
<br>Specification for what operations on the machine can be performed in O(1) time.
<br>Model in this class is called the Word-RAM.
<br><br>
<br>Machine word: Block of  bits ( is the word size of a -bit Word-RAM).
<br>Memory: Addressable sequence of machine words.
<br>Processor supports many constant-time operations on an O(1) number of words (integers):

<br>Integer arithmetic: 
<br>Logical operators: 
<br>Bitwise arithmetic: 
<br>Given word a, can:

<br>Read word at address a
<br>Write word to address a




<br><br><br><br>A Sequence maintains an ordered collection of items where the order is extrinsic.<br><br>
<br>Container Operations:

<br>build(X): Constructs a sequence from iterable.
<br>len(): Returns the number of items in the sequence.


<br>Static Operations:

<br>iter_seq(): Iterates over items in sequence order.
<br>get_at(i): Retrieves the -th item.
<br>set_at(i, x): Replaces the -th item with .


<br>Dynamic Operations:

<br>insert_at(i, x): Inserts  at position .
<br>delete_at(i): Removes and returns the -th item.
<br>insert_first(x): Inserts  at the beginning.
<br>delete_first(): Removes and returns the first item.
<br>insert_last(x): Inserts  at the end.
<br>delete_last(): Removes and returns the last item.


<br><br>
<br>Stack: Supports insert_last(x) and delete_last().
<br>Queue: Supports insert_last(x) and delete_first().
<br><br>A Set maintains a collection of unique items, each identified by a key.<br><br>
<br>Container Operations:

<br>build(X): Constructs a set from iterable.
<br>len(): Returns the number of items in the set.


<br>Static Operations:

<br>find(k): Retrieves the item with key .


<br>Dynamic Operations:

<br>insert(x): Adds  to the set; replaces existing item if key  exists.
<br>delete(k): Removes and returns the item with key .


<br>Order Operations:

<br>iter_ord(): Iterates over items in key order.
<br>find_min(): Finds the item with the smallest key.
<br>find_max(): Finds the item with the largest key.
<br>find_next(k): Finds the item with the smallest key greater than .
<br>find_prev(k): Finds the item with the largest key smaller than .


<br><br>
<br>Dictionary: A set without order operations.
<br><br><br><br>
<br>Array is great for static operations! get at(i) and set at(i, x) in Œò(1) time!
<br>But not so great at dynamic operations...
<br>(For consistency, we maintain the invariant that the array is full)
<br>Then inserting and removing items requires:

<br>reallocating the array
<br>shifting all items after the modified item


<br><br><br><br>
<br>Pointer data structure (this is not related to a Python "list").
<br>Each item is stored in a node that contains a pointer to the next node in sequence.
<br>Each node has two fields: node.item and node.next.
<br>Can manipulate nodes simply by relinking pointers!
<br>Maintain pointers to the first node in the sequence (called the head).
<br>Can now insert and delete from the front in Œò(1) time! Yay!
<br>(Inserting/deleting efficiently from the back is also possible; you will do this in PS1).
<br>But now get at(i) and set at(i, x) each take O(n) time... :(
<br>Can we get the best of both worlds? Yes! (Kind of...)<br><br><br><br>
<br>Make an array efficient for last dynamic operations.
<br>Python list is a dynamic array.
<br>Idea! Allocate extra space so reallocation does not occur with every dynamic operation.
<br>Fill ratio: , the ratio of items to space.
<br>Whenever the array is full (), allocate Œò(n) extra space at the end to maintain a fill ratio  (e.g., 1/2).
<br>Will have to insert Œò(n) items before the next reallocation.
<br>A single operation can take Œò(n) time for reallocation.
<br>However, any sequence of Œò(n) operations takes Œò(n) time.
<br>So each operation takes Œò(1) time ‚Äúon average.‚Äù
<br><br>
<br>Data structure analysis technique to distribute cost over many operations.
<br>An operation has amortized cost  if  operations cost at most .
<br>"T(n) amortized" roughly means  ‚Äúon average‚Äù over many operations.
<br>Inserting into a dynamic array takes Œò(1) amortized time.
<br><br><br>
<br>Delete from back? Œò(1) time without effort, yay! 
<br>However, this can be very wasteful in space. We want the size of the data structure to stay Œò(n).
<br>Attempt: If very empty, resize to . But alternating insertion and deletion could be bad...
<br>Idea! When , resize array to ratio  where  (e.g., , ).
<br>Then Œò(n) cheap operations must be made before the next expensive resize.
<br>Can limit extra space usage to  for any , by setting:
<br><br>
<br>Dynamic arrays only support dynamic last operations in Œò(1) time.
<br>Python list.append() and list.pop() are amortized O(1) time, but other operations can be O(n)!
<br><br><br>

# Tricky Qs<br>Suppose that you are given two sorted (smallest at the head) SLL and want to combine them into one sorted SLL.<br>What is the time complexity of this? (suppose one list is length  and the other is length ).<br>
Best case? Worst case?<br><br><img alt="Pasted image 20250220163624.png" src="lib/media/pasted-image-20250220163624.png"><br><img alt="Pasted image 20250220163640.png" src="lib/media/pasted-image-20250220163640.png">]]></description><link>3004/3004-data-structures-arrays(old/3004-data-structures-arrays(old.html</link><guid isPermaLink="false">3004/3004 Data Structures Arrays(old?).md</guid><pubDate>Wed, 05 Mar 2025 01:08:04 GMT</pubDate><enclosure url="lib/media/pasted-image-20250220163624.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;lib/media/pasted-image-20250220163624.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[3004 Home]]></title><description><![CDATA[ 
 <br>If you have the time to do some review before the start of 3004, I would suggest reviewing your high school algebra 1 and 2 and perhaps some pre cal. We will be using lots of it. <br><br><br>I will be expecting you to be able to do all of this section pretty fast without thinking about it. I am not going to spend much time on this unless someone stops me. I am happy to go over it, but the more you know beforehand the easier it will be for both of us<br><br>
<br>Expand : <a data-tooltip-position="top" aria-label="https://youtu.be/gl_-E6iVAg4" rel="noopener nofollow" class="external-link" href="https://youtu.be/gl_-E6iVAg4" target="_blank">Distributive Law</a>  
<br>Simplify : <a data-tooltip-position="top" aria-label="https://youtu.be/AR1uqNbjM5s" rel="noopener nofollow" class="external-link" href="https://youtu.be/AR1uqNbjM5s" target="_blank">Division of Fractions</a>  
<br>Simplify , : <a data-tooltip-position="top" aria-label="https://youtu.be/dAvosUEUH6I" rel="noopener nofollow" class="external-link" href="https://youtu.be/dAvosUEUH6I" target="_blank">Exponents to 0 or 1 power</a>  
<br>Simplify : <a data-tooltip-position="top" aria-label="https://youtu.be/JnpqlXN9Whw" rel="noopener nofollow" class="external-link" href="https://youtu.be/JnpqlXN9Whw" target="_blank">Negative Exponents</a>  
<br>Simplify : <a data-tooltip-position="top" aria-label="https://youtu.be/zM_p7tfWvLU" rel="noopener nofollow" class="external-link" href="https://youtu.be/zM_p7tfWvLU" target="_blank">Exponents with Products</a>  
<br>Simplify : <a data-tooltip-position="top" aria-label="https://youtu.be/SwqOrUWzDY8" rel="noopener nofollow" class="external-link" href="https://youtu.be/SwqOrUWzDY8" target="_blank">Exponents with Parenthesis</a>  
<br>Simplify : <a data-tooltip-position="top" aria-label="https://youtu.be/AR1uqNbjM5s" rel="noopener nofollow" class="external-link" href="https://youtu.be/AR1uqNbjM5s" target="_blank">Exponents with Division</a>  
<br><br>
<br>Simplify : <a data-tooltip-position="top" aria-label="https://youtu.be/ClYdw4d4OmA" rel="noopener nofollow" class="external-link" href="https://youtu.be/ClYdw4d4OmA" target="_blank">Order of Operations</a>  
<br>Simplify : <a data-tooltip-position="top" aria-label="https://youtu.be/qFFhdLlX220" rel="noopener nofollow" class="external-link" href="https://youtu.be/qFFhdLlX220" target="_blank">Simplifying Square Roots</a>  
<br>Factor : <a data-tooltip-position="top" aria-label="https://youtu.be/mbb3msmX2xs" rel="noopener nofollow" class="external-link" href="https://youtu.be/mbb3msmX2xs" target="_blank">Factoring with Distributive Property</a>  
<br>Expand : <a data-tooltip-position="top" aria-label="https://youtu.be/JfuisfEdnjk" rel="noopener nofollow" class="external-link" href="https://youtu.be/JfuisfEdnjk" target="_blank">Distributing <span class="math math-inline is-loaded"></span></a>  
<br>Expand : <a data-tooltip-position="top" aria-label="https://youtu.be/xH_GllPuymc" rel="noopener nofollow" class="external-link" href="https://youtu.be/xH_GllPuymc" target="_blank">Distributing <span class="math math-inline is-loaded"></span></a>  
<br><br>
<br>Graph : <a data-tooltip-position="top" aria-label="https://youtu.be/uk7gS3cZVp4" rel="noopener nofollow" class="external-link" href="https://youtu.be/uk7gS3cZVp4" target="_blank">Graphing from Slope-Intercept Form</a>  
<br>Find slope-intercept form from slope and point: <a data-tooltip-position="top" aria-label="https://youtu.be/AqFwKecNaTk" rel="noopener nofollow" class="external-link" href="https://youtu.be/AqFwKecNaTk" target="_blank">Video</a>  
<br>Find slope-intercept form from two points: <a data-tooltip-position="top" aria-label="https://youtu.be/XMJ72mtMn4Y" rel="noopener nofollow" class="external-link" href="https://youtu.be/XMJ72mtMn4Y" target="_blank">Video</a>  
<br><br>In algorithmic analysis, algebra and functions are going to be really really important. If you would like a visual understanding of algorithmic analysis, understanding functions and how they are graphed will be incredibly important. <br><br><br><br><br>We are going to be doing some discrete math and algorithmic analysis. This may include some theory behind cryptographic algorithms, or more general algorithms you may expect to see on a technical interview. This is largely up to you as a class<br>Previous iterations of this course have had the following objectives:<br>
By the completion of the course, students should learn the following skills:

<br>construct truth tables and verify logical identities
<br>construct short mathematical proofs for elementary integer concepts and mathematical sets
<br>use mathematical induction to verify hypotheses
<br>perform set operations on concrete and abstract sets
<br>use mathematical induction to test the correctness of recursive algorithms
<br>use mathematical induction to test the correctness of iterative algorithms
<br>compute greatest common divisors
<br>use combinations and permutations to compute the cardinality of finite sets
<br>construct your own linked lists in C++ and write algorithms that use them
<br>construct your own binary trees in C++ and write algorithms that use them
<br>analyze basic algorithms using Big-Oh notation

<br>Please don't hesitate to reach out to me with any questions!<br>Alex Contact Info<br><br><br><br>Book a time to meet with me here for advising questions.<br>
<a data-tooltip-position="top" aria-label="https://calendar.google.com/calendar/u/0/appointments/schedules/AcZssZ3xGGiTHTGvLTEprqnfStfQ1DE_eGW3qhj8uxua69gWwzUwf11g9xRcFDhC3bBiYoKQ9Ol9oefF" rel="noopener nofollow" class="external-link" href="https://calendar.google.com/calendar/u/0/appointments/schedules/AcZssZ3xGGiTHTGvLTEprqnfStfQ1DE_eGW3qhj8uxua69gWwzUwf11g9xRcFDhC3bBiYoKQ9Ol9oefF" target="_blank">google booking link</a><br>
<a data-tooltip-position="top" aria-label="https://app.reclaim.ai/m/alexander-stevens/advising-and-pin-deletion" rel="noopener nofollow" class="external-link" href="https://app.reclaim.ai/m/alexander-stevens/advising-and-pin-deletion" target="_blank">reclaim (phasing out)</a><br><br>This is the zoom link I use for everything.<br>
<a data-tooltip-position="top" aria-label="https://udenver.zoom.us/my/alex.stevens" rel="noopener nofollow" class="external-link" href="https://udenver.zoom.us/my/alex.stevens" target="_blank">my zoom</a> <a href=".?query=tag:zoom" class="tag" target="_blank" rel="noopener nofollow">#zoom</a> ]]></description><link>3004/3004-home.html</link><guid isPermaLink="false">3004/3004 Home.md</guid><pubDate>Tue, 07 Jan 2025 18:28:36 GMT</pubDate></item><item><title><![CDATA[Algorithmic Analysis]]></title><description><![CDATA[ 
 <br>For each of the first four questions<br>
<br>create a table showing how you calculate runtime for the given code. Give the time for each line of code (usually some unknown constant) and the number of times the line is executed (usually a function of n, the size of the data).
<br>Give a formula for the total runtime as a function of n (where n is the size of the data)
<br>Using big-Oh notation, give the order of growth of the runtime of the method.
<br><br>def question1(some_list: list[int]):
	n = len(some_list) #1 c
	total = 0    #2 c

	for j in range(n): #3 c
		total += some_list[j] #4 c
  return total
<br><br><br>def question3(some_list: list[int]):
    n = len(some_list) #1
    total = 0#2

    for j in range(n):#3
      for k in range(n):#4
        total += some_list[j]#5

    return total
<br><br>If  then  for sufficiently large n<br><br>    def get(self,index):
        if index&gt;=self.size:#1
            raise IndexError#2
        cur=self.header.next#3
        for _ in range(index):#4
            cur=cur.next#5
        return cur.value#6
<br><br>get with DLL implementation takes O(n) time<br>def search(self,v): #returns the index of the value if found and -1 otherwise
	cur=self.header.next
	index=0
	while cur!=self.trailer:
			if cur.value==v:
					return index
			cur=cur.next
			index+=1
	return -1
]]></description><link>3004/algorithmic-analysis.html</link><guid isPermaLink="false">3004/Algorithmic Analysis.md</guid><pubDate>Wed, 19 Feb 2025 01:34:53 GMT</pubDate></item><item><title><![CDATA[Arrays]]></title><description><![CDATA[ 
 <br><br>Arrays are a fundamental data structure used to store a collection of elements in a contiguous block of memory. Each element in an array is accessed using an index, which allows for efficient data retrieval and manipulation. Arrays are widely used in programming for organizing and managing data efficiently.<br>Key Concept
An array is a fixed-size, ordered collection of elements of the same data type. Elements in an array are indexed starting from 0 in most programming languages.
<br><br>Example 1: Declaring and Accessing an Array
# Declaring an array in Python
numbers = [10, 20, 30, 40, 50]

# Accessing elements
print(numbers[0])  # Output: 10
print(numbers[2])  # Output: 30

[!example] Example 2: Iterating Through an Array
numbers = [5, 10, 15, 20]

for num in numbers:
    print(num)

<br><br>Exercise 1: Basic Array Operations

<br>Create an array with five numbers.
<br>Print the first and last elements of the array.
<br>Modify the third element to be 100.
<br>Print the updated array.

<br>Exercise 2: Finding the Maximum Value

<br>Write a function that takes an array as input and returns the maximum value.
<br>Test the function with an example array.

<br>Exercise 3: Reversing an Array

<br>Write a program that reverses the elements of an array without using built-in functions.

<br><br>Click to expand solutions
# Solution to Exercise 1
numbers = [10, 20, 30, 40, 50]
print(numbers[0])  # First element
print(numbers[-1])  # Last element
numbers[2] = 100
print(numbers)

# Solution to Exercise 2
def find_max(arr):
    max_val = arr[0]
    for num in arr:
        if num &gt; max_val:
            max_val = num
    return max_val

print(find_max([4, 7, 1, 9, 3]))

# Solution to Exercise 3
def reverse_array(arr):
    return arr[::-1]

print(reverse_array([1, 2, 3, 4, 5]))

]]></description><link>3004/arrays.html</link><guid isPermaLink="false">3004/Arrays.md</guid><pubDate>Mon, 03 Mar 2025 03:59:09 GMT</pubDate></item><item><title><![CDATA[Asymptotic Notation]]></title><description><![CDATA[ 
 <br><br>Asymptotic notation is a mathematical tool used to describe the growth rate of functions, primarily in algorithm analysis. It helps in comparing the efficiency of algorithms by abstracting away constant factors and lower-order terms.<br>Key Concept

<br>Ignore constant factors and low-order terms.
<br>Bounds:

<br>Upper bounds: 
<br>Lower bounds: 
<br>Tight bounds: 


<br>Particles in the observable universe estimated .

<br><br><br><br>Key Concept: Big-O Upper Bound
Big-O notation, denoted as , provides an upper bound on the growth rate of a function. It describes the worst-case scenario for an algorithm‚Äôs time complexity.
Definition: A function  is in  if there exist positive constants  and  such that:

<img alt="width=%50" src="lib/media/pasted-image-20250305115742.png">
<br><br><br><br>Key Concept: Œ© Notation
In algorithm analysis, Œ© (Omega) notation represents the lower bound of an algorithm's running time. It provides a guarantee that an algorithm takes at least a certain amount of time, asymptotically, for large input sizes.
Definition:<br>
A function  is in  if there exist positive constants  and  such that for all ,

This means that for large enough ,  serves as a lower bound for , up to a constant factor.<br>
<img alt="Pasted image 20250305120404.png" src="lib/media/pasted-image-20250305120404.png">
<br><br><br><br><br>A model of computation provides a theoretical framework for analyzing algorithms, defining what operations can be performed in O(1) time.<br>Word-RAM Model

<br>Machine word: Block of  bits ( is the word size of a -bit Word-RAM).
<br>Memory: Addressable sequence of machine words.
<br>Processor supports many constant-time operations on an O(1) number of words (integers):

<br>Integer arithmetic: 
<br>Logical operators: 
<br>Bitwise arithmetic: 
<br>Given word a, can:

<br>Read word at address a
<br>Write word to address a





<br><br>Example: Asymptotic Growth Comparison
Consider two functions:

<br>
<br>

Even though  has a smaller coefficient for , for large enough , it will dominate . We write:<br>

<br><br>Identify Growth Rates

<br>Classify the following functions using asymptotic notation:

<br>
<br>
<br>


<br>Which function grows faster:  or ? Justify your answer.
<br>If  and , what can you say about ?

<br><br>Solutions (Click to expand)

<br>1.

<br>
<br>
<br>


<br>2.

<br> grows faster than  for sufficiently large .


<br>3.

<br>Since  is asymptotically smaller than , .   



<br>]]></description><link>3004/asymptotic-notation.html</link><guid isPermaLink="false">3004/Asymptotic Notation.md</guid><pubDate>Wed, 05 Mar 2025 18:54:39 GMT</pubDate><enclosure url="lib/media/pasted-image-20250305115742.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;lib/media/pasted-image-20250305115742.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Asymptotic Notation Overview]]></title><description><![CDATA[ 
 <br><br>
<br>Ignore constant factors and low-order terms.
<br>Bounds:

<br>Upper bounds: 
<br>Lower bounds: 
<br>Tight bounds: 


<br>Particles in the observable universe estimated .
<br><br><br><br><br>
<br>Specification for what operations on the machine can be performed in O(1) time.
<br>Model in this class is called the Word-RAM.
<br><br>
<br>Machine word: Block of  bits ( is the word size of a -bit Word-RAM).
<br>Memory: Addressable sequence of machine words.
<br>Processor supports many constant-time operations on an O(1) number of words (integers):

<br>Integer arithmetic: 
<br>Logical operators: 
<br>Bitwise arithmetic: 
<br>Given word a, can:

<br>Read word at address a
<br>Write word to address a




<br><br><br><br>A Sequence maintains an ordered collection of items where the order is extrinsic.<br><br>
<br>Container Operations:

<br>build(X): Constructs a sequence from iterable.
<br>len(): Returns the number of items in the sequence.


<br>Static Operations:

<br>iter_seq(): Iterates over items in sequence order.
<br>get_at(i): Retrieves the -th item.
<br>set_at(i, x): Replaces the -th item with .


<br>Dynamic Operations:

<br>insert_at(i, x): Inserts  at position .
<br>delete_at(i): Removes and returns the -th item.
<br>insert_first(x): Inserts  at the beginning.
<br>delete_first(): Removes and returns the first item.
<br>insert_last(x): Inserts  at the end.
<br>delete_last(): Removes and returns the last item.


<br><br>
<br>Stack: Supports insert_last(x) and delete_last().
<br>Queue: Supports insert_last(x) and delete_first().
<br><br>A Set maintains a collection of unique items, each identified by a key.<br><br>
<br>Container Operations:

<br>build(X): Constructs a set from iterable.
<br>len(): Returns the number of items in the set.


<br>Static Operations:

<br>find(k): Retrieves the item with key .


<br>Dynamic Operations:

<br>insert(x): Adds  to the set; replaces existing item if key  exists.
<br>delete(k): Removes and returns the item with key .


<br>Order Operations:

<br>iter_ord(): Iterates over items in key order.
<br>find_min(): Finds the item with the smallest key.
<br>find_max(): Finds the item with the largest key.
<br>find_next(k): Finds the item with the smallest key greater than .
<br>find_prev(k): Finds the item with the largest key smaller than .


<br><br>
<br>Dictionary: A set without order operations.
<br><br><br><br>
<br>Array is great for static operations! get at(i) and set at(i, x) in Œò(1) time!
<br>But not so great at dynamic operations...
<br>(For consistency, we maintain the invariant that the array is full)
<br>Then inserting and removing items requires:

<br>reallocating the array
<br>shifting all items after the modified item


<br><br><br><br>
<br>Pointer data structure (this is not related to a Python "list").
<br>Each item is stored in a node that contains a pointer to the next node in sequence.
<br>Each node has two fields: node.item and node.next.
<br>Can manipulate nodes simply by relinking pointers!
<br>Maintain pointers to the first node in the sequence (called the head).
<br>Can now insert and delete from the front in Œò(1) time! Yay!
<br>(Inserting/deleting efficiently from the back is also possible; you will do this in PS1).
<br>But now get at(i) and set at(i, x) each take O(n) time... :(
<br>Can we get the best of both worlds? Yes! (Kind of...)<br><br><br><br>
<br>Make an array efficient for last dynamic operations.
<br>Python list is a dynamic array.
<br>Idea! Allocate extra space so reallocation does not occur with every dynamic operation.
<br>Fill ratio: , the ratio of items to space.
<br>Whenever the array is full (), allocate Œò(n) extra space at the end to maintain a fill ratio  (e.g., 1/2).
<br>Will have to insert Œò(n) items before the next reallocation.
<br>A single operation can take Œò(n) time for reallocation.
<br>However, any sequence of Œò(n) operations takes Œò(n) time.
<br>So each operation takes Œò(1) time ‚Äúon average.‚Äù
<br><br>
<br>Data structure analysis technique to distribute cost over many operations.
<br>An operation has amortized cost  if  operations cost at most .
<br>"T(n) amortized" roughly means  ‚Äúon average‚Äù over many operations.
<br>Inserting into a dynamic array takes Œò(1) amortized time.
<br><br><br>
<br>Delete from back? Œò(1) time without effort, yay! 
<br>However, this can be very wasteful in space. We want the size of the data structure to stay Œò(n).
<br>Attempt: If very empty, resize to . But alternating insertion and deletion could be bad...
<br>Idea! When , resize array to ratio  where  (e.g., , ).
<br>Then Œò(n) cheap operations must be made before the next expensive resize.
<br>Can limit extra space usage to  for any , by setting:
<br><br>
<br>Dynamic arrays only support dynamic last operations in Œò(1) time.
<br>Python list.append() and list.pop() are amortized O(1) time, but other operations can be O(n)!
<br><br><br>

# Tricky Qs<br>Suppose that you are given two sorted (smallest at the head) SLL and want to combine them into one sorted SLL.<br>What is the time complexity of this? (suppose one list is length  and the other is length ).<br>
Best case? Worst case?<br><br><img alt="Pasted image 20250220163624.png" src="lib/media/pasted-image-20250220163624.png"><br><img alt="Pasted image 20250220163640.png" src="lib/media/pasted-image-20250220163640.png">]]></description><link>3004/asymptotic-notation-overview.html</link><guid isPermaLink="false">3004/Asymptotic Notation Overview.md</guid><pubDate>Wed, 05 Mar 2025 01:08:01 GMT</pubDate><enclosure url="lib/media/pasted-image-20250220163624.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;lib/media/pasted-image-20250220163624.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Binary Trees]]></title><description><![CDATA[ 
 <br><br>A binary tree is a hierarchical data structure in which each node has at most two children, referred to as the left child and the right child. Binary trees are widely used in computing for various applications, including search trees, heaps, and expression parsing.<br>Key Concept: Binary Tree Structure A binary tree consists of nodes, each containing:

<br>A value (or data)
<br>A reference to the left child (if any)
<br>A reference to the right child (if any)
<br>The topmost node is called the root.
<br>Nodes without children are called leaves.

<br><br>Example 1: Simple Binary Tree Consider the following binary tree:
      A
     / \
    B   C
   / \   \
  D   E   F


<br>The root node is A.
<br>B and C are children of A.
<br>D and E are children of B.
<br>F is the right child of C.
<br>D, E, and F are leaf nodes.

<br>Example 2: Binary Search Tree (BST) A Binary Search Tree (BST) is a special kind of binary tree where:

<br>The left subtree of a node contains only nodes with values less than the node‚Äôs value.
<br>The right subtree contains only nodes with values greater than the node‚Äôs value.

Example BST:
      8
     / \
    3   10
   / \    \
  1   6    14
     / \   /
    4   7 13


<br>This structure allows efficient searching, insertion, and deletion operations.

<br><br>Exercise 1: Identify the Structure Given the following tree:
      X
     / \
    Y   Z
   /     \
  P       Q


<br>What is the root node?
<br>Which nodes are leaves?
<br>What are the left and right children of X?

<br>Exercise 2: Construct a Binary Tree Draw a binary tree with the following nodes: 5, 2, 8, 1, 3, 7, 10.

<br>Label the root node.
<br>Ensure the left and right children follow a binary tree structure.

<br>Exercise 3: Convert to a BST Convert the following set of numbers into a Binary Search Tree (BST):
[12, 5, 18, 2, 9, 15, 19]


<br>Start with 12 as the root.
<br>Insert numbers according to BST rules.

]]></description><link>3004/binary-trees.html</link><guid isPermaLink="false">3004/Binary Trees.md</guid><pubDate>Thu, 27 Feb 2025 23:35:31 GMT</pubDate></item><item><title><![CDATA[Counting by Hand Using the RAM Model]]></title><description><![CDATA[ 
 <br><br>The Random Access Machine (RAM) model is a theoretical abstraction used to analyze algorithms. It assumes a simple sequential machine with uniform memory access time. This worksheet will help you understand how to count operations by hand using the RAM model, applying it to fundamental algorithmic steps.<br>Key Concept
In the RAM model, each basic operation (e.g., addition, subtraction, assignment) is assumed to take a constant amount of time. The total cost of an algorithm is determined by counting the number of these operations.
<br><br>Example 1: Counting Steps in a Simple Loop
Consider the following Python code:
sum = 0
for i in range(1, n+1):
    sum += i

Step-by-step breakdown using RAM model:

<br>sum = 0 (1 operation)
<br>for i in range(1, n+1) (loop runs n times)
<br>sum += i (executed n times)
<br>Total operations: 1 + n + n = 2n + 1

<br>Example 2: Nested Loop Analysis
for i in range(1, n+1):
    for j in range(1, n+1):
        sum += i * j

Step-by-step breakdown:

<br>Outer loop runs n times
<br>Inner loop runs n times per outer loop iteration
<br>sum += i * j runs n * n = n^2 times
<br>Total operations: O(n^2)

<br><br>Exercise 1
Analyze the following code using the RAM model:
total = 0
for i in range(n):
    for j in range(n):
        for k in range(n):
            total += i + j + k

How many operations does this algorithm perform in terms of n?
<br>Exercise 2
Given the following function, determine its operation count:
def mystery(n):
    if n == 1:
        return 1
    return 1 + mystery(n-1)

Express your answer as a function of n.
<br><br>Click to Reveal Solutions

Solution 1:

<br>The triple nested loop runs n^3 times.
<br>Each iteration performs 1 addition.
<br>Total operations: O(n^3).

Solution 2:

<br>The function mystery(n) calls itself n times.
<br>Each call performs one addition.
<br>Total operations: O(n).


]]></description><link>3004/counting-by-hand-using-the-ram-model.html</link><guid isPermaLink="false">3004/Counting by Hand Using the RAM Model.md</guid><pubDate>Mon, 03 Mar 2025 03:51:11 GMT</pubDate></item><item><title><![CDATA[Data Structures and Abstract Data Types Overview]]></title><description><![CDATA[ 
 <br><br>
<br>: Amortized time complexity (average over multiple operations)
<br>: Expected time complexity (assuming a good hash function)
<br>, : Standard Big-O notation
<br><br><br><br><br><br><br><br><br>
<br>Amortized (): Over a sequence of operations, the average time per operation is low, even if individual operations can sometimes take longer.

<br>Insertion in Hash Set/Hash Map: Resizing causes occasional  operations, but most insertions are  on average.


<br>Expected (): Assumes a good hash function, meaning average-case performance.

<br>Search and Deletion in Hash Set/Hash Map: Expected  but could degrade to  in worst-case scenarios (bad hash functions or too many collisions).


]]></description><link>3004/data-structures-and-abstract-data-types-overview.html</link><guid isPermaLink="false">3004/Data Structures and Abstract Data Types Overview.md</guid><pubDate>Tue, 04 Mar 2025 23:50:18 GMT</pubDate></item><item><title><![CDATA[Diffie Helman Key Exchange]]></title><description><![CDATA[ 
 <br>The Diffie-Hellman Key Exchange is a method used to securely exchange cryptographic keys over a public channel. It is named after Whitfield Diffie and Martin Hellman, who introduced it in 1976.<br><br><br>Diffie-Hellman allows two parties to establish a shared secret over an insecure communication channel without requiring them to share any private information at the beginning. This shared secret can subsequently be used to encrypt communications using a symmetric key cipher.<br><br><br>
<br>
Agree on public parameters: The two parties must agree upon a large prime number, , and a generator base, , of the multiplicative group of integers modulo .

<br>
Generate a private key: Each party selects a private key,  for Alice and  for Bob, which are secret integers chosen randomly.

<br>
Compute public keys: Each party computes their public keys, which can be safely sent to the other party:

<br>Alice calculates .
<br>Bob calculates .


<br>
Exchange public keys: The parties exchange their public keys  and .

<br>
Compute the shared secret:

<br>Alice computes .
<br>Bob computes .

Both calculations result in the same value , which is the shared secret.

<br><br><br>The mathematical basis of Diffie-Hellman relies on the difficulty of the Discrete Logarithm Problem. Given  and , it is computationally infeasible to derive  or  from  or  if  is large enough.<br><br>Let's walk through an example:<br>Public Parameters:<br>
<br>Prime number, 
<br>Generator, 
<br>Private Keys:<br>
<br>Alice's private key, 
<br>Bob's private key, 
<br>Compute Public Keys:<br>
<br>Alice computes her public key:


<br>Bob computes his public key:


<br>Exchange Public Keys:<br>
<br>Alice sends  to Bob.
<br>Bob sends  to Alice.
<br>Compute Shared Secret:<br>
<br>
Alice computes:


<br>
Bob computes:


<br>Hence, the shared secret is .<br>Reminder
The security of the Diffie-Hellman key exchange relies on the difficulty of solving the discrete logarithm problem. Therefore, it is crucial to choose a large prime number  to ensure security.
<br><br>
<br>
Using  and , if Alice's private key is 7 and Bob's private key is 11, compute their public keys and the shared secret.

<br>
Explain why the Diffie-Hellman exchange is vulnerable to man-in-the-middle attacks without additional integrity verification mechanisms.

<br>Remember, the key here is understanding the underlying mathematics and the sequence of steps that compose the Diffie-Hellman key exchange process.]]></description><link>3004/diffie-helman-key-exchange.html</link><guid isPermaLink="false">3004/Diffie Helman Key Exchange.md</guid><pubDate>Tue, 04 Feb 2025 23:36:38 GMT</pubDate></item><item><title><![CDATA[Doubly Linked List (DLL) Implementation]]></title><description><![CDATA[ 
 <br><br>A Doubly Linked List (DLL) is a type of linked list in which each node contains a reference to both its previous and next node. This structure allows for more efficient insertions and deletions compared to a singly linked list, as traversal can occur in both directions.<br>Key Concept
A DLL consists of nodes with the following attributes:

<br>Data field: Stores the value of the node.
<br>Next pointer: Points to the next node in the list.
<br>Previous pointer: Points to the previous node in the list.

The main operations on a DLL include insertion, deletion, traversal, and searching.
<br><br>Example 1: Node Definition in Python
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        self.prev = None

This class defines a DLL node, where data holds the value, next points to the next node, and prev points to the previous node.
<br>Example 2: Doubly Linked List Class with Insertion
class DoublyLinkedList:
    def __init__(self):
        self.head = None

    def insert_at_beginning(self, data):
        new_node = Node(data)
        new_node.next = self.head
        if self.head:
            self.head.prev = new_node
        self.head = new_node

    def print_list(self):
        current = self.head
        while current:
            print(current.data, end=" &lt;-&gt; ")
            current = current.next
        print("None")


<br>insert_at_beginning(data): Inserts a new node at the start of the list.
<br>print_list(): Traverses and prints the list.

<br><br>Exercise 1
Implement a method insert_at_end(data) to append a node to the end of the list.
<br>Exercise 2
Write a function search(value) that returns True if a value exists in the DLL, and False otherwise.
<br>Exercise 3
Implement a method delete(value) to remove the first occurrence of a given value from the list.
<br><br>Click to Reveal Solutions

Solution 1:
def insert_at_end(self, data):
    new_node = Node(data)
    if not self.head:
        self.head = new_node
        return
    current = self.head
    while current.next:
        current = current.next
    current.next = new_node
    new_node.prev = current

Solution 2:
def search(self, value):
    current = self.head
    while current:
        if current.data == value:
            return True
        current = current.next
    return False

Solution 3:
def delete(self, value):
    current = self.head
    if current and current.data == value:
        self.head = current.next
        if self.head:
            self.head.prev = None
        return
    while current and current.data != value:
        current = current.next
    if current:
        if current.next:
            current.next.prev = current.prev
        if current.prev:
            current.prev.next = current.next


]]></description><link>3004/doubly-linked-list-(dll)-implementation.html</link><guid isPermaLink="false">3004/Doubly Linked List (DLL) Implementation.md</guid><pubDate>Mon, 03 Mar 2025 03:55:51 GMT</pubDate></item><item><title><![CDATA[Dynamic Arrays]]></title><description><![CDATA[ 
 <br><br>A dynamic array is a data structure that resizes itself automatically when more elements are added than it can currently hold. Unlike static arrays, dynamic arrays allow efficient resizing and provide greater flexibility in memory management.<br>Key Concept: Dynamic Arrays

<br>A dynamic array grows as needed by allocating a new, larger array and copying existing elements into it.
<br>Common implementations use geometric resizing, often doubling the size when capacity is exceeded.
<br>Accessing elements remains O(1), while insertion at the end is amortized O(1) but can be O(n) when resizing occurs.

<br><br>Example: Doubling Strategy in Dynamic Arrays
Consider an array that starts with a capacity of 2 and follows the doubling strategy:

<br>Insert element A ‚Üí [A] (Capacity: 2, Size: 1)
<br>Insert element B ‚Üí [A, B] (Capacity: 2, Size: 2)
<br>Insert element C ‚Üí Resize to 4, copy old elements ‚Üí [A, B, C, _] (Capacity: 4, Size: 3)
<br>Insert element D ‚Üí [A, B, C, D] (Capacity: 4, Size: 4)
<br>Insert element E ‚Üí Resize to 8, copy old elements ‚Üí [A, B, C, D, E, _, _, _] (Capacity: 8, Size: 5)

<br><br>Exercise 1: Predict Array Resizing
Given an initial capacity of 3, predict the capacity changes when inserting 5 elements if the array doubles in size when full.
<br>Exercise 2: Code Implementation
Implement a simple dynamic array in Python that resizes itself using the doubling strategy. Use a list internally and provide methods for append() and get().
class DynamicArray:
    def __init__(self):
        self.array = [None] * 2  # Initial capacity of 2
        self.size = 0
        self.capacity = 2

    def append(self, value):
        if self.size == self.capacity:
            self._resize()
        self.array[self.size] = value
        self.size += 1

    def _resize(self):
        new_capacity = self.capacity * 2
        new_array = [None] * new_capacity
        for i in range(self.size):
            new_array[i] = self.array[i]
        self.array = new_array
        self.capacity = new_capacity

    def get(self, index):
        if 0 &lt;= index &lt; self.size:
            return self.array[index]
        raise IndexError("Index out of bounds")

# Example Usage
da = DynamicArray()
da.append(1)
da.append(2)
da.append(3)  # Triggers resizing
print(da.get(2))  # Output: 3

<br><br>Solution to Exercise 1 (Click to expand)

<br>Initial Capacity: 3
<br>Insert 1st element ‚Üí [A] (Capacity: 3, Size: 1)
<br>Insert 2nd element ‚Üí [A, B] (Capacity: 3, Size: 2)
<br>Insert 3rd element ‚Üí [A, B, C] (Capacity: 3, Size: 3)
<br>Insert 4th element ‚Üí Resize to 6, copy old elements ‚Üí [A, B, C, D, _, _] (Capacity: 6, Size: 4)
<br>Insert 5th element ‚Üí [A, B, C, D, E, _] (Capacity: 6, Size: 5)

<br>This worksheet provides a clear explanation of dynamic arrays, examples, exercises, and solutions in a structured format for Obsidian.]]></description><link>3004/dynamic-arrays.html</link><guid isPermaLink="false">3004/Dynamic Arrays.md</guid><pubDate>Mon, 03 Mar 2025 03:57:51 GMT</pubDate></item><item><title><![CDATA[Understanding the Hardness of Discrete Logarithms vs Exponential Modularity]]></title><description><![CDATA[ 
 <br><br>Discrete math concepts often require us to understand why some operations are computationally easy while inverses are hard. Here, we'll explore why computing exponentials modulo a number is straightforward, yet finding discrete logarithms is challenging.<br><br>Given an integer base , an exponent , and a modulus , computing the exponential modulus:<br><br>is a relatively straightforward calculation, thanks to efficient algorithms like exponentiation by squaring.<br><br><br>Compute .<br>def mod_exp(base, exponent, modulus):
    result = 1
    base = base % modulus
    while exponent &gt; 0:
        if (exponent % 2) == 1:  # if exponent is odd
            result = (result * base) % modulus
        exponent = exponent &gt;&gt; 1  # divide exponent by 2
        base = (base * base) % modulus
    return result

print(mod_exp(2, 5, 13))  # Output is 6
<br><br><br><br>Given integers , , and , the discrete logarithm problem is finding the integer  such that:<br><br>This is considered a hard problem, especially for large values of , where brute force becomes infeasible.<br><br>Suppose we want to find  such that:<br><br>There‚Äôs no straightforward formula, and solving this can require substantial computational power or clever insights.<br>Solving the Discrete Logarithm
Techniques used to approach DLP include brute force, Baby-step giant-step, and Pollard's rho algorithm. These methods can be computationally daunting for large-scale problems.
]]></description><link>3004/exponential-modularity.html</link><guid isPermaLink="false">3004/Exponential Modularity.md</guid><pubDate>Tue, 04 Feb 2025 23:40:27 GMT</pubDate></item><item><title><![CDATA[Finding the Minimum in an Unsorted List and Binary Search in a Sorted List]]></title><description><![CDATA[ 
 <br><br>To find the minimum element in an unsorted list, we iterate through all elements, keeping track of the smallest value encountered.<br>Example: Finding the Minimum
Consider the list [7, 2, 9, 1, 6, 3]. The algorithm iterates through each element:

<br>Start with min_value = 7
<br>Compare with 2 ‚Üí update min_value = 2
<br>Compare with 9 ‚Üí no change
<br>Compare with 1 ‚Üí update min_value = 1
<br>Compare with 6 ‚Üí no change
<br>Compare with 3 ‚Üí no change
<br>Final min_value = 1

<br><br># Function to find the minimum value in an unsorted list
def find_min(arr):
    min_value = arr[0]  # Assume first element is minimum
    for num in arr:
        if num &lt; min_value:
            min_value = num
    return min_value

# Example usage
arr = [7, 2, 9, 1, 6, 3]
print(find_min(arr))  # Output: 1
<br><br><br>Binary search is an efficient method for finding a target value in a sorted list by halving the search space at each step.<br><br><br>
<br>Assume list is length 
<br>Assume list is length 
<br>Example: Binary Search
Consider the sorted list [1, 3, 5, 7, 9, 11, 13], and we search for 9:

<br>Middle element is 7, 9 &gt; 7 ‚Üí search right half [9, 11, 13]
<br>Middle element is 11, 9 &lt; 11 ‚Üí search left half [9]
<br>Found 9

<br><br># Function for binary search in a sorted list
def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    while left &lt;= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            return mid  # Target found
        elif arr[mid] &lt; target:
            left = mid + 1
        else:
            right = mid - 1
    return -1  # Target not found

# Example usage
arr = [1, 3, 5, 7, 9, 11, 13]
target = 9
print(binary_search(arr, target))  # Output: 4 (index of 9)
<br><br><br>
<br>What is the worst-case time complexity of the find_min function?.
<br>
<br>Why does binary search only work on sorted lists? What happens if you attempt it on an unsorted list?
<br>
<br>Derive the time complexity of binary search. How does it compare to a linear search in an unsorted list?
<br><br><br>Click to Expand Solutions

<br>Exercise 1: The worst-case time complexity of find_min is O(n) since it iterates through all elements.
<br>Exercise 3: Binary search relies on ordering; an unsorted list does not guarantee correct halving.
<br>Exercise 4: Binary search has a complexity of O(log n), significantly better than O(n) for linear search.

]]></description><link>3004/finding-the-minimum-in-an-unsorted-list-and-binary-search-in-a-sorted-list.html</link><guid isPermaLink="false">3004/Finding the Minimum in an Unsorted List and Binary Search in a Sorted List.md</guid><pubDate>Fri, 28 Feb 2025 00:31:26 GMT</pubDate></item><item><title><![CDATA[Height of a Binary Tree and Search Complexity in a BST]]></title><description><![CDATA[ 
 <br><br>A binary tree is a hierarchical data structure in which each node has at most two children. The height of a binary tree is a crucial measure that influences many of its properties, including the efficiency of operations such as searching, inserting, and deleting nodes in a Binary Search Tree (BST). In this worksheet, we define the height of a binary tree and analyze the time complexity of searching in a BST, demonstrating that it is , where  is the height of the tree.<br><br>Definition: Height of a Binary Tree
The height of a binary tree is defined as the number of edges on the longest path from the root to a leaf node. Alternatively, it can also be defined in terms of the number of nodes along this path (including the root), in which case the height is one less than the number of nodes.
Formally:

<br>An empty tree has a height of .
<br>A single-node tree has a height of .
<br>The height of a tree is computed recursively as:

where  and  are the left and right subtrees.

<br><br>Example: Height Calculation
Consider the following binary tree:
       5
      / \
     3   8
    / \   \
   2   4   10


<br>The longest path from root (5) to a leaf (10) contains 2 edges.
<br>Therefore, the height of this tree is .

<br><br>In a BST, searching follows the property that for any given node :<br>
<br>Values in the left subtree are smaller than .
<br>Values in the right subtree are greater than .
<br>The search operation proceeds recursively by comparing the target value with the current node:<br>
<br>If the value matches, return the node.
<br>If the value is smaller, search the left subtree.
<br>If the value is greater, search the right subtree.
<br><br>At each step, the search operation eliminates half of the remaining tree (in the case of a balanced BST). The worst-case number of comparisons corresponds to the height of the tree.<br>Complexity of Searching in a BST

<br>In the worst case, searching requires visiting each level of the tree from the root to a leaf.
<br>The number of levels traversed is at most the height .
<br>Therefore, the search time complexity is O(h).

<br><br>Example: Best and Worst-Case Search Times

<br>Best Case: The target is found at the root ().
<br>Worst Case: The tree degenerates into a linked list (height , making search ).
<br>Balanced Case: In an optimally balanced BST, height is , so search takes  time.

<br><br>Exercise 1: Calculate Tree Height
Given the following tree:
      7
     / \
    3   10
   / \    \
  1   5    15
       \
        6


<br>Compute the height of this tree.

<br>Exercise 2: BST Search Complexity

<br>Show the sequence of comparisons when searching for the value 6 in the tree above.
<br>How many comparisons are required?
<br>What is the worst-case search time for this tree?

<br><br>Solutions (Click to Expand)

<br>
Solution to Exercise 1:

<br>The longest path from the root (7) to a leaf (6) has three edges, so height .


<br>
Solution to Exercise 2:

<br>Searching for 6 follows the path: .
<br>Total comparisons: 4.
<br>Worst-case search time is  for this tree.



]]></description><link>3004/height-of-a-binary-tree-and-search-complexity-in-a-bst.html</link><guid isPermaLink="false">3004/Height of a Binary Tree and Search Complexity in a BST.md</guid><pubDate>Thu, 27 Feb 2025 23:52:49 GMT</pubDate></item><item><title><![CDATA[1.]]></title><description><![CDATA[ 
 <br>name:_________<br><br>Given the following sets:  and <br>
<br>
What is ?

<br>
What is ?

<br><br>Given the following set: , <br>
<br>
What is the cardinality (size) of the powerset, ?

<br>
What is the powerset ?

<br><br>For a set , we define .<br>
Equivalently, <br>
For example,  and .<br>Let .<br>Define a bijection  from  to . (this can be hard, to talk to me if you want a hint!)<br>Solution<br>For , <br><br>Suppose that .<br>
Let ,  and .<br>
The following expressions are all logically equivalent.<br>
Translate the following expressions into natural language.<br>
Examples<br>
<br>
<br>
Solution: If , then  or  or .

<br>
<br>
Solution: If ,  and , then .}

<br>


<br>


<br>


<br>


<br>


<br>


<br>


<br>


<br><br>Disprove by counterexample: if , , and  are sets, then . Do this by finding some examples of   and  that show this isn't true.<br>Example Solution Template<br>
Consider the following sets:<br>
<br>
<br>
<br>
We see that since , we have that . On the other hand,  and . This means,. We can see  but  and so <br><br>A key question in the theory of mind is: ‚ÄúDo properties like softness exist independently of our experience of them?‚Äù<br>For example, when we say ‚Äúa blanket is soft,‚Äù are we saying that softness is an inherent characteristic of the blanket? Or is ‚Äúsoftness‚Äù just the sensation we experience when we interact with the blanket?<br>This isn‚Äôt just poetic‚Äîit reflects how we rely on objects (like blankets) to access or understand abstract properties (like softness). Our perception of properties is often tied to the physical things that evoke them, raising questions about whether properties exist independently of our minds or are defined by our sensory experience. <br>For example:<br>
We can encode the following set and predicates in two ways.<br>
<br>
Let, <br>
<br>
<br>
<br>
<br>
<br>
<br>Is the idea of softness more fundamental, or is the idea of a blanket? Stretching our imagination can allow us to structure relationships and data in different ways.<br>Please choose your own meaningful universal set and predicates, then encode them in two ways (please use a universal set of size at least 3 and at least three predicates). Afterwards, write a short (150 word) reflection thinking about the difference between these two presentations.}<br><br>Let <br>
For the following parts, suppose that .<br>
Determine the Truth of the following statements:<br>
<br>
If  and  then  is onto.

<br>
If  and  then  is not injective.

<br>
If  and  then  is not onto.

<br>
If  and  then  is injective.

<br>
If  and  and  is injective, then  is surjective.

<br>
If  and  and  is not surjective, then  is not injective.

]]></description><link>3004/hw-3-3004.html</link><guid isPermaLink="false">3004/HW 3 3004.md</guid><pubDate>Thu, 30 Jan 2025 19:54:09 GMT</pubDate></item><item><title><![CDATA[Instruction Counting in Python (bytecode)]]></title><description><![CDATA[ 
 <br><br>Instruction counting is a method used to analyze the number of operations a program executes. This technique helps in understanding algorithm efficiency, debugging performance issues, and optimizing code. Python provides tools like the dis module to inspect bytecode and count operations.<br>Key Concept: Bytecode &amp; Instructions
Python code is translated into bytecode, a lower-level representation executed by the Python Virtual Machine (PVM). The dis module allows us to inspect bytecode and count individual instructions.
<br><br>Consider a simple function that adds two numbers:<br>import dis

def add_numbers(a, b):
    return a + b

dis.dis(add_numbers)
<br>Output of dis.dis(add_numbers)
  2           0 LOAD_FAST                0 (a)
              2 LOAD_FAST                1 (b)
              4 BINARY_ADD
              6 RETURN_VALUE

This breakdown shows four bytecode instructions: two for loading variables, one for addition, and one for returning the value.
<br><br>Exercise 1: Counting Instructions
Write a function that computes the factorial of a number recursively. Use dis to count the number of instructions executed.
def factorial(n):
    if n == 0:
        return 1
    return n * factorial(n - 1)

dis.dis(factorial)


<br>How many instructions are executed for factorial(5)?
<br>What patterns do you notice in the instruction count as n increases?

<br>Exercise 2: Optimizing Code
Modify the following function to reduce the number of instructions executed:
def inefficient_sum(n):
    result = 0
    for i in range(1, n+1):
        result += i
    return result


<br>Compare the bytecode of your optimized version with the original.

<br><br>Click to reveal solutions

Solution 1: Factorial Instruction Count<br>
Running dis.dis(factorial) will show recursive calls lead to repeated instruction execution. Tail-recursive approaches or iteration may reduce operations.
Solution 2: Optimizing Summation<br>
A more efficient approach:
def efficient_sum(n):
    return n * (n + 1) // 2

This reduces instruction count significantly, as it removes the loop and uses a direct mathematical formula.

<br>By analyzing and optimizing bytecode, we can improve Python code efficiency and execution time.]]></description><link>3004/instruction-counting-in-python-(bytecode).html</link><guid isPermaLink="false">3004/Instruction Counting in Python (bytecode).md</guid><pubDate>Mon, 03 Mar 2025 03:46:33 GMT</pubDate></item><item><title><![CDATA[Q1.]]></title><description><![CDATA[ 
 <br><br>Bob is given the job of partitioning 2n players into two teams of n players each. Each player has a numerical rating that measures how good he or she is at the game. The Grinch seeks to divide the players as unfairly as possible, so as to create the biggest possible talent imbalance between the teams. Show how the Bob can do the job in  time.<br>def cheap_teams(available_players:list):
	available_players #size of this is 2n
	available_players=set(available_players) # big O(n) to do any of this
	goliath_team = ()
	david_team = ()
	
	# if you use sorting of a list, which takes O(nlog(n)) you can do the entire thing in O(nlog(n))
	while available_players &gt; 0:
		while goliath_team.sum() is &lt;= to david_team.sum():
			for p in available_players
				if p(n) &lt; p(n+1)
					david_team.append(p(n))
				elif 
					goliath_team.append(p(n))	
<br><br>You are given a pile of thousands of telephone bills and thousands of checks sent in to pay the bills. Find out who did not pay. Outline a reasonable method of solving this problem. Give the order of the worst-case complexity of your method.  <br># assumptions: 
# checks and bills how account numbers tying them together

# room for improvement, use dictionary, hash the account #s, ultimately O(n)
# this is an interable way of doing it, but cause's more "use"
def pay_up(telephone_bill:list, received_checks:list): # look into memoization
	telephone_bills:dict[int,int] # EX telephone_bills={account:amount_due} assume length n
	received_checks:list[tuples[int,int]] # EX received_checks={account:amount_paid} assume length m
	#combine all checks
	combined_checks={} #keys are acount numbers and values are the total amount paid
	for acount_num,amount_paid in received_checks: #O(m)
		if key in combined_checks:
			combined_checks[acount_num]+=value
		else:
			combined_checks[amount_paid]
	#Starting here, you can get a list of all of the accounts in bills that do not have an associated check payment matching this num in O(n) time
	
	
	
	for account_num in telephone_bills
			for account_num in recieved_checks
				if account in telephone_bills == account in received_checks
					return print"all accounts accounted for"
				elif
					return telephone_bill(account_num, debit)
	while sum(telephone_bills) != sum(recieved_checks)
		for accounts in telephone_bills
			for accounts in recieved_checks
				if debit in telephone_bills == credit in received_checks
					return print("all accounts paid in full")
				elif
					owed_ammount = (account.debit - account.credit)
					return print(f"error, we are owed MONEY!: Account_Num and: {telephone_bill[0]}, Ammount: {owed_ammount}")	
<br><br>A common problem for compilers and text editors is determining whether the parentheses in a string are balanced and properly nested. For example, the string ((())())() contains properly nested pairs of parentheses, while the strings )()( and ()) do not. Give an algorithm that returns true if a string contains properly nested and balanced parentheses, and false if otherwise.<br>#looks great!
def orphan_parentheses(string_to_check:str):
	paren_stack = []
	for char in string_to_check:
		if char == "("
			paren_stack.append(char)
		elif char == ")"
			if not stack: 
				return False
			stack.pop()
	return len(stack) == 0 
<br><br>Two strings are permutations of one another if they consist of the exact same letters, but potentially in a different order. Devise an algorithm to decide if one string is a permutation of another. Analyze the worst case of your algorithm.<br>def string_permutations(string_1:str,string_2:str):
	#see if you can do this in O(n) time!
	if len(string_1) == len(string_2):
		sort(string_1) #O(nlog(n))
		sort(string_2) #O(nlog(n))
		for char in string_1
			if string_1[] == string_2[]
				return print("the two strings are permutations")
			elif string_1[] != string_2[]
				return print("the two strings are not permutations since they have different characters")
	else:
		return print("the two strings are not permutations since they are different lengths")
			
<br><br>An animal shelter, which holds only dogs and cats, operates on a strictly "first in, first out" basis. People must adopt either the "oldest" (based upon arrival time) of all animals at the shelter or they can select whether they would prefer a dog or a cat (and will receive the oldest animal of that type). They cannot select which specific animal they would like. Create the data structures to maintain this system and provide pseudocode for the operations enqueueDog, enqueueCat, dequeueAny, dequeueDog, and dequeueCat.<br>class animal_shelter:
	class animal:
		def __init__(self,name,num_put_in):
			self.name:str
			self.num_put_in
			
	def __init__(self):
		self.animal_list # you can do this so every operation is O(1) If we have all dogs/all cats putting them both in a shared DLL can take O(n) worst case

	def enqueueDog = animal_list.append({{animal_type: dog}{arrival_time: DTG.utc}})
	def enqueueCat = animal_list.append({{animal_type: cat}{arrival_time: DTG.utc}})
	def dequeueAny = animal_list.pop({{animal_type: any}{arrival_time: DTG.utc}})
	def dequeueDog = animal_list.pop({{animal_type: dog}{arrival_time: DTG.utc}})
	def dequeueCat = animal_list.pop({{animal_type: cat}{arrival_time: DTG.utc}})
	danimal_list = {{animal_type: "str" }:{arival_time: dtg}}
	animal_list.sort(dtg, descending = True)

	def get_animal_gone():
		print = ("You may have either the oldest animal in the shelter, or the oldest dog or cat. If you want a Dog or Cat pleast indicate"
				"by typing cat or dog....otherwise oldest!")
		user_input = input("oldest, cat, dog?").lower().strip()
		if user_input == "cat"
			return self.dequeueCat
		elif user_input == "dog"
			return self.dequeueDog
		elif user_input == "oldest"
			return self.dequeueAny
		else:
			return("Why don't you like animals? You monster!")
A=animal_shelter()
A.enqueue_dog('ruffles')
A.enque_cat('frederik')
<br><br>How would you design a stack which, in addition to push and pop, has a function min which returns the minimum element? Provide pseudocode for push, pop, and min  which should all operate in O(1) time and explain how your modifications relative to a normal stack work. Hint: You may add additional fields to the node you push on the stack.<br><br>class min_stack_action:
	self.stack = []
	self.min_stack = []

	def push(self, value):
		self.stack.append(value)
		if not self.min_stack or value &lt;= self.min_stack[-1]:
			self.min_stack.append(value)

	def pop(self):
		self.stack.pop(value)
		if self.min_stack and value == self.min_stack [-1]:
			self.min_stack.pop()

	def min(self):
		if not self.min_stack:
			raise Exception("stack is empty")
		return self.min_stack[-1]		
]]></description><link>3004/jerome.html</link><guid isPermaLink="false">3004/Jerome.md</guid><pubDate>Wed, 05 Mar 2025 21:11:36 GMT</pubDate></item><item><title><![CDATA[Log Relationship Between Tree Size and Height]]></title><description><![CDATA[ 
 <br><br>A balanced binary tree is a binary tree structure in which the height difference between left and right subtrees is minimized. This balance ensures efficient search, insertion, and deletion operations, maintaining an optimal logarithmic time complexity. Understanding the relationship between the height of a balanced binary tree and its size is crucial for analyzing its performance.<br>Key Concept
In a balanced binary tree with  nodes, the height  is approximately . This relationship arises because each level of the tree contains approximately twice as many nodes as the previous level, leading to exponential growth in size relative to height.
<br><br>Example 1: Small Balanced Binary Trees
Consider a perfectly balanced binary tree:

<br>Height = 0 ‚Üí 1 node (root)
<br>Height = 1 ‚Üí 3 nodes
<br>Height = 2 ‚Üí 7 nodes
<br>Height = 3 ‚Üí 15 nodes

The number of nodes at height  follows the formula:

Solving for height in terms of size:

<br>Example 2: Height Calculation for Large Trees
Suppose a tree has 1,000,000 nodes. The height can be estimated as:

This demonstrates that even for large , height remains logarithmic.
<br><br>Exercise 1: Height of a Given Tree Size
Given a balanced binary tree with 1,024 nodes, estimate its height.
<br>Exercise 2: Tree Size for a Given Height
If a balanced binary tree has height 10, how many nodes does it contain?
<br><br>Click to reveal solutions

Solution 1:<br>
Using the formula :

Solution 2:<br>
Using the formula :


<br><br>This worksheet provides a structured exploration of the logarithmic relationship between tree size and height in balanced binary trees, with examples and exercises for practice.]]></description><link>3004/log-relationship-between-tree-size-and-height.html</link><guid isPermaLink="false">3004/Log Relationship Between Tree Size and Height.md</guid><pubDate>Thu, 27 Feb 2025 23:55:14 GMT</pubDate></item><item><title><![CDATA[Rainfall problem]]></title><description><![CDATA[ 
 <br>Background:<br>
Mether Wan is a scientist who studies global rainfall. She receives data measurements from a large network of sensors deployed worldwide. Each measurement is recorded as a triple of integers (r, ‚Ñì, t) where:<br>
<br>r: A positive amount of rainfall (in millimeters) measured at the sensor.
<br>‚Ñì: The latitude at which the measurement was taken.
<br>t: The time of the measurement (represented as an integer timestamp).
<br>For any given latitude ‚Ñì and a starting time t, the peak rainfall is defined as the maximum rainfall among all measurements at latitude ‚Ñì that have been recorded at times ‚â• t. If no measurement exists for that latitude at time ‚â• t, then the peak rainfall is defined to be zero.<br><br><br>Design a database (or data structure) to store Mether‚Äôs sensor data that supports the following operations, each in worst-case O(log n) time, where n is the current number of measurements stored:<br>
<br>
build()<br>
Initialize an empty database.

<br>
record_data(r, ‚Ñì, t)<br>
Add a rainfall measurement with amount r at latitude ‚Ñì at time t.

<br>
peak_rainfall(‚Ñì, t)<br>
Return the peak rainfall at latitude ‚Ñì for measurements recorded at time t or later.

<br><br><br>
<br>
Data Organization:<br>
Since queries are performed by latitude and time, consider organizing the database as follows:

<br>Per-Latitude Data: Use a dictionary (hash table) that maps each latitude ‚Ñì to its own data structure.
<br>Time-Ordered Measurements: For each latitude, maintain the sensor measurements in a balanced binary search tree (BST) keyed by time t. Augment each node of the BST with the maximum rainfall value in its subtree for efficient range maximum queries.


<br>
Operations:

<br>
record_data(r, ‚Ñì, t)<br>
Insert the new measurement into the BST for latitude ‚Ñì.<br>
Time complexity: O(log m) where m is the number of measurements for that latitude (m ‚â§ n).

<br>
peak_rainfall(‚Ñì, t)<br>
In the BST for latitude ‚Ñì, perform a range maximum query for all nodes with key ‚â• t.<br>
Time complexity: O(log m).

<br>
build()<br>
Initialize the empty dictionary.<br>
Time complexity: O(1).



<br>
Expected Worst-Case Time:<br>
Since each operation on the per-latitude BST runs in O(log m) and m ‚â§ n, every operation meets the required worst-case O(log n) time bound.

<br><br><br><br>
<br>
Initialization:<br>
Call build() to initialize an empty database.

<br>
Record Measurements:<br>
Suppose we execute the following operations:

<br>record_data(10, 45, 100) ‚Üí Record 10 mm of rainfall at latitude 45 at time 100.
<br>record_data(15, 45, 150) ‚Üí Record 15 mm of rainfall at latitude 45 at time 150.
<br>record_data(5, 45, 200) ‚Üí Record 5 mm of rainfall at latitude 45 at time 200.
<br>record_data(20, 30, 120) ‚Üí Record 20 mm of rainfall at latitude 30 at time 120.


<br>
Query Peak Rainfall:  

<br>peak_rainfall(45, 100) should return 15.<br>
Explanation: At latitude 45, the measurements with time ‚â• 100 are: 10 (time 100), 15 (time 150), and 5 (time 200); the maximum is 15.
<br>peak_rainfall(45, 160) should return 5.<br>
Explanation: Only the measurement at time 200 (5 mm) qualifies.
<br>peak_rainfall(30, 100) should return 20.<br>
Explanation: Only one measurement exists for latitude 30.


<br><br>Data Structures and Abstract Data Types Overview<br><br><br>
<br>: Amortized time complexity (average over multiple operations)
<br>: Expected time complexity (assuming a good hash function)
<br>, : Standard Big-O notation
<br><br><br><br><br><br><br><br><br>
<br>Amortized (): Over a sequence of operations, the average time per operation is low, even if individual operations can sometimes take longer.

<br>Insertion in Hash Set/Hash Map: Resizing causes occasional  operations, but most insertions are  on average.


<br>Expected (): Assumes a good hash function, meaning average-case performance.

<br>Search and Deletion in Hash Set/Hash Map: Expected  but could degrade to  in worst-case scenarios (bad hash functions or too many collisions).


]]></description><link>3004/rainfall-problem.html</link><guid isPermaLink="false">3004/Rainfall problem.md</guid><pubDate>Sat, 08 Mar 2025 00:27:20 GMT</pubDate></item><item><title><![CDATA[Set Abstract Data Type (ADT)]]></title><description><![CDATA[ 
 <br><br><br>A set is an abstract data type that represents a collection of unique elements, meaning no duplicates are allowed. Unlike lists or arrays, the order of elements in a set is not guaranteed. Sets support operations like insertion, deletion, union, intersection, and membership testing. <br>One of the most efficient implementations of a set is using a hashmap (hash table), where elements are stored as keys in a hash-based structure.<br>Key Concept: Hashmap-Based Set Implementation
In a hashmap-based set, elements are stored as keys in a hash table, with dummy values (e.g., True or None). This allows for fast average-time operations, making hashmaps one of the most common set implementations.
<br><br><br><br>Why is min/max O(n)?
Hashmaps do not maintain order, so to find the minimum or maximum value, we must iterate through all elements.
<br><br><br>Exercise 1: Performance Comparison
Compare the performance of the HashSet implementation with a sorted list-based set (where elements are kept sorted). Measure the time for add, contains, and min/max operations.
]]></description><link>3004/set-adt.html</link><guid isPermaLink="false">3004/Set ADT.md</guid><pubDate>Fri, 28 Feb 2025 01:08:20 GMT</pubDate></item><item><title><![CDATA[Singly Linked List (SLL) Implementation]]></title><description><![CDATA[ 
 <br><br>A Singly Linked List (SLL) is a fundamental data structure consisting of nodes, where each node stores data and a reference (or pointer) to the next node in the sequence. Unlike arrays, linked lists do not require contiguous memory allocation, making them efficient for dynamic memory operations.<br>Key Concept
A singly linked list consists of a series of nodes, each containing:

<br>A data field
<br>A next pointer referring to the next node (or None if it's the last node)

The key operations on an SLL include insertion, deletion, and traversal.
<br><br>Example 1: Basic Node Definition in Python
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

This class defines a single node, where data holds the value, and next is initialized as None.
<br>Example 2: Singly Linked List Class
class SinglyLinkedList:
    def __init__(self):
        self.head = None

    def insert_at_beginning(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node

    def print_list(self):
        current = self.head
        while current:
            print(current.data, end=" -&gt; ")
            current = current.next
        print("None")


<br>insert_at_beginning(data): Adds a new node at the start of the list.
<br>print_list(): Traverses and prints the list.

<br><br>Exercise 1
Implement a method insert_at_end(data) to append a node to the end of the list.
<br>Exercise 2
Write a function search(value) that returns True if a value exists in the linked list, and False otherwise.
<br>Exercise 3
Implement a method delete(value) to remove the first occurrence of a given value from the list.
<br><br>Click to Reveal Solutions

Solution 1:
def insert_at_end(self, data):
    new_node = Node(data)
    if not self.head:
        self.head = new_node
        return
    current = self.head
    while current.next:
        current = current.next
    current.next = new_node

Solution 2:
def search(self, value):
    current = self.head
    while current:
        if current.data == value:
            return True
        current = current.next
    return False

Solution 3:
def delete(self, value):
    current = self.head
    if current and current.data == value:
        self.head = current.next
        return
    prev = None
    while current and current.data != value:
        prev = current
        current = current.next
    if current:
        prev.next = current.next


]]></description><link>3004/singly-linked-list-(sll)-implementation.html</link><guid isPermaLink="false">3004/Singly Linked List (SLL) Implementation.md</guid><pubDate>Mon, 03 Mar 2025 03:52:44 GMT</pubDate></item><item><title><![CDATA[Subtree Property in AVL Trees]]></title><description><![CDATA[ 
 <br><br>An AVL tree is a self-balancing binary search tree where the height of the left and right subtrees of any node differ by at most one. A useful property that  can be maintained in an AVL tree is the subtree size, which allows for efficient rank-based queries and other operations.<br>Key Concept: Subtree Size Property
Each node in an AVL tree can store the size of its subtree, which includes:

<br>The node itself.
<br>All nodes in its left subtree.
<br>All nodes in its right subtree.

This property is updated as:
	ext{size}(v) = 1 + 	ext{size}(	ext{left}(v)) + 	ext{size}(	ext{right}(v))

where size(v) represents the number of nodes in the subtree rooted at node v.
<br><br>Example: Subtree Size Calculation
Consider the following AVL tree:
       10 (5)
      /     \
  5 (3)   15 (1)
 /   \
2 (1)  7 (1)

Here, each node is labeled as value (subtree size). The subtree sizes are calculated as:

<br>size(2) = 1, size(7) = 1, size(5) = 1 + 1 + 1 = 3
<br>size(15) = 1, size(10) = 1 + 3 + 1 = 5

<br><br>
<br>When inserting or deleting a node, updates only affect  nodes along the path from the root.
<br>Each rotation (single or double) modifies only a constant number of nodes.
<br>Since subtree sizes can be updated in  time per node, AVL operations remain .
<br><br>Exercise 1: Subtree Size Computation
Given the following AVL tree:
      20
     /  \
   10    30
  /  \   /
 5   15 25

Compute the subtree sizes for all nodes.
<br>Exercise 2: Subtree Size After Rotation
Given the AVL tree:
     30
    /
  20
 /
10

Perform a right rotation at 30 and compute the updated subtree sizes.
<br><br>Solutions (Click to expand)

<br>Exercise 1:

<br>size(5) = 1, size(15) = 1, size(10) = 1 + 1 + 1 = 3
<br>size(25) = 1, size(30) = 1 + 1 = 2, size(20) = 1 + 3 + 2 = 6


<br>Exercise 2:

<br>After rotation:

     20
    /  \
  10    30


<br>size(10) = 1, size(30) = 1, size(20) = 1 + 1 + 1 = 3



]]></description><link>3004/subtree-property-in-avl-trees.html</link><guid isPermaLink="false">3004/Subtree Property in AVL Trees.md</guid><pubDate>Fri, 07 Mar 2025 00:38:58 GMT</pubDate></item><item><title><![CDATA[Time Complexity Analysis of a Balanced Binary Tree (Set Implementation)]]></title><description><![CDATA[ 
 <br><br>Balanced binary trees, such as AVL trees and Red-Black trees, are widely used for efficient data storage and retrieval. These structures ensure that operations like insertion, deletion, and search remain logarithmic in time complexity. This worksheet explores the time complexity analysis of balanced binary trees when used as a set implementation.<br>Key Concept
A balanced binary tree maintains its height as O(log n) by enforcing balance conditions during insertions and deletions. This ensures efficient lookup, insertion, and deletion operations.
<br><br>Example: AVL Tree Structure
Consider an AVL tree where balance is maintained by performing rotations after insertions and deletions.
      30
     /  \
   20    40
  /  \     \
10   25     50

If we insert 35, the tree may require rebalancing using rotations to maintain the height property.
<br>Example: Red-Black Tree Structure
A Red-Black tree maintains balance through a set of properties ensuring logarithmic height. After inserting a node, rotations and color changes ensure balance.
      30 (B)
     /    \
   20(R)  40(B)
  /   \      \
10(B) 25(B)  50(R)

<br><br><br><br>
<br>Search: Since the tree remains balanced, traversing from the root to a leaf takes O(log n) time.
<br>Insertion: Insertions may cause rotations but are limited to a logarithmic number of operations.
<br>Deletion: Deleting a node may also involve rebalancing, but this process is bounded by O(log n) rotations.
<br><br>Exercise 1
Given a balanced binary tree with n = 1000 nodes, how many comparisons are required in the worst-case scenario to find a value?
<br>Exercise 2
Insert the numbers 5, 15, 25, 35 into the following AVL tree and determine if rotations are needed.
      20
     /  \
   10    30

<br>Exercise 3
What is the worst-case height of an AVL tree with n nodes?
<br><br>Click to Reveal Solutions

<br>Exercise 1: The worst-case search complexity is O(log 1000) ‚âà 10 comparisons.
<br>Exercise 2: The insertions may trigger rebalancing, and rotations would occur.
<br>Exercise 3: The height of an AVL tree follows O(log n) growth.

]]></description><link>3004/time-complexity-analysis-of-a-balanced-binary-tree-(set-implementation).html</link><guid isPermaLink="false">3004/Time Complexity Analysis of a Balanced Binary Tree (Set Implementation).md</guid><pubDate>Thu, 27 Feb 2025 23:57:35 GMT</pubDate></item><item><title><![CDATA[Understanding Logarithms and Exponents in Base 2]]></title><description><![CDATA[ 
 <br><br>The logarithm base 2, denoted as , is the inverse operation of exponentiation with base 2. This means that if:<br><br>then it follows that:<br><br>This worksheet will explore the relationship between  and  using key concepts, examples, and exercises.<br><br>Logarithm and Exponent Relationship
The function  answers the question: "To what power must 2 be raised to obtain ?"  
In equation form:

Key Properties:

<br> because .
<br> because .
<br> because .
<br> because .
<br> because .

<br><br>Example 1: Basic Logarithm and Exponent Relationship
Problem: Find .<br>
Solution:<br>
We need to determine the power  such that .<br>
Since , we conclude that:

<br>Example 2: Evaluating an Exponential Function
Problem: Evaluate .<br>
Solution:<br>
Using the logarithm property that , we get:

<br><br>Exercise 1: Evaluating Logarithms  
Compute the following logarithms:

<br>
<br>
<br>

<br>Exercise 2: Evaluating Exponential Expressions  
Compute:

<br>
<br>
<br>

<br><br>Solutions (Click to expand)

<br>Exercise 1 Answers:

<br> because .
<br> because .
<br> because .


<br>Exercise 2 Answers:

<br>.
<br>.
<br>.



]]></description><link>3004/understanding-logarithms-and-exponents-in-base-2.html</link><guid isPermaLink="false">3004/Understanding Logarithms and Exponents in Base 2.md</guid><pubDate>Thu, 27 Feb 2025 23:47:42 GMT</pubDate></item><item><title><![CDATA[Understanding Lower Bounds, Omega Notation]]></title><description><![CDATA[ 
 <br><br>Key Concept: Œ© Notation
In algorithm analysis, Œ© (Omega) notation represents the lower bound of an algorithm's running time. It provides a guarantee that an algorithm takes at least a certain amount of time, asymptotically, for large input sizes.
Definition:<br>
A function  is in  if there exist positive constants  and  such that for all ,

This means that for large enough ,  serves as a lower bound for , up to a constant factor.<br>
<img alt="Pasted image 20250305120404.png" src="lib/media/pasted-image-20250305120404.png">
<br><br><br>Example 1: Linear Lower Bound
Suppose an algorithm has a worst-case running time of .<br>
To show that  is Œ©(n), we must find constants  and  such that:

Choosing  and , we get:

Hence, .
<br>Example 2: Quadratic Lower Bound
Consider an algorithm with running time .<br>
To show , we need to find  and  such that:

Choosing  and , we get:

which holds for all , so .
<br><br><br>Exercise 1: Identify the Lower Bound
Given the function , determine a valid Œ© notation bound.
<br>Exercise 2: Prove Œ© Bound
Prove that  is Œ©(n¬≥).
<br><br><br>Click to reveal solutions
[!example] Solution to Exercise 1:<br>
We must find constants  and  such that:

Choosing  and , we confirm .
[!example] Solution to Exercise 2:<br>
To prove  is Œ©(n¬≥), we need:

Choosing  and , the inequality holds, confirming .
]]></description><link>3004/understanding-lower-bounds,-omega-notation.html</link><guid isPermaLink="false">3004/Understanding Lower Bounds, Omega Notation.md</guid><pubDate>Wed, 05 Mar 2025 19:04:22 GMT</pubDate><enclosure url="lib/media/pasted-image-20250305120404.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;lib/media/pasted-image-20250305120404.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Understanding Upper Bound Notation Big O]]></title><description><![CDATA[ 
 <br><br>Key Concept: Big-O Upper Bound
Big-O notation, denoted as , provides an upper bound on the growth rate of a function. It describes the worst-case scenario for an algorithm‚Äôs time complexity.
Definition: A function  is in  if there exist positive constants  and  such that:

<img alt="width=%50" src="lib/media/pasted-image-20250305115742.png">
<br><br>Example 1: Linear vs. Quadratic Growth
Suppose we have two functions:

<br>
<br>

We claim that . Let's prove it:

<br>Choose  and .
<br>For , we check:

which holds for all .
<br>Thus,  is upper-bounded by .

<br>Example 2: Proving 
We choose  and need to find  and  such that:

Taking  and , we verify:

for , proving the claim.
<br><br>Exercise 1: Identify the Upper Bound
Determine an appropriate Big-O upper bound for the following functions:

<br>
<br>
<br>

Provide constants  and  for your choices.
<br>Exercise 2: True or False?

<br>Every polynomial function is  for some .
<br> is always a tight bound.
<br> is .

<br><br>Click to reveal solutions
Exercise 1 Solutions:

<br> is  (choose ).
<br> is  (exponential dominates polynomial).
<br> is .

Exercise 2 Solutions:

<br>True: Any polynomial  is  for some .
<br>False:  is an upper bound but not always tight.
<br>True:  is  since  is bounded.

]]></description><link>3004/understanding-upper-bound-notation-big-o.html</link><guid isPermaLink="false">3004/Understanding Upper Bound Notation Big O.md</guid><pubDate>Wed, 05 Mar 2025 19:02:36 GMT</pubDate><enclosure url="lib/media/pasted-image-20250305115742.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;lib/media/pasted-image-20250305115742.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Week 9 ideas]]></title><description><![CDATA[ 
 <br><br><a data-href="Understanding Logarithms and Exponents in Base 2" href="3004/understanding-logarithms-and-exponents-in-base-2.html" class="internal-link" target="_self" rel="noopener nofollow">Understanding Logarithms and Exponents in Base 2</a><br>
<a data-href="Finding the Minimum in an Unsorted List and Binary Search in a Sorted List" href="3004/finding-the-minimum-in-an-unsorted-list-and-binary-search-in-a-sorted-list.html" class="internal-link" target="_self" rel="noopener nofollow">Finding the Minimum in an Unsorted List and Binary Search in a Sorted List</a><br>
<a data-href="Set ADT" href="3004/set-adt.html" class="internal-link" target="_self" rel="noopener nofollow">Set ADT</a><br>
<a data-href="Binary Trees" href="3004/binary-trees.html" class="internal-link" target="_self" rel="noopener nofollow">Binary Trees</a><br>
<a data-href="Height of a Binary Tree and Search Complexity in a BST" href="3004/height-of-a-binary-tree-and-search-complexity-in-a-bst.html" class="internal-link" target="_self" rel="noopener nofollow">Height of a Binary Tree and Search Complexity in a BST</a><br>
<a data-href="Log Relationship Between Tree Size and Height" href="3004/log-relationship-between-tree-size-and-height.html" class="internal-link" target="_self" rel="noopener nofollow">Log Relationship Between Tree Size and Height</a><br>
<a data-href="Time Complexity Analysis of a Balanced Binary Tree (Set Implementation)" href="3004/time-complexity-analysis-of-a-balanced-binary-tree-(set-implementation).html" class="internal-link" target="_self" rel="noopener nofollow">Time Complexity Analysis of a Balanced Binary Tree (Set Implementation)</a><br><br><a data-href="Data Structures and Abstract Data Types Overview" href="3004/data-structures-and-abstract-data-types-overview.html" class="internal-link" target="_self" rel="noopener nofollow">Data Structures and Abstract Data Types Overview</a><br>
<a data-href="Subtree Property in AVL Trees" href="3004/subtree-property-in-avl-trees.html" class="internal-link" target="_self" rel="noopener nofollow">Subtree Property in AVL Trees</a><br>
<a data-href="Criminal Seafood" href="datatypes/criminal-seafood.html" class="internal-link" target="_self" rel="noopener nofollow">Criminal Seafood</a>]]></description><link>3004/week-9.html</link><guid isPermaLink="false">3004/Week 9.md</guid><pubDate>Wed, 05 Mar 2025 01:27:21 GMT</pubDate></item><item><title><![CDATA[Adding or dropping a minor or major]]></title><description><![CDATA[<a class="tag" href="?query=tag:minor" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#minor</a> <a class="tag" href="?query=tag:major" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#major</a> <a class="tag" href="?query=tag:drop" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#drop</a> <a class="tag" href="?query=tag:add" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#add</a> 
 <br><a href=".?query=tag:minor" class="tag" target="_blank" rel="noopener nofollow">#minor</a> <a href=".?query=tag:major" class="tag" target="_blank" rel="noopener nofollow">#major</a> <a href=".?query=tag:drop" class="tag" target="_blank" rel="noopener nofollow">#drop</a> <a href=".?query=tag:add" class="tag" target="_blank" rel="noopener nofollow">#add</a><br><br>
<br>complete the form and email to registrar@du.edu a signature  is not required <a data-tooltip-position="top" aria-label="https://www.du.edu/sites/default/files/2022-10/MajorChangeForm.pdf" rel="noopener nofollow" class="external-link" href="https://www.du.edu/sites/default/files/2022-10/MajorChangeForm.pdf" target="_blank">a pdf of the minor/major change form</a>
<br>They will then update your Degree Audit
<br><br>
<br>You will need an advisor (Meredith can assign you one)
<br>complete the form and email to meredith.corley@du.edu. a signature is required <a data-tooltip-position="top" aria-label="https://www.du.edu/sites/default/files/2022-10/MajorChangeForm.pdf" rel="noopener nofollow" class="external-link" href="https://www.du.edu/sites/default/files/2022-10/MajorChangeForm.pdf" target="_blank">minor/major change form</a>. 
<br>The registrar will then update your Degree Audit
<br>Getting an Advisor
Don't feel bad if you reach out to a prof and don't hear back. They are just some really busy people. Ask another prof or meredith.corley@du.edu and she can help find you someone!
]]></description><link>advising-notes/adding-or-dropping-a-minor-or-major.html</link><guid isPermaLink="false">Advising Notes/Adding or dropping a minor or major.md</guid><pubDate>Tue, 29 Oct 2024 03:09:33 GMT</pubDate></item><item><title><![CDATA[Advising (review and clean)]]></title><description><![CDATA[ 
 <br><br>What is my role? what is the typical job description?<br><br><br>
<br>Give this a couple hours a week
<br>Build a template for this.
<br>Giving Bad advise making mistakes.
<br>Letting people know their responsibilities.
<br><br>Flag the really bad things. <br><br><br>Talk to my boss and get clarity. <br>
<br>Graduating on time bigger priority. 
<br>Name my role as an advisor, and it has a descriptor. 
<br>I will tell you what to do and answer questions.
<br>Internships and REU Grad School. 
<br><br><br>More clear with students and where I am coming from you can choose what you want to do, I am telling you that if you do that plan you will not graduate in June, and I respect your choice. <br>Document it in an individualized report that goes out all the time. <br>The systems are very fragile. I can individualize it.<br><br><br>Have a checklist of the most important things to think about?<br><br><br>
<br>I am really stubborn, and I think I spend a lot of time focusing/doing things that aren't particularly important. 
<br>This is a really easy math problem. 
<br><br><br>
<br>I don't get most people and they don't bother to get me. 
<br>Which things are ADHD generated and which are not.
<br>Which ones do I want to deal with and which ones do I not. 
<br>What is preferred to focus on, and what is not. 
<br>Can I give up part of my way of doing it, because I get something out of the relationship. 
<br><br><br>
<br>What is my relationship exactly with students. 
<br>Too global, floaty, nebulous.
<br>over-attend and under-attend all of these different things
<br>]]></description><link>advising-notes/advising-(review-and-clean).html</link><guid isPermaLink="false">Advising Notes/Advising (review and clean).md</guid><pubDate>Thu, 20 Feb 2025 15:55:49 GMT</pubDate></item><item><title><![CDATA[advising faculty resources]]></title><description><![CDATA[<a class="tag" href="?query=tag:PIN" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#PIN</a> <a class="tag" href="?query=tag:Deletion" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Deletion</a> 
 <br>Every time I meet with a student I open up four links:<br><a data-tooltip-position="top" aria-label="https://bulletin.du.edu/undergraduate/majorsminorscoursedescriptions/traditionalbachelorsprogrammajorandminors/computerscience/#programofstudytext" rel="noopener nofollow" class="external-link" href="https://bulletin.du.edu/undergraduate/majorsminorscoursedescriptions/traditionalbachelorsprogrammajorandminors/computerscience/#programofstudytext" target="_blank">Bulletin</a> explore CS and other degree requirements<br>
<a data-tooltip-position="top" aria-label="https://apps11.du.edu:9904/" rel="noopener nofollow" class="external-link" href="https://apps11.du.edu:9904/" target="_blank">Degree Audit</a> check student progress, courses taken degree and core requirements<br>
<a data-tooltip-position="top" aria-label="https://du.inspire.civitaslearning.com/" rel="noopener nofollow" class="external-link" title="Inspire" href="https://du.inspire.civitaslearning.com/" target="_blank">Inspire Student Profile &amp; Advising Notes</a> course history with instructor and advising <br><a href=".?query=tag:PIN" class="tag" target="_blank" rel="noopener nofollow">#PIN</a> <a href=".?query=tag:Deletion" class="tag" target="_blank" rel="noopener nofollow">#Deletion</a><br>
<a data-tooltip-position="top" aria-label="https://apps04.du.edu:4443/StudentSelfService/ssb/termSelection" rel="noopener nofollow" class="external-link" title="Delete Student's Alternate PIN" href="https://apps04.du.edu:4443/StudentSelfService/ssb/termSelection" target="_blank">Remove Student's Academic Advising Hold</a> where I go to remove the advising hold<br><a data-tooltip-position="top" aria-label="https://myweb.du.edu/mdb/pducrs.p_duSlctCrsOff" rel="noopener nofollow" class="external-link" href="https://myweb.du.edu/mdb/pducrs.p_duSlctCrsOff" target="_blank">Magical Best Course Schedule</a><br><a data-tooltip-position="top" aria-label="https://my.du.edu/pages/advising-tools-and-resources" rel="noopener nofollow" class="external-link" href="https://my.du.edu/pages/advising-tools-and-resources" target="_blank">advising toolkit</a><br><a data-tooltip-position="top" aria-label="https://denveru.sharepoint.com/:x:/r/sites/CSDepartment-g/_layouts/15/Doc.aspx?sourcedoc=%7BF22CA7E6-F6D9-40CA-A694-AF62C91216AA%7D&amp;file=CS%20Course%20Schedule%2024-25.xlsx&amp;action=default&amp;mobileredirect=true" rel="noopener nofollow" class="external-link" href="https://denveru.sharepoint.com/:x:/r/sites/CSDepartment-g/_layouts/15/Doc.aspx?sourcedoc=%7BF22CA7E6-F6D9-40CA-A694-AF62C91216AA%7D&amp;file=CS%20Course%20Schedule%2024-25.xlsx&amp;action=default&amp;mobileredirect=true" target="_blank">24/25 course schedule</a> Excel sheet for departmental planning<br>
<a data-tooltip-position="top" aria-label="https://apps02.du.edu:4443/StudentRegistrationSsb/ssb/classSearch/classSearch" rel="noopener nofollow" class="external-link" href="https://apps02.du.edu:4443/StudentRegistrationSsb/ssb/classSearch/classSearch" target="_blank">24/25 course schedule</a> registration]]></description><link>advising-notes/advising-faculty-resources.html</link><guid isPermaLink="false">Advising Notes/advising faculty resources.md</guid><pubDate>Sun, 16 Feb 2025 23:43:22 GMT</pubDate></item><item><title><![CDATA[Alex Contact Info]]></title><description><![CDATA[<a class="tag" href="?query=tag:zoom" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#zoom</a> 
 <br><br><br>Book a time to meet with me here for advising questions.<br>
<a data-tooltip-position="top" aria-label="https://calendar.google.com/calendar/u/0/appointments/schedules/AcZssZ3xGGiTHTGvLTEprqnfStfQ1DE_eGW3qhj8uxua69gWwzUwf11g9xRcFDhC3bBiYoKQ9Ol9oefF" rel="noopener nofollow" class="external-link" href="https://calendar.google.com/calendar/u/0/appointments/schedules/AcZssZ3xGGiTHTGvLTEprqnfStfQ1DE_eGW3qhj8uxua69gWwzUwf11g9xRcFDhC3bBiYoKQ9Ol9oefF" target="_blank">google booking link</a><br>
<a data-tooltip-position="top" aria-label="https://app.reclaim.ai/m/alexander-stevens/advising-and-pin-deletion" rel="noopener nofollow" class="external-link" href="https://app.reclaim.ai/m/alexander-stevens/advising-and-pin-deletion" target="_blank">reclaim (phasing out)</a><br><br>This is the zoom link I use for everything.<br>
<a data-tooltip-position="top" aria-label="https://udenver.zoom.us/my/alex.stevens" rel="noopener nofollow" class="external-link" href="https://udenver.zoom.us/my/alex.stevens" target="_blank">my zoom</a> <a href=".?query=tag:zoom" class="tag" target="_blank" rel="noopener nofollow">#zoom</a> ]]></description><link>advising-notes/alex-contact-info.html</link><guid isPermaLink="false">Advising Notes/Alex Contact Info.md</guid><pubDate>Sun, 16 Feb 2025 18:15:16 GMT</pubDate></item><item><title><![CDATA[Before the PIN removal meeting]]></title><description><![CDATA[<a class="tag" href="?query=tag:TODO" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#TODO</a> 
 <br><a href=".?query=tag:TODO" class="tag" target="_blank" rel="noopener nofollow">#TODO</a><br>Look over your degree audit. <br>
<br>
Look over all 1-3000 level CS courses offered next quarter and determine:

<br>what you are eligible for

<br>Upcoming course schedule<br><br>Browse Schedule Your registration portal has the most up-to-date course schedule<br>
<a data-tooltip-position="top" aria-label="https://apps02.du.edu:4443/StudentRegistrationSsb/ssb/registration#" rel="noopener nofollow" class="external-link" href="https://apps02.du.edu:4443/StudentRegistrationSsb/ssb/registration#" target="_blank">Course Schedule</a><br><img alt="Pasted image 20241028211834.png" src="lib/media/pasted-image-20241028211834.png" style="width: 400px; max-width: 100%;"><br>from here, navigate to Browse Schedule and select the correct term<br>we are on the quarter system-- make sure that you don't pick semester (this is for the Law School)<br>Select Subject that you want to search for (you can also Course Number Attributes<br><br>Within the CS department there are several class numbers available to undergraduates.<br>1000 level courses: <br>
<br>typically first year courses for majors, minors and non-majors
<br>prerequisites for many 2000 level courses
<br>2000 level courses:<br>
<br>typically second year courses for majors and minors
<br>prerequisites for many 2000-3000 level courses
<br>3000 level courses:<br>
<br>typically second, third and fourth year courses for majors and minors
)<br>
<img alt="Pasted image 20241028212441.png" src="lib/media/pasted-image-20241028212441.png">
<br>check if the course 


<br>what you need for your degree
<br>what you are interested in


<br>
Why are you here?

<br>
Why is here you?

<br>Please spend week 6 of each quarter talking to your classmates and getting an understanding of what you may be looking at taking next quarter. ]]></description><link>advising-notes/before-the-pin-removal-meeting.html</link><guid isPermaLink="false">Advising Notes/Before the PIN removal meeting.md</guid><pubDate>Sun, 24 Nov 2024 04:48:08 GMT</pubDate><enclosure url="lib/media/pasted-image-20241028211834.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;lib/media/pasted-image-20241028211834.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Breadth Satisfying Courses]]></title><description><![CDATA[ 
 <br>If you notice that this is outdated, please let Alex know<br>Many CS degrees also require a breadth requirement. At least one course (4 credits) in each category below. These courses often have prerequisites, so they may not be available to take until the 2nd or 3rd year in the department.<br><br>
<br>Programming Languages (COMP3351) 
<br>Compiler Design (COMP3352) 
<br>Compiler Construction (COMP3353)
<br>Software Engineering 1 (COMP3381)
<br>Software Engineering II (COMP 3382)
<br>Secure Software Engineering
<br><br>
<br>Operating Systems (COMP3361) 
<br>Networking (COMP3621) 
<br>Computer Security (COMP3721) 
<br>Internet Security (COMP3705)
<br>Network Security (COMP3722) 
<br>Ethical Hacking (COMP3723) 
<br>Computer Forensics (COMP3731)
<br>Game Programming 1 (COMP 3821)
<br>Intro to Computer Graphics (COMP 3801)
<br>Topics: Embedded Systems	(COMP 370X)
<br>Web Programming II	(COMP 3411)
<br><br>
<br>Data Structures &amp; Algorithms (COMP3371) 
<br>Advanced Algorithms (COMP3372)&nbsp;
<br>Introduction to AI (COMP3501)&nbsp;
<br>Computational Geometry (COMP3591)       
<br>Topics in AI (COMP3703)
<br>Secure Computation (COMP370X)      
<br>Discrete Structures (COMP3200)      
<br>Cryptography (COMP 370X)
<br><br>
<br>Human Computer Interaction (COMP3100)       
<br>Robot Ethics (COMP3705)
<br>Human Data Security and Privacy (COMP3732)
<br>Large Language Model Apps	(COMP 3703)
<br>Human-Centered AI	 (COMP 3525)
<br>Cryptography (COMP 370X)
]]></description><link>advising-notes/breadth-satisfying-courses.html</link><guid isPermaLink="false">Advising Notes/Breadth Satisfying Courses.md</guid><pubDate>Fri, 28 Feb 2025 21:27:49 GMT</pubDate></item><item><title><![CDATA[BS in CS]]></title><description><![CDATA[ 
 <br>Here is info on the departmental requirements for the BSCS (you are also required to complete the <a data-tooltip-position="top" aria-label="Overview BS" data-href="Overview BS" href="advising-notes/overview-bs.html" class="internal-link" target="_self" rel="noopener nofollow">core curriculum BS requirements</a>)<br><br>Here is a typically course plan:<br>
<a data-tooltip-position="top" aria-label="https://bulletin.du.edu/undergraduate/majorsminorscoursedescriptions/traditionalbachelorsprogrammajorandminors/computerscience/#courseplanstext" rel="noopener nofollow" class="external-link" href="https://bulletin.du.edu/undergraduate/majorsminorscoursedescriptions/traditionalbachelorsprogrammajorandminors/computerscience/#courseplanstext" target="_blank">More details here</a><br>]]></description><link>advising-notes/bscs.html</link><guid isPermaLink="false">Advising Notes/BSCS.md</guid><pubDate>Thu, 31 Oct 2024 15:37:06 GMT</pubDate></item><item><title><![CDATA[Course Number Attributes]]></title><description><![CDATA[ 
 <br>Within the CS department there are several class numbers available to undergraduates.<br>1000 level courses: <br>
<br>typically first year courses for majors, minors and non-majors
<br>prerequisites for many 2000 level courses
<br>2000 level courses:<br>
<br>typically second year courses for majors and minors
<br>prerequisites for many 2000-3000 level courses
<br>3000 level courses:<br>
<br>typically second, third and fourth year courses for majors and minors
]]></description><link>advising-notes/course-number-attributes.html</link><guid isPermaLink="false">Advising Notes/Course Number Attributes.md</guid><pubDate>Wed, 30 Oct 2024 06:26:41 GMT</pubDate></item><item><title><![CDATA[cs advising]]></title><description><![CDATA[<a class="tag" href="?query=tag:advising" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#advising</a> <a class="tag" href="?query=tag:todo" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#todo</a> <a class="tag" href="?query=tag:todo" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#todo</a> <a class="tag" href="?query=tag:todo" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#todo</a> <a class="tag" href="?query=tag:TODO" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#TODO</a> <a class="tag" href="?query=tag:TODO" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#TODO</a> <a class="tag" href="?query=tag:TODO" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#TODO</a> <a class="tag" href="?query=tag:BA" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#BA</a> <a class="tag" href="?query=tag:core" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#core</a> <a class="tag" href="?query=tag:requirements" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#requirements</a> <a class="tag" href="?query=tag:BS" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#BS</a> <a class="tag" href="?query=tag:core" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#core</a> <a class="tag" href="?query=tag:requirements" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#requirements</a> <a class="tag" href="?query=tag:game" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#game</a> 
 <br><a href=".?query=tag:advising" class="tag" target="_blank" rel="noopener nofollow">#advising</a><br><br>The information on this page may be outdated, see relevant links for the most up-to-date registration requirements<br><a href=".?query=tag:TODO" class="tag" target="_blank" rel="noopener nofollow">#TODO</a> steps for waiving 2300 on degree audit<br><a href=".?query=tag:TODO" class="tag" target="_blank" rel="noopener nofollow">#TODO</a> substitution of 2200<br>The CS department offers the BS, the BA, Games and Applied Computing.<br>
<br>None are better or worse than others-- they only focus on different areas.
<br>A less time intensive CS degree will leave time for other things that are equally cool and important!
<br>Once you declare your appropriate majors and minors, the Degree Audit will allow you to see your progress towards them.  adding a major or minor is easy!<br><br>The <a data-tooltip-position="top" aria-label="https://www.du.edu/registrar" rel="noopener nofollow" class="external-link" href="https://www.du.edu/registrar" target="_blank">Registrar</a> keeps all the information you should need regarding general registration questions.<br>AI Registration Chatbot
The <a data-tooltip-position="top" aria-label="https://www.du.edu/registrar" rel="noopener nofollow" class="external-link" href="https://www.du.edu/registrar" target="_blank">Registrar</a>has a chatbot that can answer many of your questions about advising. Try chatting with it! It does great with general questions.
<br><br><br>Before the PIN removal meeting<br><br><a href=".?query=tag:TODO" class="tag" target="_blank" rel="noopener nofollow">#TODO</a><br>Look over your degree audit. <br>
<br>
Look over all 1-3000 level CS courses offered next quarter and determine:

<br>what you are eligible for

<br>Upcoming course schedule<br><br>Browse Schedule Your registration portal has the most up-to-date course schedule<br>
<a data-tooltip-position="top" aria-label="https://apps02.du.edu:4443/StudentRegistrationSsb/ssb/registration#" rel="noopener nofollow" class="external-link" href="https://apps02.du.edu:4443/StudentRegistrationSsb/ssb/registration#" target="_blank">Course Schedule</a><br><img alt="Pasted image 20241028211834.png" src="lib/media/pasted-image-20241028211834.png" style="width: 400px; max-width: 100%;"><br>from here, navigate to Browse Schedule and select the correct term<br>we are on the quarter system-- make sure that you don't pick semester (this is for the Law School)<br>Select Subject that you want to search for (you can also Course Number Attributes<br><br>Within the CS department there are several class numbers available to undergraduates.<br>1000 level courses: <br>
<br>typically first year courses for majors, minors and non-majors
<br>prerequisites for many 2000 level courses
<br>2000 level courses:<br>
<br>typically second year courses for majors and minors
<br>prerequisites for many 2000-3000 level courses
<br>3000 level courses:<br>
<br>typically second, third and fourth year courses for majors and minors
)<br>
<img alt="Pasted image 20241028212441.png" src="lib/media/pasted-image-20241028212441.png">
<br>check if the course 


<br>what you need for your degree
<br>what you are interested in


<br>
Why are you here?

<br>
Why is here you?

<br>Please spend week 6 of each quarter talking to your classmates and getting an understanding of what you may be looking at taking next quarter. <br><br>Getting Started<br>
Sample CS 4 year <a data-tooltip-position="top" aria-label="https://bulletin.du.edu/undergraduate/majorsminorscoursedescriptions/traditionalbachelorsprogrammajorandminors/computerscience/#courseplanstext" rel="noopener nofollow" class="external-link" href="https://bulletin.du.edu/undergraduate/majorsminorscoursedescriptions/traditionalbachelorsprogrammajorandminors/computerscience/#courseplanstext" target="_blank">course plans</a> can be a great way to see how many majors plan out there time at DU.<br>The first year of CS at DU for all Majors and Minors should be composed of the Intro to Python<a data-footref="[inline0" href="about:blank#fn-1-f183098385cd80d5" class="footnote-link" target="_self" rel="noopener nofollow">[1]</a>and intro to computer science<a data-footref="[inline1" href="about:blank#fn-2-f183098385cd80d5" class="footnote-link" target="_self" rel="noopener nofollow">[2]</a> sequences.<br>1203 not required for the CS minor<br>This should leave 8ish credits a quarter to work on the other requirements for your CS major ( <a data-tooltip-position="top" aria-label="cs advising > The Math Cognate" data-href="cs advising#The Math Cognate" href="advising-notes/cs-advising.html#The_Math_Cognate" class="internal-link" target="_self" rel="noopener nofollow">math cognate</a> , EDPX, etc.) or whatever you need for other potential majors or minors. <br>Finishing the 1200 and 1300 sequence
Virtually all 2000+ level CS courses will require you to take this 1200 and 1300 sequence so focus on these foundational CS courses your first year in the department. I would also strongly encourage finishing WRIT and FSEM requirements ASAP.
<br>A Sample Schedule First Year for CS BS <a data-tooltip-position="top" aria-label="https://bulletin.du.edu/undergraduate/majorsminorscoursedescriptions/traditionalbachelorsprogrammajorandminors/computerscience/#courseplanstext" rel="noopener nofollow" class="external-link" href="https://bulletin.du.edu/undergraduate/majorsminorscoursedescriptions/traditionalbachelorsprogrammajorandminors/computerscience/#courseplanstext" target="_blank">others can be seen here</a>.<br><br><br>Which courses to take and when?<br>
All of the courses available to undergraduates have some attributes.<br>
Some of these attributes help require common curriculum requirements, and others fulfill major/ minor requirements.<br>
The <a data-tooltip-position="top" aria-label="https://bulletin.du.edu/undergraduate/majorsminorscoursedescriptions/traditionalbachelorsprogrammajorandminors/computerscience/#programofstudytext" rel="noopener nofollow" class="external-link" href="https://bulletin.du.edu/undergraduate/majorsminorscoursedescriptions/traditionalbachelorsprogrammajorandminors/computerscience/#programofstudytext" target="_blank">Bulletin</a> describes the program of study of CS students.<br><br>Course Number Attributes<br><br>Within the CS department there are several class numbers available to undergraduates.<br>1000 level courses: <br>
<br>typically first year courses for majors, minors and non-majors
<br>prerequisites for many 2000 level courses
<br>2000 level courses:<br>
<br>typically second year courses for majors and minors
<br>prerequisites for many 2000-3000 level courses
<br>3000 level courses:<br>
<br>typically second, third and fourth year courses for majors and minors
<br><br>Prerequesites<br><br><a href=".?query=tag:prerequesite" class="tag" target="_blank" rel="noopener nofollow">#prerequesite</a> <a href=".?query=tag:dependency" class="tag" target="_blank" rel="noopener nofollow">#dependency</a> <a href=".?query=tag:chart" class="tag" target="_blank" rel="noopener nofollow">#chart</a> <a href=".?query=tag:course" class="tag" target="_blank" rel="noopener nofollow">#course</a><br>
Andrew Hannum put together a nice visual of the course dependency structure within the department.<br>
<a data-tooltip-position="top" aria-label="https://cs.du.edu/~andhannu/prerequisites_flowchart.html" rel="noopener nofollow" class="external-link" href="https://cs.du.edu/~andhannu/prerequisites_flowchart.html" target="_blank">prerequesite visual</a><br>You may also read prerequisites in course descriptions while you register for courses.<br>These prerequisites for COMP 2370 look something like this:<br>1Mathematics	22002Or	(			Computer Science	13533And				Computer Science	2300) <br>This is equivalent to the statement:<br>
"Prerequesites are:<br>
( Math 2200 or (COMP 1353 and COMP 2300))."<br><br>Breadth Satisfying Courses<br><br>If you notice that this is outdated, please let Alex know<br>Many CS degrees also require a breadth requirement. At least one course (4 credits) in each category below. These courses often have prerequisites, so they may not be available to take until the 2nd or 3rd year in the department.<br><br>
<br>Programming Languages (COMP3351) 
<br>Compiler Design (COMP3352) 
<br>Compiler Construction (COMP3353)
<br>Software Engineering 1 (COMP3381)
<br>Software Engineering II (COMP 3382)
<br>Secure Software Engineering
<br><br>
<br>Operating Systems (COMP3361) 
<br>Networking (COMP3621) 
<br>Computer Security (COMP3721) 
<br>Internet Security (COMP3705)
<br>Network Security (COMP3722) 
<br>Ethical Hacking (COMP3723) 
<br>Computer Forensics (COMP3731)
<br>Game Programming 1 (COMP 3821)
<br>Intro to Computer Graphics (COMP 3801)
<br>Topics: Embedded Systems	(COMP 370X)
<br>Web Programming II	(COMP 3411)
<br><br>
<br>Data Structures &amp; Algorithms (COMP3371) 
<br>Advanced Algorithms (COMP3372)&nbsp;
<br>Introduction to AI (COMP3501)&nbsp;
<br>Computational Geometry (COMP3591)       
<br>Topics in AI (COMP3703)
<br>Secure Computation (COMP370X)      
<br>Discrete Structures (COMP3200)      
<br>Cryptography (COMP 370X)
<br><br>
<br>Human Computer Interaction (COMP3100)       
<br>Robot Ethics (COMP3705)
<br>Human Data Security and Privacy (COMP3732)
<br>Large Language Model Apps	(COMP 3703)
<br>Human-Centered AI	 (COMP 3525)
<br>Cryptography (COMP 370X)
<br>Winter25Schedule<br><br><a data-tooltip-position="top" aria-label="https://apps02.du.edu:4443/StudentRegistrationSsb/ssb/term/termSelection?mode=search" rel="noopener nofollow" class="external-link" href="https://apps02.du.edu:4443/StudentRegistrationSsb/ssb/term/termSelection?mode=search" target="_blank">How I check the most current schedule</a><br><br><a href=".?query=tag:TODO" class="tag" target="_blank" rel="noopener nofollow">#TODO</a> add info on concentrations (link to bulletin)<br><br>BS CS students have a math requirement that differs from the BA.<br>
<br>If you can comfortably survive math the BS is a great option. 
<br>If math causes your quality of life to drop significantly, a BA is a great option.
<br><br>Applied Computing Majors have some different requirements. <br><br><a data-tooltip-position="top" aria-label="https://bulletin.du.edu/undergraduate/undergraduateprograms/traditionalbachelorsprogram/degreesanddegreerequirements/" rel="noopener nofollow" class="external-link" href="https://bulletin.du.edu/undergraduate/undergraduateprograms/traditionalbachelorsprogram/degreesanddegreerequirements/" target="_blank">general common core overview</a> <br><a data-tooltip-position="top" aria-label="https://bulletin.du.edu/undergraduate/undergraduateprograms/traditionalbachelorsprogram/bachelorofarts/" rel="noopener nofollow" class="external-link" href="https://bulletin.du.edu/undergraduate/undergraduateprograms/traditionalbachelorsprogram/bachelorofarts/" target="_blank">BA requirements</a> <a href=".?query=tag:BA" class="tag" target="_blank" rel="noopener nofollow">#BA</a> <a href=".?query=tag:core" class="tag" target="_blank" rel="noopener nofollow">#core</a>  <a href=".?query=tag:requirements" class="tag" target="_blank" rel="noopener nofollow">#requirements</a><br><a data-tooltip-position="top" aria-label="https://bulletin.du.edu/undergraduate/undergraduateprograms/traditionalbachelorsprogram/bachelorofscience/" rel="noopener nofollow" class="external-link" href="https://bulletin.du.edu/undergraduate/undergraduateprograms/traditionalbachelorsprogram/bachelorofscience/" target="_blank">BS common core requirements</a> <a href=".?query=tag:BS" class="tag" target="_blank" rel="noopener nofollow">#BS</a> <a href=".?query=tag:core" class="tag" target="_blank" rel="noopener nofollow">#core</a> <a href=".?query=tag:requirements" class="tag" target="_blank" rel="noopener nofollow">#requirements</a><br><br><br><br>Here are the most heavily used resources:<br>
<a data-tooltip-position="top" aria-label="https://bulletin.du.edu/undergraduate/majorsminorscoursedescriptions/traditionalbachelorsprogrammajorandminors/computerscience/#programofstudytext" rel="noopener nofollow" class="external-link" href="https://bulletin.du.edu/undergraduate/majorsminorscoursedescriptions/traditionalbachelorsprogrammajorandminors/computerscience/#programofstudytext" target="_blank">Bulletin</a> the program of study for CS, general course info, sample schedules<br>
<a data-tooltip-position="top" aria-label="https://apps11.du.edu:9904/worksheets" rel="noopener nofollow" class="external-link" title="Degree Audit" href="https://apps11.du.edu:9904/worksheets" target="_blank">Degree Audit</a> student progress towards degree, what if?<br>
<a data-tooltip-position="top" aria-label="https://apps02.du.edu:4443/StudentRegistrationSsb/ssb/term/termSelection?mode=search" rel="noopener nofollow" class="external-link" title="Schedule of Classes" href="https://apps02.du.edu:4443/StudentRegistrationSsb/ssb/term/termSelection?mode=search" target="_blank">Schedule of Classes</a> Courses offered in the coming quarter, CRN, Sections, Times<br>
<a data-tooltip-position="top" aria-label="https://du.inspire.civitaslearning.com/login" rel="noopener nofollow" class="external-link" title="View &amp; Add Advising Notes (Inspire System)" href="https://du.inspire.civitaslearning.com/login" target="_blank">View &amp; Add Advising Notes (Inspire)</a> Notes to advisor/advisee, reports<br>Adding or dropping a minor or major<br><br><a href=".?query=tag:minor" class="tag" target="_blank" rel="noopener nofollow">#minor</a> <a href=".?query=tag:major" class="tag" target="_blank" rel="noopener nofollow">#major</a> <a href=".?query=tag:drop" class="tag" target="_blank" rel="noopener nofollow">#drop</a> <a href=".?query=tag:add" class="tag" target="_blank" rel="noopener nofollow">#add</a><br><br>
<br>complete the form and email to registrar@du.edu a signature  is not required <a data-tooltip-position="top" aria-label="https://www.du.edu/sites/default/files/2022-10/MajorChangeForm.pdf" rel="noopener nofollow" class="external-link" href="https://www.du.edu/sites/default/files/2022-10/MajorChangeForm.pdf" target="_blank">a pdf of the minor/major change form</a>
<br>They will then update your Degree Audit
<br><br>
<br>You will need an advisor (Meredith can assign you one)
<br>complete the form and email to meredith.corley@du.edu. a signature is required <a data-tooltip-position="top" aria-label="https://www.du.edu/sites/default/files/2022-10/MajorChangeForm.pdf" rel="noopener nofollow" class="external-link" href="https://www.du.edu/sites/default/files/2022-10/MajorChangeForm.pdf" target="_blank">minor/major change form</a>. 
<br>The registrar will then update your Degree Audit
<br>Getting an Advisor
Don't feel bad if you reach out to a prof and don't hear back. They are just some really busy people. Ask another prof or meredith.corley@du.edu and she can help find you someone!
 <br><br><a href=".?query=tag:game" class="tag" target="_blank" rel="noopener nofollow">#game</a><br>
Game programming is at the forefront of human-computer interaction (HCI). They continually push the boundaries of interactive design, real-time feedback, and user engagement.<br>
Look at the <a data-tooltip-position="top" aria-label="https://bulletin.du.edu/undergraduate/coursedescriptions/edpx/" rel="noopener nofollow" class="external-link" href="https://bulletin.du.edu/undergraduate/coursedescriptions/edpx/" target="_blank">EDPX</a> -- such a cool side of science and technology studies.<br>
Reach out to our games faculty to learn more. <br><br>Study abroad<br><br><br>You will need to take a 2 credit (meets once a week) study abroad class before traveling abroad. <br>tips from upperclassmen

<br>"You need to be very self motivated to make it happen."
<br>"Nobody will stop you if this makes you graduate late!"
<br>"I don't have any special insights."

<br>Most study abroad are done in the Fall quarter. This is because you would only miss the Fall Quarter. We try to plan our courses around these students. Leaving in the Winter or Spring may not be as well accommodated.<br>The best resource for Study Abroad is a canvas course with TONS of information.
<a data-tooltip-position="top" aria-label="https://canvas.du.edu/courses/168853" rel="noopener nofollow" class="external-link" href="https://canvas.du.edu/courses/168853" target="_blank">DU Study Abroad Handbook 24/25</a> Most Current info on Study Abroad! <a href=".?query=tag:study" class="tag" target="_blank" rel="noopener nofollow">#study</a> <a href=".?query=tag:abroad" class="tag" target="_blank" rel="noopener nofollow">#abroad</a>
<br><a data-tooltip-position="top" aria-label="https://abroad.du.edu//index.cfm?FuseAction=Programs.SearchResults&amp;Program_Name=&amp;Program_Type_ID=1&amp;pc=%7F&amp;pr=%7F&amp;pt=%7F&amp;p_10008=Computer+Science%7F&amp;p_10008_t=MULTI&amp;p_10001=%7F&amp;p_10001_t=MINIM&amp;p_10003=%7F&amp;p_10003_t=SELCT&amp;p_10004=%7F&amp;p_10004_t=MULTI&amp;p_10002=%7F&amp;p_10002_t=SELCT&amp;p_10006=%7F&amp;p_10006_t=MULTI&amp;p_10012=%7F&amp;p_10012_t=MULTI&amp;p_10019=%7F&amp;p_10019_t=SELCT&amp;Sort=Program_Name&amp;Order=asc&amp;pp=10008%2C10001%2C10003%2C10004%2C10002%2C10006%2C10012%2C10019" rel="noopener nofollow" class="external-link" href="https://abroad.du.edu//index.cfm?FuseAction=Programs.SearchResults&amp;Program_Name=&amp;Program_Type_ID=1&amp;pc=%7F&amp;pr=%7F&amp;pt=%7F&amp;p_10008=Computer+Science%7F&amp;p_10008_t=MULTI&amp;p_10001=%7F&amp;p_10001_t=MINIM&amp;p_10003=%7F&amp;p_10003_t=SELCT&amp;p_10004=%7F&amp;p_10004_t=MULTI&amp;p_10002=%7F&amp;p_10002_t=SELCT&amp;p_10006=%7F&amp;p_10006_t=MULTI&amp;p_10012=%7F&amp;p_10012_t=MULTI&amp;p_10019=%7F&amp;p_10019_t=SELCT&amp;Sort=Program_Name&amp;Order=asc&amp;pp=10008%2C10001%2C10003%2C10004%2C10002%2C10006%2C10012%2C10019" target="_blank">DU Partner Programs</a> Partner Universities with CS Departments. <br><a data-tooltip-position="top" aria-label="https://canvas.du.edu/courses/129771/pages/course-approvals?module_item_id=2249332" rel="noopener nofollow" class="external-link" href="https://canvas.du.edu/courses/129771/pages/course-approvals?module_item_id=2249332" target="_blank">Course Approvals</a> How to get abroad courses approved.<br>How do I know if the course will be approved?
get ahold of the course syllabus and ask a professor who teaches the DU equivalent
<br><a data-tooltip-position="top" aria-label="https://isarsgrid.du.edu/eSARS/StudyAbroad/eSARS.asp?WCI=Init&amp;WCE=Settings" rel="noopener nofollow" class="external-link" href="https://isarsgrid.du.edu/eSARS/StudyAbroad/eSARS.asp?WCI=Init&amp;WCE=Settings" target="_blank">Meet with Study Abroad Advisor</a> <a href=".?query=tag:advisor" class="tag" target="_blank" rel="noopener nofollow">#advisor</a> <a href=".?query=tag:study" class="tag" target="_blank" rel="noopener nofollow">#study</a> <a href=".?query=tag:abroad" class="tag" target="_blank" rel="noopener nofollow">#abroad</a> <br><a data-tooltip-position="top" aria-label="https://abroad.du.edu/" rel="noopener nofollow" class="external-link" href="https://abroad.du.edu/" target="_blank">DU Passport</a> Online Application and Travel Registration system for the DU community.<br><br>Alex Contact Info<br><br><br><br>Book a time to meet with me here for advising questions.<br>
<a data-tooltip-position="top" aria-label="https://calendar.google.com/calendar/u/0/appointments/schedules/AcZssZ3xGGiTHTGvLTEprqnfStfQ1DE_eGW3qhj8uxua69gWwzUwf11g9xRcFDhC3bBiYoKQ9Ol9oefF" rel="noopener nofollow" class="external-link" href="https://calendar.google.com/calendar/u/0/appointments/schedules/AcZssZ3xGGiTHTGvLTEprqnfStfQ1DE_eGW3qhj8uxua69gWwzUwf11g9xRcFDhC3bBiYoKQ9Ol9oefF" target="_blank">google booking link</a><br>
<a data-tooltip-position="top" aria-label="https://app.reclaim.ai/m/alexander-stevens/advising-and-pin-deletion" rel="noopener nofollow" class="external-link" href="https://app.reclaim.ai/m/alexander-stevens/advising-and-pin-deletion" target="_blank">reclaim (phasing out)</a><br><br>This is the zoom link I use for everything.<br>
<a data-tooltip-position="top" aria-label="https://udenver.zoom.us/my/alex.stevens" rel="noopener nofollow" class="external-link" href="https://udenver.zoom.us/my/alex.stevens" target="_blank">my zoom</a> <a href=".?query=tag:zoom" class="tag" target="_blank" rel="noopener nofollow">#zoom</a> <br><br><a data-href="advising faculty resources" href="advising-notes/advising-faculty-resources.html" class="internal-link" target="_self" rel="noopener nofollow">advising faculty resources</a><br><br>What should I do if I can't get into the class I need?
If a section is full, there is a good chance you are not alone. Getting on the waitlist is a good idea. Most likely there is a post somewhere in the slack channel
<br>Systems II not offered in the Winter 2024?
Unfortunately no, you will have to wait until Fall 2025 to take this.
<br>
<br>
<br>COMP 1351, COMP 1352, COMP 1353<a href="about:blank#fnref-1-f183098385cd80d5" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">‚Ü©Ô∏é</a>
<br>COMP 1201, COMP 1202, COMP 1203<a href="about:blank#fnref-2-f183098385cd80d5" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">‚Ü©Ô∏é</a>
]]></description><link>advising-notes/cs-advising.html</link><guid isPermaLink="false">Advising Notes/cs advising.md</guid><pubDate>Thu, 31 Oct 2024 15:25:04 GMT</pubDate><enclosure url="lib/media/pasted-image-20241028211834.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;lib/media/pasted-image-20241028211834.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Distinction]]></title><description><![CDATA[<a class="tag" href="?query=tag:ugdistinction" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#ugdistinction</a> 
 <br><br>Join the slack channel called <a href=".?query=tag:ugdistinction" class="tag" target="_blank" rel="noopener nofollow">#ugdistinction</a>]]></description><link>advising-notes/distinction.html</link><guid isPermaLink="false">Advising Notes/Distinction.md</guid><pubDate>Sun, 27 Oct 2024 05:38:42 GMT</pubDate></item><item><title><![CDATA[Faculty]]></title><description><![CDATA[ 
 <br><br>Learn more about your profs here <a data-tooltip-position="top" aria-label="https://ritchieschool.du.edu/computer-science/cs-faculty-people?gad_source=1&amp;gclid=EAIaIQobChMIrvi8p4CqiQMVejStBh0wUyHOEAAYASAAEgIPvPD_BwE" rel="noopener nofollow" class="external-link" href="https://ritchieschool.du.edu/computer-science/cs-faculty-people?gad_source=1&amp;gclid=EAIaIQobChMIrvi8p4CqiQMVejStBh0wUyHOEAAYASAAEgIPvPD_BwE" target="_blank">Faculty Page</a><br>How can I learn more about my prof before taking a course with them?]]></description><link>advising-notes/faculty.html</link><guid isPermaLink="false">Advising Notes/Faculty.md</guid><pubDate>Sun, 27 Oct 2024 05:38:23 GMT</pubDate></item><item><title><![CDATA[Games Major]]></title><description><![CDATA[ 
 <br>I would love to have a helpful blip on the games major.<br> two CS electives, one satisfying the <a data-tooltip-position="top" aria-label="Breadth Satisfying Courses" data-href="Breadth Satisfying Courses" href="advising-notes/breadth-satisfying-courses.html" class="internal-link" target="_self" rel="noopener nofollow">Ethics DEIJ</a> requirement.<br>Upperclassmen advice
Study abroad needs to happen Fall Junior Year so you can do all the games capstone Senior Year!
<br><br>Nando Tips

<br>You need a minor in EDPX-- you will need to take ARTS 1250 and EDPX 3600 (3D modeling).
<br>You don't need to take any math except COMP 2300, you also get to skip Systems I and II.

<br>
<br>EDPX Minor requires a Cultures Course -- (not clear what counts as cultures course -- let me know if you know).
<br><br>(let me know!)]]></description><link>advising-notes/games-major.html</link><guid isPermaLink="false">Advising Notes/Games Major.md</guid><pubDate>Mon, 04 Nov 2024 05:57:29 GMT</pubDate></item><item><title><![CDATA[Leading by Learning]]></title><description><![CDATA[<a class="tag" href="?query=tag:teaching" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teaching</a> <a class="tag" href="?query=tag:critical" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#critical</a> <a class="tag" href="?query=tag:pedagogy" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#pedagogy</a> <a class="tag" href="?query=tag:toread" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#toread</a> 
 <br>]]></description><link>advising-notes/leading-by-learning.html</link><guid isPermaLink="false">Advising Notes/Leading by Learning.md</guid><pubDate>Sun, 27 Oct 2024 20:04:01 GMT</pubDate></item><item><title><![CDATA[Math Cognate]]></title><description><![CDATA[<a class="tag" href="?query=tag:todo" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#todo</a> 
 <br>The math cognate is required for a BS in CS.<br>
It is common for BS CS students to add a math minor.<br>
If 2300 is counted towards the math minor, a form must be completed <a href=".?query=tag:todo" class="tag" target="_blank" rel="noopener nofollow">#todo</a> <br>Bulletin
If used towards the Mathematics minor, 4 additional COMP credits must be taken as this course cannot count both towards the Mathematics minor and the total COMP credits required by the degree.
]]></description><link>advising-notes/math-cognate.html</link><guid isPermaLink="false">Advising Notes/Math Cognate.md</guid><pubDate>Mon, 03 Mar 2025 19:08:29 GMT</pubDate></item><item><title><![CDATA[BS]]></title><description><![CDATA[ 
 <br>Here is an overview for requirements for the BS and BA Core Curriculum<br><br><a data-tooltip-position="top" aria-label="https://bulletin.du.edu/undergraduate/undergraduateprograms/traditionalbachelorsprogram/bachelorofscience/" rel="noopener nofollow" class="external-link" href="https://bulletin.du.edu/undergraduate/undergraduateprograms/traditionalbachelorsprogram/bachelorofscience/" target="_blank">BS Overview</a><br><br><br>In the bachelor of science curriculum, at least 45&nbsp;credits are required for the major. Of these, at least 25 must be in&nbsp;2000- and 3000-level&nbsp;courses. Minors approved for the BS degree range from 15‚Äì28 credits each. Students pursuing a BS degree must complete a major and two minors or two majors and one minor. One minor must be in one of the following disciplines: Astrophysics, Biological Sciences, Chemistry, Computer Science, Computer Engineering, Electrical Engineering, Environmental Science, Geography, Geographic Information Science, Geology, Human Health Science &amp; Systems, Mathematics, Mechanical Engineering, Medical Physics, Physics, and Psychology. Students who double major in BS programs can use the second major in place of one of the listed minors.<br>
<br>
The GPA in the major and the minor must be at least 2.0 with the exception of the bachelor of science in accounting which requires a GPA of at least 2.5.

<br>
Credits in the major and the minor must be earned at the level of ‚ÄúC‚Äì‚Äù or better.

<br>
At least 50 percent of the required credits for the major and the minor must be completed at the University of Denver.

<br><br><a data-tooltip-position="top" aria-label="https://bulletin.du.edu/undergraduate/undergraduateprograms/traditionalbachelorsprogram/bachelorofarts/" rel="noopener nofollow" class="external-link" href="https://bulletin.du.edu/undergraduate/undergraduateprograms/traditionalbachelorsprogram/bachelorofarts/" target="_blank">BA overview</a><br><br><br>The major (40‚Äì60 credits) is a planned program of courses taken in one department or, in the case of an interdiscipli¬≠nary major, a program of related courses taken in more than one department. For the bachelor of arts, at least 40 credits are required in the major. Individual departments may establish a greater number of required hours. (See departmental listing for details.) Of these, at least 25 credits must be in 2000-¬≠ or 3000-level (upper-division) courses.<br>The minor (20‚Äì28 credits) is a program of courses in a second area of concentration. Individual departments may establish a greater number of required hours. (See depart¬≠mental listing for details.) Of these, at least 5 credits must be in 2000-¬≠ or 3000-level (upper-division) courses.<br>
<br>
The GPA in the major and the minor must be at least 2.0 with the exception of the bachelor of science in accounting which requires a GPA of at least 2.5.

<br>
Credits in the major and the minor must be earned at the level of ‚ÄúC‚Äì‚Äù or better.

<br>
At least 50 percent of the required credits for the major and the minor must be completed at the University of Denver.

]]></description><link>advising-notes/overview-bs.html</link><guid isPermaLink="false">Advising Notes/Overview BS.md</guid><pubDate>Mon, 04 Nov 2024 05:59:27 GMT</pubDate></item><item><title><![CDATA[Prerequesites]]></title><description><![CDATA[<a class="tag" href="?query=tag:prerequesite" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#prerequesite</a> <a class="tag" href="?query=tag:dependency" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#dependency</a> <a class="tag" href="?query=tag:chart" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#chart</a> <a class="tag" href="?query=tag:course" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#course</a> 
 <br><a href=".?query=tag:prerequesite" class="tag" target="_blank" rel="noopener nofollow">#prerequesite</a> <a href=".?query=tag:dependency" class="tag" target="_blank" rel="noopener nofollow">#dependency</a> <a href=".?query=tag:chart" class="tag" target="_blank" rel="noopener nofollow">#chart</a> <a href=".?query=tag:course" class="tag" target="_blank" rel="noopener nofollow">#course</a><br>
Andrew Hannum put together a nice visual of the course dependency structure within the department.<br>
<a data-tooltip-position="top" aria-label="https://cs.du.edu/~andhannu/prerequisites_flowchart.html" rel="noopener nofollow" class="external-link" href="https://cs.du.edu/~andhannu/prerequisites_flowchart.html" target="_blank">prerequesite visual</a><br>You may also read prerequisites in course descriptions while you register for courses.<br>These prerequisites for COMP 2370 look something like this:<br>Mathematics	2200
Or	(			Computer Science	1353
And				Computer Science	2300) 
<br>This is equivalent to the statement:<br>
"Prerequesites are:<br>
( Math 2200 or (COMP 1353 and COMP 2300))."]]></description><link>advising-notes/prerequesites.html</link><guid isPermaLink="false">Advising Notes/Prerequesites.md</guid><pubDate>Mon, 04 Nov 2024 06:09:03 GMT</pubDate></item><item><title><![CDATA[Study abroad]]></title><description><![CDATA[<a class="tag" href="?query=tag:study" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#study</a> <a class="tag" href="?query=tag:abroad" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#abroad</a> <a class="tag" href="?query=tag:advisor" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#advisor</a> <a class="tag" href="?query=tag:study" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#study</a> <a class="tag" href="?query=tag:abroad" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#abroad</a> 
 <br><br>You will need to take a 2 credit (meets once a week) study abroad class before traveling abroad. <br>tips from upperclassmen

<br>"You need to be very self motivated to make it happen."
<br>"Nobody will stop you if this makes you graduate late!"
<br>"I don't have any special insights."

<br>Most study abroad are done in the Fall quarter. This is because you would only miss the Fall Quarter. We try to plan our courses around these students. Leaving in the Winter or Spring may not be as well accommodated.<br>The best resource for Study Abroad is a canvas course with TONS of information.
<a data-tooltip-position="top" aria-label="https://canvas.du.edu/courses/168853" rel="noopener nofollow" class="external-link" href="https://canvas.du.edu/courses/168853" target="_blank">DU Study Abroad Handbook 24/25</a> Most Current info on Study Abroad! <a href=".?query=tag:study" class="tag" target="_blank" rel="noopener nofollow">#study</a> <a href=".?query=tag:abroad" class="tag" target="_blank" rel="noopener nofollow">#abroad</a>
<br><a data-tooltip-position="top" aria-label="https://abroad.du.edu//index.cfm?FuseAction=Programs.SearchResults&amp;Program_Name=&amp;Program_Type_ID=1&amp;pc=%7F&amp;pr=%7F&amp;pt=%7F&amp;p_10008=Computer+Science%7F&amp;p_10008_t=MULTI&amp;p_10001=%7F&amp;p_10001_t=MINIM&amp;p_10003=%7F&amp;p_10003_t=SELCT&amp;p_10004=%7F&amp;p_10004_t=MULTI&amp;p_10002=%7F&amp;p_10002_t=SELCT&amp;p_10006=%7F&amp;p_10006_t=MULTI&amp;p_10012=%7F&amp;p_10012_t=MULTI&amp;p_10019=%7F&amp;p_10019_t=SELCT&amp;Sort=Program_Name&amp;Order=asc&amp;pp=10008%2C10001%2C10003%2C10004%2C10002%2C10006%2C10012%2C10019" rel="noopener nofollow" class="external-link" href="https://abroad.du.edu//index.cfm?FuseAction=Programs.SearchResults&amp;Program_Name=&amp;Program_Type_ID=1&amp;pc=%7F&amp;pr=%7F&amp;pt=%7F&amp;p_10008=Computer+Science%7F&amp;p_10008_t=MULTI&amp;p_10001=%7F&amp;p_10001_t=MINIM&amp;p_10003=%7F&amp;p_10003_t=SELCT&amp;p_10004=%7F&amp;p_10004_t=MULTI&amp;p_10002=%7F&amp;p_10002_t=SELCT&amp;p_10006=%7F&amp;p_10006_t=MULTI&amp;p_10012=%7F&amp;p_10012_t=MULTI&amp;p_10019=%7F&amp;p_10019_t=SELCT&amp;Sort=Program_Name&amp;Order=asc&amp;pp=10008%2C10001%2C10003%2C10004%2C10002%2C10006%2C10012%2C10019" target="_blank">DU Partner Programs</a> Partner Universities with CS Departments. <br><a data-tooltip-position="top" aria-label="https://canvas.du.edu/courses/129771/pages/course-approvals?module_item_id=2249332" rel="noopener nofollow" class="external-link" href="https://canvas.du.edu/courses/129771/pages/course-approvals?module_item_id=2249332" target="_blank">Course Approvals</a> How to get abroad courses approved.<br>How do I know if the course will be approved?
get ahold of the course syllabus and ask a professor who teaches the DU equivalent
<br><a data-tooltip-position="top" aria-label="https://isarsgrid.du.edu/eSARS/StudyAbroad/eSARS.asp?WCI=Init&amp;WCE=Settings" rel="noopener nofollow" class="external-link" href="https://isarsgrid.du.edu/eSARS/StudyAbroad/eSARS.asp?WCI=Init&amp;WCE=Settings" target="_blank">Meet with Study Abroad Advisor</a> <a href=".?query=tag:advisor" class="tag" target="_blank" rel="noopener nofollow">#advisor</a> <a href=".?query=tag:study" class="tag" target="_blank" rel="noopener nofollow">#study</a> <a href=".?query=tag:abroad" class="tag" target="_blank" rel="noopener nofollow">#abroad</a> <br><a data-tooltip-position="top" aria-label="https://abroad.du.edu/" rel="noopener nofollow" class="external-link" href="https://abroad.du.edu/" target="_blank">DU Passport</a> Online Application and Travel Registration system for the DU community.]]></description><link>advising-notes/study-abroad.html</link><guid isPermaLink="false">Advising Notes/Study abroad.md</guid><pubDate>Tue, 29 Oct 2024 02:59:42 GMT</pubDate></item><item><title><![CDATA[Undergrad Degree Progress Self-Check]]></title><description><![CDATA[ 
 <br><br>Before meeting with your advisor each quarter, it is wise to calculate the average number of credit hours you need to take for your remaining quarters at DU. This ensures that your graduation timeline is on track.<br>If you complete fewer than 15.25 credit hours per quarter, you will need to compensate by:<br>
<br>Adding summer courses at DU or a community college (if credit hours transfer).  
<br>Extending your time at DU.  
<br>Taking heavier course loads in future quarters.  
<br><br><br>First, calculate how many quarters you will be taking courses.  <br>Jesse's Example  
Jesse is a Junior in week 6 of the Winter Quarter. He is planning his registration for the Spring Quarter.<br>
He counts his remaining quarters and determines he has 4 terms left to complete his degree.  

<br>Juan's Example  
Juan started at DU as a transfer student. Although his Degree Audit classifies him as a Junior, he plans to graduate in the Fall of the following year.<br>
He counts his remaining quarters and determines he has 3 terms left to take courses.  

<br><br><br>Now, determine how many credit hours you still need to complete your degree.  <br>Jesse's Example  
<img alt="Pasted image 20250222142104.png" src="lib/media/pasted-image-20250222142104.png"><br>
Jesse has 183 - 109 = 74 credit hours left to complete the BS credit requirement.  
<br>Juan's Example  
<img alt="Pasted image 20250222141542.png" src="lib/media/pasted-image-20250222141542.png"><br>
Juan has 183 - 132 = 51 credit hours left to complete the BS credit requirement.  
<br><br><br>Now, divide the remaining credit hours by the number of quarters left.  <br>Jesse's Example  
<img alt="Pasted image 20250222142104.png" src="lib/media/pasted-image-20250222142104.png"><br>
Jesse has 74 credit hours remaining and 4 quarters left.<br>
His average course load per quarter is 74 √∑ 4 = 18.5 credit hours.  
<br>Juan's Example  
<img alt="Pasted image 20250222141542.png" src="lib/media/pasted-image-20250222141542.png"><br>
Juan has 51 credit hours remaining and 3 quarters left.<br>
His average course load per quarter is 51 √∑ 3 = 17 credit hours.  
<br><br><br>Now, assess whether this graduation timeline is manageable or if adjustments are needed.  <br>Jesse's Example  
18.5 credit hours per quarter is a heavy load for Jesse, but he is willing to try.<br>
However, he cannot take more than 18 credits per quarter without approval, and he must pay for every 2 credit hourss over the 18-credit hour limit.  
Since Jesse has a GPA above 3.0, he is eligible to take up to 20 credit hours with advisor approval and by submitting the <a data-tooltip-position="top" aria-label="https://udenver.qualtrics.com/SE/?SID=SV_dalmNMIYeGPrGWV" rel="noopener nofollow" class="external-link" href="https://udenver.qualtrics.com/SE/?SID=SV_dalmNMIYeGPrGWV" target="_blank">credit hour overload form</a>.  
This means that in his senior year, he will need an average of 18 credit hours per quarter.<br>
Finding 2-credit hour courses that meet his degree requirements may be challenging.  
To reduce his credit hour load, Jesse is considering taking a 4-credit hour summer course, lowering his senior year load to:

<br>One 18-credit hour quarter  
<br>Two 16-credit hour quarters  

He is looking at community colleges near his home for transferable courses.  
<br>Juan's Example  
17 credit hour hours per quarter is too much for Juan. He prefers lighter course loads.  
He is considering taking a summer course at a local community college, but he needs to check if any relevant courses are available.  
If no suitable summer courses exist, he will extend his graduation by one quarter, reducing his average course load to 12.75 credit hours per quarter, which is far more manageable.  
Juan needs to check whether this extension will affect his scholarship. He also plans to discuss this decision with his family.  
<br>]]></description><link>advising-notes/undergrad-degree-progress-self-check.html</link><guid isPermaLink="false">Advising Notes/Undergrad Degree Progress Self-Check.md</guid><pubDate>Sat, 22 Feb 2025 22:24:43 GMT</pubDate><enclosure url="lib/media/pasted-image-20250222142104.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;lib/media/pasted-image-20250222142104.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Upcoming course schedule]]></title><description><![CDATA[ 
 <br>Browse Schedule Your registration portal has the most up-to-date course schedule<br>
<a data-tooltip-position="top" aria-label="https://apps02.du.edu:4443/StudentRegistrationSsb/ssb/registration#" rel="noopener nofollow" class="external-link" href="https://apps02.du.edu:4443/StudentRegistrationSsb/ssb/registration#" target="_blank">Course Schedule</a><br><img alt="Pasted image 20241028211834.png" src="lib/media/pasted-image-20241028211834.png" style="width: 400px; max-width: 100%;"><br>from here, navigate to Browse Schedule and select the correct term<br>we are on the quarter system-- make sure that you don't pick semester (this is for the Law School)<br>Select Subject that you want to search for (you can also Course Number Attributes<br><br>Within the CS department there are several class numbers available to undergraduates.<br>1000 level courses: <br>
<br>typically first year courses for majors, minors and non-majors
<br>prerequisites for many 2000 level courses
<br>2000 level courses:<br>
<br>typically second year courses for majors and minors
<br>prerequisites for many 2000-3000 level courses
<br>3000 level courses:<br>
<br>typically second, third and fourth year courses for majors and minors
)<br>
<img alt="Pasted image 20241028212441.png" src="lib/media/pasted-image-20241028212441.png">]]></description><link>advising-notes/upcoming-course-schedule.html</link><guid isPermaLink="false">Advising Notes/Upcoming course schedule.md</guid><pubDate>Tue, 29 Oct 2024 03:30:00 GMT</pubDate><enclosure url="lib/media/pasted-image-20241028211834.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;lib/media/pasted-image-20241028211834.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Winter25Schedule]]></title><description><![CDATA[ 
 <br><a data-tooltip-position="top" aria-label="https://apps02.du.edu:4443/StudentRegistrationSsb/ssb/term/termSelection?mode=search" rel="noopener nofollow" class="external-link" href="https://apps02.du.edu:4443/StudentRegistrationSsb/ssb/term/termSelection?mode=search" target="_blank">How I check the most current schedule</a>]]></description><link>advising-notes/winter25schedule.html</link><guid isPermaLink="false">Advising Notes/Winter25Schedule.md</guid><pubDate>Sun, 27 Oct 2024 05:55:20 GMT</pubDate></item><item><title><![CDATA[An Introduction to Discrete Probability]]></title><description><![CDATA[<a class="tag" href="?query=tag:not_ready" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#not_ready</a> 
 <br>2025-03-09<br>
<a href=".?query=tag:not_ready" class="tag" target="_blank" rel="noopener nofollow">#not_ready</a><br>Probability theory dates back to 1526 when the Italian mathematician, physician, and gambler Girolamo Cardano wrote the first known systematic treatment of the subject in his book Liber de Ludo Aleae (Book on Games of Chance). In the seventeenth century, Blaise Pascal analyzed betting odds, and in the eighteenth century, Pierre-Simon Laplace formally defined probability.<br>In this section, we will study experiments with finitely many, equally likely outcomes, following Laplace‚Äôs definition.<br><br>Definition 1:
An experiment is a procedure that yields one of a given set of possible outcomes. The sample space of an experiment is the set of all possible outcomes. An event is a subset of the sample space.
If  is a finite nonempty sample space of equally likely outcomes, and  is an event (a subset of ), then the probability of  is given by:

<br>The probability of an event is always between 0 and 1.<br><br>Example 1:
An urn contains four blue balls and five red balls. What is the probability that a randomly chosen ball is blue?
Solution: There are nine total outcomes and four successful ones. So, .
<br>Example 2:
What is the probability that the sum of two rolled dice is 7?
Solution: There are  total outcomes, and six of them result in a sum of 7: . Thus, .
<br><br>Theorem 1:
If  is an event in sample space , then the probability of the complementary event  (i.e.,  not occurring) is given by:

<br>Example 8:
A sequence of 10 bits is randomly generated. What is the probability that at least one of these bits is 0?
Solution: The complement event is getting all 1s. Since each bit has a  chance of being 1, we calculate:

Thus, .
<br>Theorem 2:
If  and  are events in , then:

<br><br>Example 10:
A game show contestant selects one of three doors. The host, who knows where the prize is, always opens a non-prize door and offers the contestant a chance to switch doors. Should they switch?
Solution:

<br>Probability of picking the correct door initially: .
<br>Probability of picking a wrong door initially: .
<br>If the contestant picked wrong, switching guarantees a win.
<br>Thus, switching doors gives a  probability of winning.

Conclusion: Always switch.
<br><br>Exercise 1:
What is the probability that a randomly chosen card from a standard deck is an ace?
<br>Exercise 2:
What is the probability that a fair die lands on six when rolled?
<br>Exercise 3:
What is the probability that a randomly selected integer from the first 100 positive integers is odd?
<br>Exercise 4:
What is the probability that a randomly selected day of a leap year (366 days) is in April?
<br>Exercise 5:
What is the probability that the sum of two rolled dice is even?
<br><br>Solution 1: :::
There are four aces in a deck of 52 cards. Thus, .<br>
:::
<br>Solution 2: :::
There is one successful outcome (rolling a six) and six possible outcomes. Thus, .<br>
:::
<br>Solution 3: :::
There are 50 odd numbers out of 100. Thus, .<br>
:::
<br>Reference: Book Page 445, PDF Page 1<br><br><br>next: <a data-href="7.2 Probability Theory" href="rosen/7.2-probability-theory.html" class="internal-link" target="_self" rel="noopener nofollow">7.2 Probability Theory</a><br>
previous: <a data-href="6.6 Generating Permutations and Combinations" href="rosen/6.6-generating-permutations-and-combinations.html" class="internal-link" target="_self" rel="noopener nofollow">6.6 Generating Permutations and Combinations</a>]]></description><link>rosen/7.1-an-introduction-to-discrete-probability.html</link><guid isPermaLink="false">Rosen/7.1 An Introduction to Discrete Probability.md</guid><pubDate>Mon, 10 Mar 2025 11:18:59 GMT</pubDate></item><item><title><![CDATA[Bayes‚Äô Theorem]]></title><description><![CDATA[<a class="tag" href="?query=tag:not_ready" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#not_ready</a> 
 <br>2025-03-09<br>
<a href=".?query=tag:not_ready" class="tag" target="_blank" rel="noopener nofollow">#not_ready</a> <br><br>There are many times when we want to assess the probability that a particular event occurs on the basis of partial evidence. For example, suppose we know the percentage of people who have a particular disease for which there is a very accurate diagnostic test. People who test positive for this disease would like to know the likelihood that they actually have the disease. This section introduces Bayes‚Äô theorem, which allows us to compute such probabilities based on available data.<br>Bayes‚Äô theorem has been widely applied in diverse fields such as medicine, law, machine learning, engineering, and software development.<br><br>Theorem 1: Bayes‚Äô Theorem
Suppose that E and F are events from a sample space S such that  and . Then:

<br><br>Example 1:
Bob selects a ball by first choosing one of two boxes at random. The first box contains two green balls and seven red balls; the second contains four green balls and three red balls. If Bob has selected a red ball, what is the probability that he selected a ball from the first box?
<br><br>Example 2:
Suppose that one person in 100,000 has a rare disease for which there is a fairly accurate diagnostic test. This test is correct 99.0% of the time when given to a person with the disease and correct 99.5% of the time when given to a person without the disease. What is the probability that a person who tests positive actually has the disease?
<br><br>Theorem 2: Generalized Bayes‚Äô Theorem
Suppose that E is an event from a sample space S and that  are mutually exclusive events such that . Then:

<br><br>Bayesian spam filters use previous data to estimate the probability that an incoming e-mail message is spam. By analyzing word occurrences, we can estimate whether a message is spam using Bayes‚Äô theorem.<br><br>Example 3:
Suppose that the word "Rolex" appears in 250 out of 2000 spam messages and 5 out of 1000 messages that are not spam. Estimate the probability that an incoming message containing "Rolex" is spam.
<br><br>Exercise 1:
Suppose that E and F are events in a sample space with , , and . Find .
<br>Exercise 2:
Suppose that Ann selects a ball by first picking one of two boxes at random and then selecting a ball from this box. The first box contains three orange balls and four black balls, and the second box contains five orange balls and six black balls. What is the probability that Ann picked a ball from the second box if she has selected an orange ball?
<br>Exercise 3:
A soccer player who takes steroids tests positive 98% of the time, and a player who does not take steroids tests positive 12% of the time. If 5% of soccer players take steroids, what is the probability that a player who tests positive takes steroids?
<br><br>Solution 1: :::
Using Bayes‚Äô theorem, we find . Substituting values gives .
<br>Solution 2: :::
Using conditional probability and Bayes‚Äô theorem, we compute the required probability as follows...
<br>Solution 3: :::
Applying Bayes‚Äô theorem with given probabilities...
<br>Reference: Book Page 468, PDF Page 1<br><br><br>next: <a data-href="7.4 Expected Value and Variance" href="rosen/7.4-expected-value-and-variance.html" class="internal-link" target="_self" rel="noopener nofollow">7.4 Expected Value and Variance</a><br>
previous: <a data-href="7.2 Probability Theory" href="rosen/7.2-probability-theory.html" class="internal-link" target="_self" rel="noopener nofollow">7.2 Probability Theory</a>]]></description><link>rosen/7.3-bayes‚Äô-theorem.html</link><guid isPermaLink="false">Rosen/7.3 Bayes‚Äô Theorem.md</guid><pubDate>Mon, 10 Mar 2025 11:18:57 GMT</pubDate></item><item><title><![CDATA[Binomial Coefficients and Identities]]></title><description><![CDATA[ 
 <br>As we remarked in Section 6.3, the  number of r-combinations from a set with n elements is often denoted by . This number is also called a binomial coefficient because these numbers occur as coefficients in the expansion of powers of binomial expressions such as . We will discuss the binomial theorem, which expresses a power of a binomial expression as a sum of terms involving binomial coefficients.<br><br>Definition: Binomial Theorem
 Let $$ and  be variables, and let  be a nonnegative integer. Then:

<br><br>Example 1:
Using combinatorial reasoning instead of multiplying out, the expansion is:

<br><br>Example 2:
Using the binomial theorem, the expansion is:

<br><br><br>Identity:

<br><br>Identity:

<br><br>Theorem: Pascal's Identity

<br><br>Pascal‚Äôs triangle provides a recursive way of computing binomial coefficients using Pascal‚Äôs identity.<br><br>Theorem: Vandermonde‚Äôs Identity

<br><br>Example 3:
Using the binomial theorem, the coefficient is:

<br><br>Exercise 1:
Find the expansion of  using the binomial theorem.
<br>Exercise 2:
What is the coefficient of  in ?
<br>Exercise 3:
Prove Pascal‚Äôs identity using a combinatorial argument.
<br>Solution 1: Expansion of  :::


<br>Solution 2: Coefficient of  :::
Using the binomial theorem:


<br>Reference: Book Page 415, PDF Page 1<br><br><br>next: <a data-href="6.5 Generalized Permutations and Combinations" href="rosen/6.5-generalized-permutations-and-combinations.html" class="internal-link" target="_self" rel="noopener nofollow">6.5 Generalized Permutations and Combinations</a><br>
previous: <a data-href="6.3 Permutations and Combinations" href="rosen/6.3-permutations-and-combinations.html" class="internal-link" target="_self" rel="noopener nofollow">6.3 Permutations and Combinations</a>]]></description><link>rosen/6.4-binomial-coefficients-and-identities.html</link><guid isPermaLink="false">Rosen/6.4 Binomial Coefficients and Identities.md</guid><pubDate>Mon, 10 Mar 2025 11:40:15 GMT</pubDate></item><item><title><![CDATA[Expected Value and Variance]]></title><description><![CDATA[ 
 <br><br>The expected value of a random variable is the sum over all elements in a sample space of the product of the probability of the element and the value of the random variable at this element. Consequently, the expected value is a weighted average of the values of a random variable. The expected value provides a central point for the distribution of values of this random variable. We can solve many problems using the expected value, such as determining who has an advantage in gambling games and computing the average-case complexity of algorithms. Another useful measure is variance, which tells us how spread out the values of a random variable are.<br><br>Definition 1:
The expected value (or expectation or mean) of the random variable $$ on the sample space  is defined as:

where  is the probability of  occurring.
<br>Example 1:
A fair die is rolled. The expected value of the number that appears is:

<br>Exercise 1:
What is the expected value when flipping a fair coin three times and counting the number of heads?
<br>Solution 1: :::
Using the definition of expected value and the sample space, we get:

<br>Reference: Book Page 477, PDF Page 1<br><br>Theorem 1:
If  are random variables, then:

<br>Example 2:
Suppose two fair dice are rolled. The expected value of the sum of the numbers is:

<br>Reference: Book Page 479, PDF Page 3<br><br>Definition 2:
The variance of a random variable is defined as:

The standard deviation is given by 
<br>Example 3:
Variance of a fair die roll:

<br>Reference: Book Page 487, PDF Page 10<br><br>Theorem 3 (Chebyshev‚Äôs Inequality):
If $$ is a random variable with mean  and variance  then for any 

<br>Example 4:
Applying Chebyshev‚Äôs inequality to a fair coin flipped times:

<br>Reference: Book Page 491, PDF Page 14<br><br>Exercise 2:
What is the expected number of times a 6 appears when rolling a fair die 10 times?
<br>Exercise 3:
Suppose a coin is biased with probability  of landing heads. What is the expected number of heads when flipped 10 times?
<br>Exercise 4:
A restaurant employee randomly returns hats to  customers. What is the expected number of correctly returned hats?
<br>Reference: Book Page 492, PDF Page 15<br><br><br>next:<br>
previous: <a data-href="7.3 Bayes‚Äô Theorem" href="rosen/7.3-bayes‚Äô-theorem.html" class="internal-link" target="_self" rel="noopener nofollow">7.3 Bayes‚Äô Theorem</a>]]></description><link>rosen/7.4-expected-value-and-variance.html</link><guid isPermaLink="false">Rosen/7.4 Expected Value and Variance.md</guid><pubDate>Mon, 10 Mar 2025 11:40:18 GMT</pubDate></item><item><title><![CDATA[Generalized Permutations and Combinations]]></title><description><![CDATA[ 
 <br><br>In many counting problems, elements may be used repeatedly. For instance, a letter or digit may be used more than once on a license plate. When a dozen donuts are selected, each variety can be chosen repeatedly. This contrasts with the counting problems discussed earlier in the chapter where we considered only permutations and combinations in which each item could be used at most once. In this section, we will show how to solve counting problems where elements may be used more than once.<br>Additionally, some counting problems involve indistinguishable elements. For instance, to count the number of ways the letters of the word SUCCESS can be rearranged, the placement of identical letters must be considered. This section describes how to solve counting problems in which some elements are indistinguishable.<br>This section also covers counting problems involving the placement of distinguishable elements into boxes, such as the number of ways poker hands can be dealt to four players.<br><br><br>%3E [!info] Theorem 1:<br>
The number of r-permutations of a set of n objects with repetition allowed is .
<br><br>Example 1:
How many strings of length  can be formed from the uppercase letters of the English alphabet?
<br>Solution 1: :::
By the product rule, because there are 26 uppercase English letters, and because each letter can be used repeatedly, the number of strings is .<br>
:::
<br>Reference: Book Page 423, PDF Page 1<br><br><br>Theorem 2:
The number of r-combinations from a set with  elements when repetition is allowed is:

<br><br>Example 2:
How many ways are there to select four pieces of fruit from a bowl containing apples, oranges, and pears?
<br>Solution 2: :::
Listing all the ways to choose four pieces gives 15 different ways.<br>
:::
<br><br>Example 3:
How many ways are there to select five bills from a cash box containing seven types of bills?
<br>Solution 3: :::
The number of ways corresponds to the number of ways to arrange six bars and five stars in a row, computed as .<br>
:::
<br>Reference: Book Page 424, PDF Page 2<br><br><br>Theorem 3:
The number of different permutations of  objects, where there are  indistinguishable objects of type 1,  of type 2, ..., and  of type k, is:

<br><br>Example 4:
How many different strings can be made by reordering the letters of the word SUCCESS?
<br>Solution 4: :::
Using the formula above, the number of different strings is .<br>
:::
<br>Reference: Book Page 428, PDF Page 6<br><br><br>Objects can be either distinguishable or indistinguishable, and boxes can also be distinguishable or indistinguishable.<br><br>Example 5:
How many ways are there to distribute hands of 5 cards to each of four players from a deck of 52 cards?
<br>Solution 5: :::
The total number of ways is given by:


<br>Reference: Book Page 429, PDF Page 7<br><br><br>Exercise 1:
In how many different ways can five elements be selected in order from a set with three elements when repetition is allowed?
<br>Exercise 2:
How many strings of six letters are there?
<br>Exercise 3:
How many ways are there to assign three jobs to five employees if each employee can be given more than one job?
<br>Exercise 4:
How many different strings can be made from the letters in MISSISSIPPI, using all the letters?
<br><br><br>next: <a data-href="6.6 Generating Permutations and Combinations" href="rosen/6.6-generating-permutations-and-combinations.html" class="internal-link" target="_self" rel="noopener nofollow">6.6 Generating Permutations and Combinations</a><br>
previous: <a data-href="6.3 Permutations and Combinations" href="rosen/6.3-permutations-and-combinations.html" class="internal-link" target="_self" rel="noopener nofollow">6.3 Permutations and Combinations</a>]]></description><link>rosen/6.5-generalized-permutations-and-combinations.html</link><guid isPermaLink="false">Rosen/6.5 Generalized Permutations and Combinations.md</guid><pubDate>Mon, 10 Mar 2025 11:18:54 GMT</pubDate></item><item><title><![CDATA[Generating Permutations and Combinations]]></title><description><![CDATA[ 
 <br><br>Methods for counting various types of permutations and combinations were described in the previous sections of this chapter, but sometimes permutations or combinations need to be generated, not just counted.<br><br>Any set with  elements can be placed in one-to-one correspondence with the set . We can list the permutations of any set of  elements by generating the permutations of the  smallest positive integers and then replacing these integers with the corresponding elements.<br><br>Definition 1: Lexicographic Order
A permutation  precedes permutation  if for some , where , we have , and .
<br>Example 1:
The permutation 23415 precedes 23514 because they agree in the first two positions, but the third position differs and 4 is smaller than 5.
<br><br>Example 2:
What is the next permutation in lexicographic order after 362541?
The last pair where  is . The least integer greater than 2 is 4. Swap 2 and 4 and sort the remaining numbers in increasing order: 364125.
<br><br>A combination is a subset. We use the correspondence between subsets of  and bit strings of length .<br><br>Definition 2: Binary Representation of a Combination
Each subset corresponds to a bit string, where a  in position  indicates  is in the subset.
<br>Example 3:
The next bit string after 1000100111 is 1000101000.
<br><br>Example 4:
Find the next larger 4-combination of  after .
The last term that is not at its maximum is 2. Increment to get .
<br><br>Exercise 1:
Place these permutations of  in lexicographic order: 43521, 15432, 45321, 23451, 23514, 14532, 21345, 45213, 31452, 31542.
<br>Exercise 2:
Use Algorithm 1 to generate the 24 permutations of the first four positive integers in lexicographic order.
<br>Exercise 3:
Use Algorithm 3 to list all the 3-combinations of .
<br><br>Solution 1: :::
The correct order is 15432, 21345, 23451, 23514, 31452, 31542, 43521, 45213, 45321.
<br>Solution 2: :::
The 24 permutations are generated following Algorithm 1.
<br>Reference: Book Page 434, PDF Page 1<br><br><br>next: <a data-href="7.1 An Introduction to Discrete Probability" href="rosen/7.1-an-introduction-to-discrete-probability.html" class="internal-link" target="_self" rel="noopener nofollow">7.1 An Introduction to Discrete Probability</a><br>
previous: <a data-href="6.5 Generalized Permutations and Combinations" href="rosen/6.5-generalized-permutations-and-combinations.html" class="internal-link" target="_self" rel="noopener nofollow">6.5 Generalized Permutations and Combinations</a>]]></description><link>rosen/6.6-generating-permutations-and-combinations.html</link><guid isPermaLink="false">Rosen/6.6 Generating Permutations and Combinations.md</guid><pubDate>Mon, 10 Mar 2025 11:18:09 GMT</pubDate></item><item><title><![CDATA[Permutations and Combinations]]></title><description><![CDATA[ 
 <br>Many counting problems can be solved by finding the number of ways to arrange a specified number of distinct elements of a set of a particular size, where the order of these elements matters. Other problems involve selecting elements where order does not matter. This section provides methods to answer such questions.<br><br>Definition 1: Permutation
A permutation of a set of distinct objects is an ordered arrangement of these objects. An ordered arrangement of r elements of a set is called an r-permutation.
<br><br>Example 1:
In how many ways can we select three students from a group of five students to stand in line for a picture?
Solution: There are 5 ways to select the first student, 4 ways to select the second, and 3 ways to select the third. Using the product rule, the total arrangements are:

<br>Example 2:
Let . The ordered arrangement  is a permutation of . The ordered arrangement  is a 2-permutation of .
<br><br>Theorem 1: Number of r-Permutations
If  is a positive integer and  is an integer with , then the number of r-permutations of a set with  distinct elements is given by:

<br><br>Definition 2: Combination
An r-combination of elements of a set is an unordered selection of r elements from the set.
<br><br>Example 3:
How many different committees of three students can be formed from a group of four students?
Solution: The number of ways to select three students from four is given by the binomial coefficient:

<br><br>Theorem 2: Number of r-Combinations
The number of r-combinations of a set with  elements is:

<br><br>Corollary 1: Symmetry of Combinations
For any nonnegative integers  and :

<br><br>Exercise 1:
List all the permutations of .
<br>Exercise 2:
Find the number of 5-permutations of a set with nine elements.
<br>Exercise 3:
How many poker hands of five cards can be dealt from a standard deck of 52 cards?
<br>Solution 3: :::
The number of ways to choose 5 cards from 52 is given by:

<br><br><br><br>next: <a data-href="6.4 Binomial Coefficients and Identities" href="rosen/6.4-binomial-coefficients-and-identities.html" class="internal-link" target="_self" rel="noopener nofollow">6.4 Binomial Coefficients and Identities</a><br>
previous: <a data-href="6.2 The Pigeonhole Principle" href="rosen/6.2-the-pigeonhole-principle.html" class="internal-link" target="_self" rel="noopener nofollow">6.2 The Pigeonhole Principle</a>]]></description><link>rosen/6.3-permutations-and-combinations.html</link><guid isPermaLink="false">Rosen/6.3 Permutations and Combinations.md</guid><pubDate>Mon, 10 Mar 2025 11:40:16 GMT</pubDate></item><item><title><![CDATA[Probability Theory]]></title><description><![CDATA[<a class="tag" href="?query=tag:not_ready" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#not_ready</a> 
 <br>2025-03-09<br>
<a href=".?query=tag:not_ready" class="tag" target="_blank" rel="noopener nofollow">#not_ready</a> <br><br>In Section 7.1, we introduced the notion of probability of an event. (Recall that an event is a subset of the possible outcomes of an experiment.) We defined the probability of an event  as Laplace did:<br><br>the number of outcomes in  divided by the total number of outcomes. This assumes that all outcomes are equally likely. However, many experiments have outcomes that are not equally likely. In this section, we define probabilities of outcomes to study probabilities of experiments where outcomes may not be equally likely.<br><br><br>Definition 1:
Suppose that  is a set with  elements. The uniform distribution assigns the probability  to each element of .
<br>Definition 2:
The probability of the event  is the sum of the probabilities of the outcomes in :

<br><br>p\left(\bigcup_i E_i\right) = \sum_i p(E_i).<br><br>p(E) = p(1) + p(3) + p(5) = \frac{1}{7} + \frac{2}{7} + \frac{1}{7} = \frac{4}{7}.<br><br>p(E | F) = \frac{p(E \cap F)}{p(F)}.<br><br>p(E | F) = \frac{5}{8}.<br><br>p(E \cap F) = p(E) p(F).<br>]]></description><link>rosen/7.2-probability-theory.html</link><guid isPermaLink="false">Rosen/7.2 Probability Theory.md</guid><pubDate>Mon, 10 Mar 2025 11:18:58 GMT</pubDate></item><item><title><![CDATA[The Basics of Counting]]></title><description><![CDATA[ 
 <br>Combinatorics, the study of arrangements of objects, is an important part of discrete mathematics. Enumeration, the counting of objects with certain properties, plays a significant role in various applications, including algorithm complexity, probability, and mathematical biology. This section introduces fundamental counting principles.<br><br><br>Suppose that a password on a computer system consists of six, seven, or eight characters. Each of these characters must be a digit or a letter of the alphabet. Each password must contain at least one digit. How many such passwords are there? The techniques needed to answer this question and a wide variety of other counting problems will be introduced in this section.<br>Counting problems arise throughout mathematics and computer science, such as in probability and algorithm analysis. This section introduces basic counting techniques that serve as the foundation for more advanced methods.<br><br><br><br>Definition: Product Rule
If a procedure consists of two sequential tasks, where the first task can be performed in  ways and for each of these, the second task can be performed in  ways, then the entire procedure can be performed in  ways.
<br>Example 1: Assigning Offices
A company has two employees and 12 offices. The first employee can choose any of 12 offices, and the second can choose from the remaining 11. The number of ways to assign offices is:<br>

<br><br>Example 2: License Plates
How many different license plates can be created with three uppercase letters followed by three digits?<br>

<br>Exercise 1:
A hotel has 20 floors, each with 30 rooms. How many rooms are there in total?
<br>Solution 1: :::
Using the product rule:<br>
 rooms.<br>
:::
<br><br><br>Definition: Sum Rule
If a task can be performed in either  ways or  ways, and no way is counted twice, then the number of ways to perform the task is .
<br>Example 3: Choosing a Representative
A committee must choose a representative who is either a mathematics professor (37 choices) or a mathematics student (83 choices). The total number of choices is:<br>

<br>Exercise 2:
A student can choose a project from one of three lists containing 20, 15, and 10 projects, respectively. How many total choices does the student have?
<br>Solution 2: :::
Using the sum rule:<br>
 projects.<br>
:::
<br><br><br>Some problems require using both the sum and product rules together.<br>Example 4: Passwords with a Digit
A password consists of 6, 7, or 8 characters, each being an uppercase letter or a digit, but must contain at least one digit.

<br>Total passwords of length 6: 
<br>Passwords of length 6 without a digit: 
<br>Valid passwords of length 6: 
<br>Repeat for lengths 7 and 8, then sum.

<br><br>Exercise 3:
How many 4-character strings using A, B, and C exist if repetition is allowed?
<br>Solution 3: :::
Since each position has 3 choices:<br>
 strings.<br>
:::
<br><br>Definition: Subtraction Rule
If a task can be performed in either  ways or  ways, but some ways overlap, the correct count is:<br>

<br>Example 5: Counting Bit Strings
How many 8-bit strings start with 1 or end with 00?

<br>Start with 1: 
<br>End with 00: 
<br>Start with 1 and end with 00: 
<br>Using inclusion-exclusion:<br>


<br>Exercise 4:
How many integers between 1 and 100 are divisible by 3 or 5?
<br>Solution 4: :::
Using inclusion-exclusion:

<br>Multiples of 3: 
<br>Multiples of 5: 
<br>Multiples of 15: 
<br>Applying the formula:<br>
:::

<br><br>Definition: Division Rule
If a procedure can be performed in  ways but each outcome is counted  times, then the number of distinct outcomes is .
<br>Example 6: Circular Arrangements
How many ways can four people sit around a circular table?

<br>Total arrangements: 
<br>Since rotations are equivalent, divide by 4:<br>


<br>Exercise 5:
How many ways can 5 people sit around a circular table?
<br>Solution 5: :::
 ways.<br>
:::
<br>Reference: Book Page 385 | PDF Page 1<br><br><br>next: <a data-href="6.2 The Pigeonhole Principle" href="rosen/6.2-the-pigeonhole-principle.html" class="internal-link" target="_self" rel="noopener nofollow">6.2 The Pigeonhole Principle</a><br>
previous: ]]></description><link>rosen/6.1-the-basics-of-counting.html</link><guid isPermaLink="false">Rosen/6.1 The Basics of Counting.md</guid><pubDate>Mon, 10 Mar 2025 11:40:21 GMT</pubDate></item><item><title><![CDATA[The Pigeonhole Principle]]></title><description><![CDATA[ 
 <br><br>Suppose that a flock of 20 pigeons flies into a set of 19 pigeonholes to roost. Because there are 20 pigeons but only 19 pigeonholes, at least one of these 19 pigeonholes must have at least two pigeons in it. This illustrates a general principle called the pigeonhole principle, which states that if there are more pigeons than pigeonholes, then there must be at least one pigeonhole with at least two pigeons in it.<br><br>Theorem 1  
If  is a positive integer and  or more objects are placed into  boxes, then there is at least one box containing two or more of the objects.
<br><br>Proof  
We prove the pigeonhole principle using a proof by contraposition. Suppose that none of the  boxes contains more than one object. Then the total number of objects would be at most . This is a contradiction, because there are at least  objects.
<br><br>Corollary 1  
A function  from a set with  or more elements to a set with  elements is not one-to-one.
<br><br>Proof  
Suppose that for each element  in the codomain of , we have a box that contains all elements  of the domain of  such that . Because the domain contains  or more elements and the codomain contains only  elements, the pigeonhole principle tells us that one of these boxes contains two or more elements  of the domain. This means that  cannot be one-to-one.
<br><br>Example 1  
Among any group of 367 people, there must be at least two with the same birthday, because there are only 366 possible birthdays.
<br>Example 2  
In any group of 27 English words, there must be at least two that begin with the same letter, because there are 26 letters in the English alphabet.
<br>Example 3  
How many students must be in a class to guarantee that at least two students receive the same score on the final exam, if the exam is graded on a scale from 0 to 100 points?
Solution: There are 101 possible scores on the final. The pigeonhole principle shows that among any 102 students, there must be at least two students with the same score.
<br><br>Theorem 2: Generalized Pigeonhole Principle  
If $ objects are placed into  boxes, then there is at least one box containing at least  objects.
<br><br>Proof  
Suppose that none of the boxes contains more than  objects. Then, the total number of objects is at most:<br>
This is a contradiction because there are a total of  objects.
<br><br>Example 4  
Show that for every integer , there is a multiple of  that has only 0s and 1s in its decimal expansion.
Solution: Let  be a positive integer. Consider the  integers  (where the last integer in this list has  ones in its decimal expansion). Since there are  possible remainders when an integer is divided by , the pigeonhole principle tells us that at least two of these integers must have the same remainder when divided by . Their difference is a multiple of  that consists only of 0s and 1s.
<br><br>Exercise 1:  
Show that in any set of six classes, each meeting regularly once a week on a particular day, there must be two that meet on the same day.
<br>Exercise 2:  
Show that if there are 30 students in a class, then at least two have last names that begin with the same letter.
<br>Exercise 3:  
A drawer contains a dozen brown socks and a dozen black socks, all unmatched. A person takes socks out at random in the dark.<br>
a) How many socks must be taken out to be sure that at least two socks of the same color are drawn?<br>
b) How many socks must be taken out to be sure that at least two black socks are drawn?
<br><br>Solution to Exercise 1 :::
Since there are seven days in a week, placing six classes into these seven days does not necessarily require duplication. However, if there were eight classes, at least two must fall on the same day by the pigeonhole principle.
<br>Solution to Exercise 2 :::
There are 26 letters in the English alphabet, and 30 students. By the pigeonhole principle, at least two students must share a last name initial.
<br>Solution to Exercise 3 :::
(a) Since there are only two colors, taking three socks guarantees at least two of the same color (pigeonhole principle).<br>
(b) To ensure two black socks, the worst case is drawing all 12 brown socks first. Then, taking two more guarantees two black socks. The answer is 14.
<br><br><br>next: <a data-href="6.3 Permutations and Combinations" href="rosen/6.3-permutations-and-combinations.html" class="internal-link" target="_self" rel="noopener nofollow">6.3 Permutations and Combinations</a><br>
previous: <a data-href="6.1 The Basics of Counting" href="rosen/6.1-the-basics-of-counting.html" class="internal-link" target="_self" rel="noopener nofollow">6.1 The Basics of Counting</a>]]></description><link>rosen/6.2-the-pigeonhole-principle.html</link><guid isPermaLink="false">Rosen/6.2 The Pigeonhole Principle.md</guid><pubDate>Mon, 10 Mar 2025 11:18:59 GMT</pubDate></item><item><title><![CDATA[Conditional Statements]]></title><description><![CDATA[ 
 <br><br>A conditional statement (or implication) is an if-then statement. It establishes a relationship between two propositions:  <br>
<br>The hypothesis (p) is the first part of the statement.
<br>The conclusion (q) is the second part of the statement.<br>
It is written as p ‚Üí q, meaning "if p, then q."
<br>Example:  <br>
<br>Statement: If it is raining, then it is cloudy.  

<br>p = "It is raining."  
<br>q = "It is cloudy."  
<br>Symbolically: p ‚Üí q


<br><br><br>Truth Table for Conditional Statements
The truth value of a conditional statement p ‚Üí q depends on the values of p and q.


<br>The only case where p ‚Üí q is false is when p is true and q is false.

<br><br><br>What is the Converse?

<br>The converse of p ‚Üí q is q ‚Üí p.
<br>The original statement and its converse are not necessarily logically equivalent.

Example:  

<br>Statement: "If it is raining, then it is cloudy." (p ‚Üí q)  
<br>Converse: "If it is cloudy, then it is raining." (q ‚Üí p)  
<br>The original statement may be true while its converse is false.

<br><br><br>What is the Contrapositive?

<br>The contrapositive of p ‚Üí q is ¬¨q ‚Üí ¬¨p.
<br>A statement and its contrapositive are logically equivalent.

Example:  

<br>Statement: "If it is raining, then it is cloudy." (p ‚Üí q)  
<br>Contrapositive: "If it is not cloudy, then it is not raining." (¬¨q ‚Üí ¬¨p)  
<br>Since the contrapositive is always logically equivalent to the original statement, both must have the same truth value.

<br><br><br>Equivalent Forms of p ‚Üí q
The following statements are all equivalent to p ‚Üí q:

<br>"If p, then q."
<br>"p implies q."
<br>"p is sufficient for q."
<br>"q if p."
<br>"q whenever p."
<br>"p only if q."
<br>"q is necessary for p."

<br><br><br>Which of the following is equivalent to "If an animal is a buffalo, then it is a mammal"?

<br>‚úÖ "Being a buffalo is sufficient for being a mammal."
<br>‚úÖ "An animal is a buffalo only if it is a mammal."
<br>‚ùå "Being a mammal is sufficient for being a buffalo."
<br>‚ùå "An animal is a mammal only if it is a buffalo."
<br>‚úÖ "Being a mammal is a necessary condition for being a buffalo."
<br>‚ùå "An animal x is a mammal implies that x is a buffalo."

<br><br><br>What is a Biconditional Statement?

<br>A biconditional statement asserts that p ‚Üí q and q ‚Üí p are both true.
<br>It is written as p ‚Üî q ("p if and only if q") and means p and q are logically equivalent.

Example:  

<br>"If x + 2 = 7, then x = 5." (p ‚Üí q)  
<br>"If x = 5, then x + 2 = 7." (q ‚Üí p)  
<br>Since both are true, we can write x + 2 = 7 ‚Üî x = 5.

Truth Table for Biconditional Statements:

<br><br><br>Determine the Converse, Contrapositive, and Biconditional Forms

<br>Write the converse of:  

<br>"If a number is even, then it is divisible by 2."


<br>Write the contrapositive of:  

<br>"If an animal is a dog, then it is a mammal."


<br>Determine if the following biconditional is true or false:  

<br>"x is an even integer if and only if x is divisible by 2."


<br>Convert the following statement into p ‚Üí q form:  

<br>"An animal is a fish only if it can live in water."



<br><br><br>Click to reveal solutions

<br>Converse:  

<br>"If a number is divisible by 2, then it is even."


<br>Contrapositive:  

<br>"If an animal is not a mammal, then it is not a dog."


<br>Biconditional Truth Value:  

<br>‚úÖ True (All even integers are divisible by 2, and all numbers divisible by 2 are even.)


<br>Rewriting as p ‚Üí q:  

<br>"If an animal is a fish, then it can live in water."



]]></description><link>rosen-videos/conditional-statements.html</link><guid isPermaLink="false">Rosen Videos/Conditional Statements.md</guid><pubDate>Sat, 01 Mar 2025 23:20:35 GMT</pubDate></item><item><title><![CDATA[Direct Proofs]]></title><description><![CDATA[ 
 <br><br>A direct proof is a method of proving a conditional statement of the form "if P, then Q" (). This method involves assuming the hypothesis  and using logical reasoning to conclude .<br>Key Concept: Direct Proof  

<br>A direct proof follows this general structure:

<br>Assume  (the hypothesis).
<br>Use definitions and logical reasoning to derive .
<br>Conclude  (the result).  


<br>Example Template:  

<br>To prove: "If , then "  
<br>Proof:  

<br>Assume .  
<br>Apply known definitions and properties.  
<br>Show that  must be true.  
<br>Conclude . ‚ñ†





<br><br><br>Example 1: Proving a Sum of Odd Integers is Even  
Statement:<br>
If  is an odd integer and  is an odd integer, then  is an even integer.  
Proof:  

<br>Define odd integers: An integer is odd if it can be written as  for some integer .  
<br>Assume the hypothesis:  

<br>Let  for some integer .  
<br>Let  for some integer .  


<br>Compute the sum:  



<br>Factor out 2:  


<br>Since  is an integer, let .  
<br>Thus, , which matches the definition of an even integer.  


<br>Conclusion:  is even. ‚ñ†

<br><br><br>Exercise 1  
Prove that the product of two odd integers is odd using a direct proof.
<br>Exercise 2  
Prove that the square of any even integer is even.
<br>Exercise 3  
Prove that the sum of any two even integers is even.
<br><br><br>Click to reveal solutions  

<br>
Exercise 1 Solution:  

<br>To prove: If  and  are odd, then  is odd.  
<br>Proof:  

<br>Assume  and  for some integers .  
<br>Compute :  




<br>Since  is an integer, call it .  
<br>Then , which is odd.  
<br>Conclusion: The product of two odd numbers is odd. ‚ñ†  




<br>
Exercise 2 Solution:  

<br>To prove: If  is even, then  is even.  
<br>Proof:  

<br>Assume  is even, so  for some integer .  
<br>Compute :  



<br>Since  is an integer, call it .  
<br>Then , which is even.  
<br>Conclusion: The square of an even number is even. ‚ñ†  




<br>
Exercise 3 Solution:  

<br>To prove: If  and  are even, then  is even.  
<br>Proof:  

<br>Assume  and  for some integers .  
<br>Compute :  



<br>Since  is an integer, call it .  
<br>Then , which is even.  
<br>Conclusion: The sum of two even numbers is even. ‚ñ†





<br><br><br><a rel="noopener nofollow" class="external-link" href="https://cs.du.edu/~ftl/2300/resources/Ch5/2300.5.1aProofByInduction.10.20.mp4" target="_blank">https://cs.du.edu/~ftl/2300/resources/Ch5/2300.5.1aProofByInduction.10.20.mp4</a>]]></description><link>rosen-videos/direct-proofs.html</link><guid isPermaLink="false">Rosen Videos/Direct Proofs.md</guid><pubDate>Wed, 05 Mar 2025 22:15:58 GMT</pubDate></item><item><title><![CDATA[Logic and English Sentences]]></title><description><![CDATA[ 
 <br><br>When converting English sentences into mathematical propositions, we remove the ambiguity often inherent in natural language. This worksheet will guide you through key concepts, examples, and exercises to strengthen your understanding of logical translation.<br>Key Concept: Translating English to Logic
Logical expressions provide precise representations of statements by eliminating ambiguity. Key logical operators include:

<br>Negation (¬¨): "not"
<br>Conjunction (‚àß): "and"
<br>Disjunction (‚à®): "or"
<br>Implication (‚Üí): "if... then..."
<br>Biconditional (‚Üî): "if and only if"

<br><br><br>Example 1
English Sentence:<br>
"Pat is enrolled in an ASEM even though they are not a junior or a senior."
Propositional Translation:

<br>Let p: Pat is enrolled in an ASEM.
<br>Let q: Pat is a junior.
<br>Let r: Pat is a senior.

Logical Expression:  

Using DeMorgan‚Äôs laws:  

Reworded for clarity:<br>
"Pat is enrolled in an ASEM and they are not a junior and they are not a senior."
<br><br>Example 2
English Sentence:<br>
"You can‚Äôt enroll in COMP 3159 unless you have passed either COMP 2300 or MATH 2200 as well as COMP 1353."
Propositional Translation:

<br>Let p: You can enroll in COMP 3159.
<br>Let q: You passed COMP 2300.
<br>Let r: You passed MATH 2200.
<br>Let s: You passed COMP 1353.

Logical Expression:  

Explanation:  

<br>The word "unless" introduces necessary conditions.
<br>Precedence of operations: NOT (¬¨), AND (‚àß), OR (‚à®).
<br>This is a conditional, not a biconditional, since other restrictions might apply.

<br><br><br>Exercise 1
Translate the following sentence into a logical proposition:<br>
"A student will pass the course if they complete all assignments and score at least 50% on the final exam."
<br>Exercise 2
Modify the logical expression from Example 2 using the contrapositive.
<br>Exercise 3
Reword the logical statement p ‚Üí (q ‚à® r) ‚àß s into clear, unambiguous English.
<br><br><br>Click to reveal solutions

<br>
Exercise 1 Solution:<br>
Let p: The student passes the course.<br>
Let q: The student completes all assignments.<br>
Let r: The student scores at least 50% on the final exam.<br>
Logical Expression:  


<br>
Exercise 2 Solution:<br>
Original: <br>
Contrapositive: 

<br>
Exercise 3 Solution:<br>
"If a student is enrolled in COMP 3159, then they must have passed either COMP 2300 or MATH 2200, and they must have passed COMP 1353."


]]></description><link>rosen-videos/logic-and-english-sentences.html</link><guid isPermaLink="false">Rosen Videos/Logic and English Sentences.md</guid><pubDate>Wed, 05 Mar 2025 01:14:07 GMT</pubDate></item><item><title><![CDATA[Logic and English Sentences (Revisited)]]></title><description><![CDATA[ 
 <br><br>Mathematical statements written in English often contain hidden conditionals and hidden quantifiers. Translating these statements into logical notation helps clarify their meaning and validity.<br>Key Concept: Translating English into Logic

<br>Hidden Quantifiers: Some English statements imply universal or existential quantifiers even if they are not explicitly stated.
<br>Hidden Conditionals: Many statements implicitly follow an "if-then" structure.
<br>Converse Statements: If a conditional statement is "if P, then Q", its converse is "if Q, then P".

<br><br><br>Example 1: Hidden Quantifier  
English Sentence:<br>
"If a number is divisible by 6, then it is divisible by both 2 and 3."
Logical Translation:  

Explanation:  

<br>The phrase "a number" implies a universal quantifier (‚àÄn).
<br>The "if-then" structure suggests a conditional statement.
<br>This statement is true.

<br><br>Example 2: Hidden Conditional  
English Sentence:<br>
"Continuous functions are differentiable."
Logical Translation:  

Explanation:  

<br>This sentence implies a universal quantifier (‚àÄf).
<br>It assumes an if-then relationship between continuity and differentiability.
<br>This statement is false because there exist continuous functions that are not differentiable (e.g.,  at ).

<br>
Converse Statement:<br>
The converse of the statement is:


<br>This statement is true.

<br><br><br>Exercise 1  
Identify the hidden quantifier and translate the following sentence into logical notation:<br>
"All prime numbers greater than 2 are odd."
<br>Exercise 2  
Identify the hidden conditional and translate the following statement into logical notation:<br>
"A function is integrable if it is continuous."<br>
Then, determine whether the statement is true or false.
<br>Exercise 3  
Find the converse of the following statement:<br>
"If a function is differentiable, then it is continuous."<br>
Is the converse true or false?
<br><br><br>Click to reveal solutions  

<br>
Exercise 1 Solution:  

<br>The phrase "All prime numbers greater than 2" suggests a universal quantifier.
<br>Logical translation:  




<br>
Exercise 2 Solution:  

<br>The phrase "if it is continuous" suggests a conditional statement.
<br>Logical translation:  


<br>Truth value: True in many cases, but false in general (e.g., Dirichlet function).


<br>
Exercise 3 Solution:  

<br>The converse of "If a function is differentiable, then it is continuous" is:  


<br>This statement is false (e.g.,  is continuous but not differentiable at ).



]]></description><link>rosen-videos/logic-and-english-sentences-(revisited).html</link><guid isPermaLink="false">Rosen Videos/Logic and English Sentences (Revisited).md</guid><pubDate>Sat, 01 Mar 2025 23:00:29 GMT</pubDate></item><item><title><![CDATA[Logical Operators, Not, And, Or]]></title><description><![CDATA[ 
 <br><br>Logical operators allow us to manipulate and combine propositions in a structured way. This worksheet explores the fundamental logical operators Not (¬¨), And (‚àß), and Or (‚à®), along with their truth tables and common misunderstandings in natural language.<br><br>Logical Operators Overview

<br>Negation (¬¨p): Flips the truth value of a statement.
<br>Conjunction (p ‚àß q): True only when both statements are true.
<br>Disjunction (p ‚à® q): True if at least one of the statements is true.
<br>Exclusive-Or (p ‚äï q): True if exactly one of the statements is true.

<br><br><br>The Logical Operator Not

<br>The negation operator, ¬¨p, reverses the truth value of a proposition.
<br>It is written as ¬¨p, though some texts use ‚àºp or !p.
<br>Truth table:


<br><br><br>The Logical Operator And

<br>The logical AND operator, p ‚àß q, is true only when both p and q are true.
<br>Otherwise, it is false.
<br>Truth table:


<br><br><br>The Logical Operator Or

<br>The logical OR operator, p ‚à® q, is true if at least one of the statements is true.
<br>It follows inclusive OR, meaning both can be true.
<br>Truth table:


<br><br><br>The Logical Operator XOR

<br>The exclusive-or (‚äï) operator is true if exactly one of the statements is true.
<br>It is false if both are false or both are true.
<br>Truth table:


<br><br><br>How "Or" is used in English vs. Mathematics:

<br>Mathematical OR (‚à®): At least one must be true.
<br>Exclusive OR (‚äï): Exactly one must be true.
<br>Conditional OR (¬¨p ‚Üí ¬¨q): If one thing does not happen, then another cannot.

Examples:

<br>"You may have cake or ice cream."  

<br>Likely exclusive OR (‚äï), meaning you cannot have both.  


<br>"Clean your room or you can't watch the movie."  

<br>This translates to ¬¨p ‚Üí ¬¨q ("If you don‚Äôt clean, you can‚Äôt watch").


<br>"Get your homework or chores done before dinner."  

<br>This follows mathematical OR (p ‚à® q), meaning at least one must be completed.



<br><br><br>Identify the Correct Logical Operator

<br>Negation (¬¨): What is the negation of the statement "The Earth is round"?
<br>AND (‚àß): Fill in the missing truth value: If p = T and q = F, what is p ‚àß q?
<br>OR (‚à®): Determine whether the following statements follow inclusive OR:

<br>"I will go to the park or the library."


<br>XOR (‚äï): Which of the following is an example of XOR in everyday language?

<br>a) "You can have coffee or tea, but not both."
<br>b) "You must finish your work or you won‚Äôt be paid."



<br><br><br>Click to reveal solutions

<br>Negation (¬¨): The negation of "The Earth is round" is "The Earth is not round."
<br>AND (‚àß): If p = T and q = F, then p ‚àß q = F.
<br>OR (‚à®): "I will go to the park or the library." follows inclusive OR (both can be true).
<br>XOR (‚äï):

<br>(a) "You can have coffee or tea, but not both." (‚úÖ This is XOR)
<br>(b) "You must finish your work or you won‚Äôt be paid." (‚ùå This is a conditional statement)



]]></description><link>rosen-videos/logical-operators,-not,-and,-or.html</link><guid isPermaLink="false">Rosen Videos/Logical Operators, Not, And, Or.md</guid><pubDate>Sat, 01 Mar 2025 23:21:09 GMT</pubDate></item><item><title><![CDATA[Mathematical Propositions Worksheet]]></title><description><![CDATA[ 
 <br><br>A mathematical proposition is a sentence that is either true or false, but not both. Some texts refer to this as a mathematical statement. Understanding propositions is fundamental to logic and mathematical reasoning.<br><br>Mathematical Propositions

<br>A proposition (or statement) is a sentence that has a definite truth value.
<br>It is either true (T) or false (F), but never both.
<br>Common variables used to represent propositions: p, q, r, s.
<br>Example: Let p be the statement "2 + 2 = 4".  

<br>Since this is a sentence that is either true or false, p is a proposition.  
<br>Its truth value is true (T).



<br><br>Propositions (Valid Statements)

<br>"All primes are odd."  
<br>"Beyonc√© is the artist with the most Grammy Awards of all time."  
<br>"For all real numbers , ."  
<br>"Every even integer greater than 2 can be expressed as the sum of two primes."

<br>Non-Propositions (Not valid statements)

<br>"Math is fun." (Opinion, no definite truth value)
<br>"Go directly to jail, do not pass 'Go', do not collect $200." (Command, not a statement)
<br>"." (Has an undefined variable , so not a proposition)
<br>"This sentence is false." (Self-referential paradox)

<br><br>What is a Propositional Function?
A propositional function (also called an open sentence) is a sentence with at least one free variable whose truth value depends on the variable‚Äôs value.<br>
Example: Let P(x) be the statement "x &gt; 3".

<br>The truth value of P(x) depends on x.
<br>P(0) is false.
<br>P(5) is true.
<br>If not explicitly stated, we assume a default universe of values (e.g., real numbers ).

<br><br>Identify whether each of the following is a proposition:

<br>"The sun is made of cheese."
<br>"."
<br>"All even numbers are divisible by 2."
<br>"Take out the trash."
<br>"Some numbers are prime."

<br>True or False? Determine the truth value of each proposition:

<br>"The sum of two even numbers is always even."
<br>"There exists a real number  such that ."
<br>"Every prime number is odd."
<br>"For all real numbers , ."

<br><br>Click to reveal solutions

<br>
Identify Propositions:

<br>‚úÖ Proposition (False)
<br>‚ùå Not a proposition (contains a variable)
<br>‚úÖ Proposition (True)
<br>‚ùå Not a proposition (Command)
<br>‚úÖ Proposition (True)


<br>
Truth Values:

<br>‚úÖ True  
<br>‚ùå False (No real number satisfies this)  
<br>‚ùå False (2 is prime but not odd)  
<br>‚úÖ True (By definition of squares)



]]></description><link>rosen-videos/mathematical-propositions-worksheet.html</link><guid isPermaLink="false">Rosen Videos/Mathematical Propositions Worksheet.md</guid><pubDate>Sat, 01 Mar 2025 23:21:26 GMT</pubDate></item><item><title><![CDATA[Negating Expressions]]></title><description><![CDATA[ 
 <br><br>Negation is a fundamental operation in logic that reverses the truth value of a statement. When negating compound statements and quantified expressions, we follow specific logical rules such as DeMorgan‚Äôs Laws and negation of quantifiers.<br>Key Concept: Rules for Negation  

<br>DeMorgan‚Äôs Laws:

<br>
<br>


<br>Negation of Quantifiers:

<br>
<br>


<br>Negation of a Conditional Statement:

<br>



<br><br><br>Example 1: Negating a Universal Statement  
Statement:<br>
"For every real number ,  is a real number."
Logical Form:  

Negation:  

Interpretation:  

<br>The negation states that there exists at least one real number  such that  is not a real number.  
<br>This is true when , since  is undefined.

<br><br>Example 2: Negating a Conditional Statement  
Statement:<br>
"If  is divisible by 4, then  is divisible by 4."
Logical Form:  

Negation:  

Interpretation:  

<br>The negation states that there exists an integer  such that  divides , but 4 does not divide .  
<br>Example: Let , then , which is divisible by 4, but  is not divisible by 4.  
<br>This counterexample proves that the original statement is false.

<br><br><br>Exercise 1  
Negate the following statement:<br>
"For all integers ,  is greater than or equal to ."  
<br>Exercise 2  
Negate the following existentially quantified statement:<br>
"There exists an integer  such that ."  
<br>Exercise 3  
Negate the following conditional statement and simplify:<br>
"If a number is even, then its square is even."  
<br><br><br>Click to reveal solutions  

<br>
Exercise 1 Solution:  

<br>Original statement:  


<br>Negation:  


<br>Example:  satisfies , proving the negation is true.


<br>
Exercise 2 Solution:  

<br>Original statement:  


<br>Negation:  


<br>This means there is no integer solution to the equation. Checking,  and  satisfy the equation, so the original statement is true, making its negation false.


<br>
Exercise 3 Solution:  

<br>Original statement:  


<br>Negation:  


<br>Interpretation: The negation states that there exists an even number whose square is odd.  
<br>Since no such number exists, the negation is false, meaning the original statement is true.



]]></description><link>rosen-videos/negating-expressions.html</link><guid isPermaLink="false">Rosen Videos/Negating Expressions.md</guid><pubDate>Sat, 01 Mar 2025 23:00:47 GMT</pubDate></item><item><title><![CDATA[Nested Quantifiers]]></title><description><![CDATA[ 
 <br><br>In mathematical logic, we often encounter nested quantifiers, where multiple quantifiers (universal and existential) are used in the same statement. The order of these quantifiers is crucial, as it can significantly change the meaning of a statement. Additionally, negating statements with nested quantifiers requires a systematic approach.<br>Key Concept: Nested Quantifiers  

<br>Universal quantifier (‚àÄ): Applies to all elements in a given domain.
<br>Existential quantifier (‚àÉ): Claims the existence of at least one element in a given domain.
<br>Order matters:  

<br> means for each , there exists a  such that  holds.
<br> means there is a single  that works for all .


<br>Negating nested quantifiers:  

<br>Move from left to right, swapping ‚àÄ and ‚àÉ, and negating the inner statement.



<br><br><br>Example 1: Translating a Nested Quantifier  
English Statement:<br>
"Every natural number  has a natural number  smaller than it."  
Symbolic Form:  

Analysis:  

<br>If , we can choose , satisfying the statement.
<br>However, for , no natural number  is smaller than .
<br>Conclusion: The statement is false because  serves as a counterexample.

<br><br>Example 2: Order of Quantifiers Matters  
Consider the following two statements:  

<br>  
<br>  

Analysis:  

<br>The first statement is true, since every real number  has a cube root .
<br>The second statement is false, because it implies there exists a single  that is the cube root of all real numbers , which is impossible.
<br>Conclusion: Changing the order of quantifiers can change a true statement into a false one.

<br><br>Example 3: Negating a Nested Quantifier  
Original Statement:  

Negation:  

<br>Apply negation:  


<br>Swap  with :  


<br>Swap  with :  


<br>Simplify  to :  



Interpretation:  

<br>There exists a natural number  such that all natural numbers  are greater than or equal to .
<br>This is true for , since no natural number is smaller than 0.

<br><br><br>Exercise 1  
Write the following statement using nested quantifiers:<br>
"For every integer, there is an even number that is greater than it."
<br>Exercise 2  
Translate the following quantified statement into English:  

Then determine whether the statement is true or false.
<br>Exercise 3  
Negate the following quantified statement and simplify:  

<br><br><br>Click to reveal solutions  

<br>Exercise 1 Solution:  

<br>Symbolic Form:  


<br>Interpretation:  

<br>For every integer , we can always find an even number  that is greater than  (e.g.,  for odd ,  for even ).
<br>This statement is true.





<br>

<br>Exercise 2 Solution:  

<br>English Interpretation:  

<br>"There exists a real number  such that for all real numbers , ."


<br>Analysis:  

<br>The only number that satisfies  for all  is .
<br>Since  exists, the statement is true.





<br>

<br>Exercise 3 Solution:  

<br>Original Statement:  


<br>Negation Process:  



<br>Interpretation:  

<br>"There exists an integer  such that for all integers , ."
<br>No such  exists because for every integer , we can always find  such that .
<br>The negated statement is false, meaning the original statement is true.





]]></description><link>rosen-videos/nested-quantifiers.html</link><guid isPermaLink="false">Rosen Videos/Nested Quantifiers.md</guid><pubDate>Sat, 01 Mar 2025 23:00:57 GMT</pubDate></item><item><title><![CDATA[Pigeon Hole Principle]]></title><description><![CDATA[ 
 <br><br>The Pigeonhole Principle is a fundamental concept in combinatorics and discrete mathematics. It asserts that if more items (pigeons) are distributed across fewer containers (pigeonholes) than there are items, at least one container must hold more than one item. This seemingly simple idea has profound implications and applications in various fields, including computer science, number theory, and probability.<br><br>Info
The Pigeonhole Principle: If  items are placed into  containers, and , then at least one container must contain more than one item.
<br><br>Example
Example 1: Sock Drawer Problem
Imagine you have a drawer containing a mix of black and blue socks. If you randomly pull out three socks, the Pigeonhole Principle guarantees that you will have at least one matching pair. This is because there are only two colors (pigeonholes), and pulling out three socks (pigeons) ensures that at least one color is repeated.
<br>Example
Example 2: Handshaking Dilemma
In a group of six people, each person shakes hands with others. The Pigeonhole Principle implies that at least two individuals have shaken hands with the same number of people. Since each person can shake hands with 0 to 5 others, there are six possible handshake counts (pigeonholes). However, if one person shakes hands with 0 people, it's impossible for another to have shaken hands with all 5 others, reducing the possible counts to five. With six people (pigeons) and only five possible handshake counts (pigeonholes), at least two must share the same count.
<br><br>Question
Exercise 1: Birthday Paradox
How many people must be in a room to guarantee that they share a birthday?
<br>Question
Exercise 2: Number Selection
From the set of integers , select any 6 numbers. Prove that at least two of the selected numbers will sum to 11.
<br>Question
Exercise 3: Points in a Square
Given five points placed inside a square with a side length of 2 units, prove that there exists a pair of these points that are within  units of each other.
<br><br>Solutions (Click to expand)
Solution 1:<br>
By the Pigeon Hole Principle, 366 people!
Solution 2:
Pair the numbers as follows: . Each pair sums to 11. If you select 6 numbers, by the Pigeonhole Principle, at least one pair must be chosen, ensuring a sum of 11.
Solution 3:
Divide the square into four smaller squares, each with a side length of 1 unit. By the Pigeonhole Principle, placing 5 points into these 4 smaller squares means at least one square contains at least two points. The maximum distance between any two points within a 1x1 square is the diagonal, which is  units. Therefore, at least one pair of points is within  units of each other.
<br><br>
<br>Video Explanation: For a deeper understanding and more complex problems related to the Pigeonhole Principle, consider watching the following video:
<br><a data-tooltip-position="top" aria-label="https://www.youtube.com/watch?v=nNiSjvqPZs4" rel="noopener nofollow" class="external-link" href="https://www.youtube.com/watch?v=nNiSjvqPZs4" target="_blank"></a><img alt="Harder Pigeonhole Principle Problems" src="https://img.youtube.com/vi/nNiSjvqPZs4/0.jpg" referrerpolicy="no-referrer">]]></description><link>rosen-videos/pigeon-hole-principle.html</link><guid isPermaLink="false">Rosen Videos/Pigeon Hole Principle.md</guid><pubDate>Tue, 04 Mar 2025 21:19:29 GMT</pubDate><enclosure url="https://img.youtube.com/vi/nNiSjvqPZs4/0.jpg" length="0" type="image/jpeg"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://img.youtube.com/vi/nNiSjvqPZs4/0.jpg&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Proof by Cases]]></title><description><![CDATA[ 
 <br><br>A proof by cases is a method used when a statement depends on multiple possibilities. Instead of proving the statement for all values at once, we split the proof into separate cases and prove each one individually. If all cases lead to the conclusion, then the original statement is proven.<br>Key Concept: Proof by Cases  

<br>Used when a statement depends on different possibilities (e.g.,  is even or odd).  
<br>The proof is divided into exhaustive cases covering all possibilities.  
<br>Each case is proven individually, and if all cases lead to the desired conclusion, the proof is complete.  
<br>Template for Proof by Cases:  

<br>To prove: A statement  for all integers .  
<br>Proof:  

<br>Case 1: Assume  satisfies condition , prove .  
<br>Case 2: Assume  satisfies condition , prove .  
<br>Since all cases lead to , the statement holds for all . ‚ñ†  





<br><br><br>Example 1: Proving  is Even for all Integers   
Statement: Prove that for all integers , the expression  is even.  
Proof (by cases):  
Case 1:  is even  

<br>If  is even, then  for some integer .  
<br>Compute :  


<br>Factor out 2:  


<br>Since  is an integer, the expression is even.  

Case 2:  is odd  

<br>If  is odd, then  for some integer .  
<br>Compute :  


<br>Factor out 2:  


<br>Since  is an integer, the expression is even.  

Conclusion: In both cases,  is even. Since every integer is either even or odd, the proof is complete. ‚ñ†
<br><br><br>Exercise 1  
Prove by cases that the product of any two consecutive integers is even.
<br>Exercise 2  
Prove that for any integer , the expression  is always even.
<br>Exercise 3  
Prove by cases that for any integer , the expression  is always divisible by 6.
<br><br><br>Click to reveal solutions  

<br>
Exercise 1 Solution (Product of Consecutive Integers is Even):  

<br>Consider two consecutive integers  and .  
<br>Case 1:  is even. Then  is even.  
<br>Case 2:  is odd. Then  is even, so  is even.  
<br>Since one of the two numbers is always even, their product is always even. ‚ñ†  


<br>
Exercise 2 Solution ( is Even):  

<br>Case 1: If  is even, then  for some .  


<br>Since  is an integer,  is even.  


<br>Case 2: If  is odd, then .  


<br>Again,  is even.  


<br>Since all cases lead to an even result, the proof is complete. ‚ñ†  


<br>
Exercise 3 Solution ( is Divisible by 6):  

<br>To prove  is divisible by 6, we show it is divisible by both 2 and 3.  
<br>Case 1:  (Even )  

<br> is a product of three consecutive integers, which contains at least one factor of 2.  


<br>Case 2:  (Odd )  

<br>Again, the product  contains an even factor.  


<br>Divisibility by 3:  

<br>Any three consecutive numbers include a multiple of 3.  


<br>Since  is divisible by both 2 and 3, it must be divisible by 6. ‚ñ†



]]></description><link>rosen-videos/proof-by-cases.html</link><guid isPermaLink="false">Rosen Videos/Proof by Cases.md</guid><pubDate>Sat, 01 Mar 2025 23:01:04 GMT</pubDate></item><item><title><![CDATA[Proof by Contradiction]]></title><description><![CDATA[ 
 <br><br>A proof by contradiction is a technique used to prove a statement  by assuming its negation  and deriving a contradiction. When we reach a statement of the form  (a contradiction), we conclude that our assumption  must be false, meaning  is true.<br>Key Concept: Proof by Contradiction  

<br>Assume the negation of the statement you want to prove.  
<br>Use logical reasoning and known properties to derive conclusions.  
<br>Arrive at a contradiction (e.g., ).  
<br>Conclude that the original assumption must have been false, proving .  
<br>Template for Proof by Contradiction:  

<br>To prove:   
<br>Proof:  

<br>Assume .  
<br>Follow logical reasoning.  
<br>Derive a contradiction: .  
<br>Conclude . ‚ñ†





<br><br><br>Example 1: Proving  is Irrational  
Statement: Prove that  is irrational.  
Proof (by contradiction):  

<br>Assume the negation: Suppose  is rational, meaning there exist integers  such that:  


<br>Square both sides:  


<br>Since  is even,  must be even.  

<br>Let  for some integer .  
<br>Substituting, we get:  




<br>Divide by 2:  


<br>Since  is even,  must also be even.  


<br>Contradiction:  

<br>If both  and  are even, then they share a common factor of 2, contradicting the assumption that  was in simplest form.  


<br>Conclusion: Our assumption was false, so  must be irrational. ‚ñ†

<br><br><br>Exercise 1  
Prove by contradiction that there are infinitely many prime numbers.
<br>Exercise 2  
Prove that  is not a rational root of the equation , using proof by contradiction.
<br>Exercise 3  
Prove that if  is not divisible by 3, then  is not divisible by 3, using proof by contradiction.
<br><br><br>Click to reveal solutions  

<br>
Exercise 1 Solution (Infinitely Many Primes):  

<br>Assume the negation: Suppose there are only finitely many prime numbers, say .  
<br>Consider the number:  


<br> is not divisible by any of  because it leaves a remainder of 1 when divided.  
<br>But every integer must have a prime factor, meaning  must be divisible by some prime not in our original list.  
<br>Contradiction: There must be more primes than .  
<br>Conclusion: There are infinitely many prime numbers. ‚ñ†  


<br>
Exercise 2 Solution (No Rational Root ):  

<br>Assume the negation: Suppose  is a root of .  
<br>Substituting :  


<br>Simplify:  





<br>Contradiction: , so our assumption was false.  
<br>Conclusion:  is not a root of the equation. ‚ñ†  


<br>
Exercise 3 Solution (Divisibility by 3):  

<br>To prove: If  is not divisible by 3, then  is not divisible by 3.  
<br>Assume the negation: Suppose  is divisible by 3.  
<br>Then  for some integer .  
<br>Squaring both sides:  


<br>This means  is divisible by 3, contradicting the assumption that it is not.  
<br>Conclusion: Our assumption was false, so  is not divisible by 3. ‚ñ†



]]></description><link>rosen-videos/proof-by-contradiction.html</link><guid isPermaLink="false">Rosen Videos/Proof by Contradiction.md</guid><pubDate>Sat, 01 Mar 2025 23:01:11 GMT</pubDate></item><item><title><![CDATA[Proof by Contradiction for Conditional Statements]]></title><description><![CDATA[ 
 <br><br>A proof by contradiction for a conditional statement is used to prove a statement of the form . Instead of proving  directly, we assume its negation, which is logically equivalent to . If this assumption leads to a contradiction, then the original statement must be true.<br>Key Concept: Proof by Contradiction for Conditional Statements  

<br>To prove  using contradiction:

<br>Assume .
<br>Using logical equivalence:  


<br>Proceed with logical steps until a contradiction () is found.
<br>Since contradictions cannot be true, the assumption is false, proving .  



<br><br><br>Example 1: Proving that in a Pythagorean Triple, at Least One of  or  is Even  
Statement: If , then at least one of  or  is even.  
Proof (by contradiction):  

<br>Assume the negation:  

<br>Assume there exist odd integers  and  such that:  


<br>This means neither  nor  is even.  


<br>Express  and  in terms of odd numbers:  

<br>Let  and  for some integers .  


<br>Compute :  




<br>Analyze :  

<br>Since , we get:  


<br>This shows that  is even, which means  must be even.  


<br>Deriving a contradiction:  

<br>Writing  as an even number , we substitute:  


<br>Equating both expressions for :  


<br>Dividing by 2:  


<br>The left-hand side is even, while the right-hand side is odd‚Äîa contradiction.  


<br>Conclusion:  

<br>Since assuming that both  and  are odd led to a contradiction, at least one of them must be even.  
<br>This proves the original statement. ‚ñ†



<br><br><br>Exercise 1  
Prove by contradiction that if  is an integer and  is divisible by 4, then  is divisible by 2.
<br>Exercise 2  
Prove that if  is even, then  is even, using proof by contradiction.
<br>Exercise 3  
Prove that if  is an integer such that  is not divisible by 3, then  is not divisible by 3.
<br><br><br>Click to reveal solutions  

<br>
Exercise 1 Solution (Divisibility by 2):  

<br>To prove: If  is divisible by 4, then  is divisible by 2.  
<br>Proof (by contradiction):  

<br>Assume  is divisible by 4, but  is not divisible by 2.  
<br>This means  must be odd, so let .  
<br>Compute :  


<br>Since  is divisible by 4, but adding 1 makes it not divisible by 4, we get a contradiction.  
<br>Conclusion: Our assumption was false, so  must be divisible by 2. ‚ñ†  




<br>
Exercise 2 Solution (Even Cube Implies Even Number):  

<br>To prove: If  is even, then  is even.  
<br>Proof (by contradiction):  

<br>Assume  is even, but  is odd.  
<br>Let .  
<br>Compute :  


<br>The term  is even, but adding 1 makes  odd, contradicting our assumption.  
<br>Conclusion:  must be even. ‚ñ†  




<br>
Exercise 3 Solution (Divisibility by 3):  

<br>To prove: If  is not divisible by 3, then  is not divisible by 3.  
<br>Proof (by contradiction):  

<br>Assume  is not divisible by 3, but  is divisible by 3.  
<br>Then  for some integer .  
<br>Compute :  


<br>This means  is divisible by 3, contradicting our assumption.  
<br>Conclusion:  is not divisible by 3. ‚ñ†





]]></description><link>rosen-videos/proof-by-contradiction-for-conditional-statements.html</link><guid isPermaLink="false">Rosen Videos/Proof by Contradiction for Conditional Statements.md</guid><pubDate>Sat, 01 Mar 2025 23:01:19 GMT</pubDate></item><item><title><![CDATA[Proof by Contrapositive]]></title><description><![CDATA[ 
 <br><br>A proof by contrapositive is a proof technique used for conditional statements of the form "if P, then Q" (). Instead of proving  directly, we prove its logically equivalent contrapositive statement .<br>Key Concept: Contrapositive vs. Converse  

<br>The contrapositive of  is . These are logically equivalent.  
<br>The converse of  is . The converse is not necessarily true.  
<br>Example:  

<br>Original: "If it is raining, then it is cloudy."  
<br>Contrapositive: "If it is not cloudy, then it is not raining." (Logically equivalent)  
<br>Converse: "If it is cloudy, then it is raining." (Not necessarily true)  



<br><br><br>Example 1: Proof by Contrapositive  
Statement: If  is even, then  is even.  
Proof (by contrapositive):  

<br>Rewrite the statement:  

<br> is even.  
<br> is even.  
<br>Contrapositive: If  is not even, then  is not even.  


<br>Assume  is odd:  

<br>By definition, an odd number can be written as  for some integer .  


<br>Compute :  


<br>Factor to show it is odd:  


<br>Since  is an integer, call it .  
<br>Thus, , which is odd.  


<br>Conclusion: Since  is odd, the contrapositive is proven, meaning the original statement is true. ‚ñ†

<br><br><br>Exercise 1  
Prove that if  is irrational, then at least one of  or  is irrational, using a proof by contrapositive.
<br>Exercise 2  
Prove that if  is even, then  is even, using a proof by contrapositive.
<br>Exercise 3  
Prove that if  is not positive, then , using a proof by contrapositive.
<br><br><br>Click to reveal solutions  

<br>
Exercise 1 Solution:  

<br>To prove: If  is irrational, then at least one of  or  is irrational.  
<br>Contrapositive: If both  and  are rational, then  is rational.  
<br>Proof:  

<br>Assume  and  are both rational.  
<br>By definition, there exist integers  such that:  


<br>Their sum is also rational:  


<br>Since the sum of two rational numbers is rational, we have proven the contrapositive.  
<br>Conclusion: The original statement is true. ‚ñ†  




<br>
Exercise 2 Solution:  

<br>To prove: If  is even, then  is even.  
<br>Contrapositive: If  is odd, then  is odd.  
<br>Proof:  

<br>Assume  is odd, so  for some integer .  
<br>Compute :  


<br>Factor out 2:  


<br>Since  is an integer,  is of the form $ + 1$, which is odd.  
<br>Conclusion: The contrapositive is proven, meaning the original statement is true. ‚ñ†  




<br>
Exercise 3 Solution:  

<br>To prove: If  is not positive, then .  
<br>Contrapositive: If , then  is positive.  
<br>Proof:  

<br>Assume .  
<br>Since squaring a nonzero number always yields a positive result, .  
<br>Conclusion: The contrapositive is proven, meaning the original statement is true. ‚ñ†





]]></description><link>rosen-videos/proof-by-contrapositive.html</link><guid isPermaLink="false">Rosen Videos/Proof by Contrapositive.md</guid><pubDate>Sat, 01 Mar 2025 23:01:31 GMT</pubDate></item><item><title><![CDATA[Propositional Equivalences Using Logical Laws]]></title><description><![CDATA[ 
 <br><br>Logical equivalences can be proven using truth tables, but another powerful method is to apply a series of known logic laws to simplify expressions step by step. This technique is useful for transforming logical expressions into more convenient forms.<br>Key Concept: Logical Equivalences with Laws
Instead of constructing a truth table, logical equivalences can be proven using logical laws such as:

<br>DeMorgan‚Äôs Laws
<br>Double Negation Law
<br>Distributive Laws
<br>Identity Laws
<br>Negation Laws
<br>Absorption Laws
<br>Idempotent Laws
<br>Conditional and Biconditional Equivalences

Using these rules, we can transform one expression into another while maintaining logical equivalence.
<br><br><br>Example 1: Proving Logical Equivalence  
Show that ¬¨(p ‚à® (¬¨p ‚àß q)) and ¬¨(p ‚à® q) are logically equivalent using logical laws.
<br>
Step-by-step transformation:

Applying DeMorgan‚Äôs Law:  

Applying DeMorgan‚Äôs Law again:  

Using Double Negation:  

Applying Distributive Law:  

Using Negation Law :  

Using Identity Law 

Applying DeMorgan‚Äôs Law Again:  

Conclusion:<br>
Since we have transformed ¬¨(p ‚à® (¬¨p ‚àß q)) into ¬¨(p ‚à® q) step by step, the two expressions are logically equivalent.
<br><br><br>Exercise 1  
Use logical laws to prove that p ‚àß (p ‚à® q) ‚â° p.
<br>Exercise 2  
Show that (p ‚Üí q) ‚à® (q ‚Üí p) is a tautology using logical equivalences.
<br>Exercise 3  
Transform the following expression into its simplest equivalent form using logical laws:  

<br><br><br>Click to reveal solutions  

<br>
Exercise 1 Solution:  

<br>Applying Absorption Law:   
<br>Conclusion: Proven directly by a known logical identity.  


<br>
Exercise 2 Solution:  

<br>Rewrite conditionals: 
<br>Apply associativity:   
<br>Use Negation Laws:   
<br>Conclusion: This is always true, proving it is a tautology.  


<br>
Exercise 3 Solution:  

<br>Use DeMorgan‚Äôs Law:   
<br>Apply Distributive Law:   
<br>Use Absorption Law:   
<br>Conclusion: The expression simplifies to p.  



]]></description><link>rosen-videos/propositional-equivalences-using-logical-laws.html</link><guid isPermaLink="false">Rosen Videos/Propositional Equivalences Using Logical Laws.md</guid><pubDate>Sat, 01 Mar 2025 23:17:51 GMT</pubDate></item><item><title><![CDATA[Propositional Equivalences Using Truth Tables]]></title><description><![CDATA[ 
 <br><br>Logical equivalence is a fundamental concept in propositional logic. Two propositions are logically equivalent if they always have the same truth values, regardless of the truth values of their components. Truth tables are a common method to verify logical equivalences.<br>Key Concept: Logical Equivalence

<br>Two compound propositions a and b are logically equivalent if their truth tables match in every row.
<br>This is denoted as a ‚áê‚áí b or a ‚â° b.
<br>One way to prove equivalence is to construct truth tables for both propositions and compare results.
<br>Examples:

<br>¬¨(p ‚àß q) ‚â° ¬¨p ‚à® ¬¨q (DeMorgan‚Äôs Law)
<br>p ‚Üí q ‚â° ¬¨p ‚à® q (Conditional-Disjunction Equivalence)



<br><br><br>Example 1: Using a Truth Table  
Show that p ‚à® (q ‚àß r) and (p ‚à® q) ‚àß (p ‚à® r) are logically equivalent.
<br>
Truth Table:

Conclusion:<br>
Since the last two columns are identical, p ‚à® (q ‚àß r) ‚â° (p ‚à® q) ‚àß (p ‚à® r).<br>
This proves one of the distributive laws: logical-or (‚à®) distributes over logical-and (‚àß).
<br><br>Example 2: Proving Equivalence with a Biconditional  
Another way to verify equivalence is to check if a ‚Üî b is a tautology (i.e., always true).
<br>
Truth Table:

<br>
Conclusion:<br>
Since the last column contains only T, the biconditional p ‚à® (q ‚àß r) ‚Üî (p ‚à® q) ‚àß (p ‚à® r) is a tautology, confirming the equivalence.
<br><br><br>Exercise 1  
Use a truth table to determine whether the following propositions are logically equivalent:  

<br>Exercise 2  
Show that ¬¨(p ‚à® q) ‚â° ¬¨p ‚àß ¬¨q using a truth table.
<br>Exercise 3  
Explain why proving a ‚Üî b is a tautology is a valid method for demonstrating logical equivalence.
<br><br><br>Click to reveal solutions  

<br>
Exercise 1 Solution:  

<br>Truth table verification confirms that p ‚Üí q and ¬¨p ‚à® q always have the same truth values.
<br>Conclusion: They are logically equivalent.


<br>
Exercise 2 Solution:  

<br>Truth table confirms DeMorgan‚Äôs Law: ¬¨(p ‚à® q) ‚â° ¬¨p ‚àß ¬¨q.


<br>
Exercise 3 Solution:  

<br>If a ‚Üî b is a tautology, then for all possible truth values, a and b yield the same result.
<br>This ensures a and b behave identically in all cases, proving logical equivalence.



]]></description><link>rosen-videos/propositional-equivalences-using-truth-tables.html</link><guid isPermaLink="false">Rosen Videos/Propositional Equivalences Using Truth Tables.md</guid><pubDate>Sat, 01 Mar 2025 23:01:45 GMT</pubDate></item><item><title><![CDATA[Proving Biconditional Statements]]></title><description><![CDATA[ 
 <br><br>A biconditional statement is a logical statement of the form "P if and only if Q" (denoted as ). To prove a biconditional statement, we must prove both directions:<br>
<br> (if , then ).
<br> (if , then ).
<br>Key Concept: Biconditional Proof  

<br>To prove , we must prove both directions separately:  

<br> (direct proof).  
<br> (direct proof or proof by contrapositive).  


<br>Common methods for each direction:  

<br>Direct proof: Assume  and show .  
<br>Contrapositive proof: Prove .  
<br>Proof by contradiction: Assume  but , then derive a contradiction.



<br><br><br>Example 1: Proving a Number is Odd if and Only if its Square is Odd  
Statement: An integer  is odd if and only if  is odd.  
Proof:<br>
Forward Direction ( is odd   is odd):  

<br>Assume  is odd.  
<br>By definition, an odd number can be written as  for some integer .  
<br>Compute :  


<br>Since  is an integer,  is of the form , which is odd.  
<br>Conclusion:  is odd.  

Reverse Direction ( is odd   is odd):  

<br>We prove the contrapositive: If  is even, then  is even.  
<br>Assume  is even, so  for some integer .  
<br>Compute :  


<br>Since  is an integer,  is even.  
<br>Conclusion: If  were odd, then  would be odd. ‚ñ†

<br><br><br>Exercise 1  
Prove that an integer  is divisible by 3 if and only if  is divisible by 3.
<br>Exercise 2  
Prove that an integer  is even if and only if  is even.
<br>Exercise 3  
Prove that a number is rational if and only if its cube is rational.
<br><br><br>Click to reveal solutions  

<br>
Exercise 1 Solution (Divisibility by 3):  

<br>Forward Direction: If  is divisible by 3, then  for some .  
<br>Squaring both sides:  


<br>Since  is an integer,  is divisible by 3.  
<br>Reverse Direction: Prove contrapositive: If  is not divisible by 3, then  is not divisible by 3.  
<br>Suppose  is not divisible by 3. Then  is either  or .  
<br>Squaring:  or , neither of which is divisible by 3.  
<br>Conclusion: The statement is proven. ‚ñ†  


<br>
Exercise 2 Solution (Even  if and only if Even ):  

<br>Forward Direction: If  is even, , then , which is even.  
<br>Reverse Direction: If  is even, we prove by contrapositive: Assume  is odd ().  
<br>Then , which is odd, contradicting the assumption that  is even.  
<br>Conclusion:  is even if and only if  is even. ‚ñ†  


<br>
Exercise 3 Solution (Rationality of a Cube):  

<br>Forward Direction: If  is rational, then  with integers .  
<br>Cubing both sides:  


<br>Since  are integers,  is rational.  
<br>Reverse Direction: If  is rational, then we prove contrapositive: Assume  is irrational.  
<br>If  is irrational, then  is also irrational (since irrational numbers raised to integer powers remain irrational unless trivial cases apply).  
<br>Conclusion: The statement is proven. ‚ñ†



]]></description><link>rosen-videos/proving-biconditional-statements.html</link><guid isPermaLink="false">Rosen Videos/Proving Biconditional Statements.md</guid><pubDate>Sat, 01 Mar 2025 23:01:51 GMT</pubDate></item><item><title><![CDATA[Sum Rule and Subtraction Rule]]></title><description><![CDATA[ 
 <br><br>Counting methods are fundamental principles in combinatorics that allow us to determine the number of ways an event can occur. This worksheet explores two important rules: the Sum Rule and the Subtraction Rule, with examples and exercises to solidify understanding.<br>Key Concepts

<br>Sum Rule (Addition Principle): If a task can be done in  ways or in  ways, where no outcome is counted twice, then the task can be done in  ways.
<br>Subtraction Rule (Inclusion-Exclusion for Two Sets): If a task can be done in  ways or  ways, but some outcomes are counted twice, then the total is .

<br><br><br>Example
7-digit phone numbers cannot start with 0, 1, 911, 988, or 411. How many phone numbers start with either 4 or 5?
Solution:

<br>Count numbers starting with 5: There are 6 more digits to fill, each with 10 choices, giving  possibilities.
<br>Count numbers starting with 4:

<br>If the second digit is not 1: 
<br>If the second digit is 1, the third digit must not be 1: 


<br>Total: .

<br><br><br>Example
A 4-digit padlock has numbers 0-9 on each wheel.
Questions:<br>
a) How many possible codes are there?<br>
b) How many codes start with 8 and end with 1?<br>
c) How many codes start with 8 or end with 1?
Solution:

<br>(a) Total codes: 
<br>(b) Fix first and last digits: 
<br>(c) Use the Subtraction Rule:

<br>Codes starting with 8: 
<br>Codes ending with 1: 
<br>Overlap (start with 8, end with 1): 100
<br>Total: 



<br><br><br>Exercise 1
A lock has 40 positions and a 3-number combination, where each number must be at least 5 positions apart.
a) How many possible lock codes are there?<br>
b) How many codes start with 23 and end with 3?<br>
c) How many codes start with 23 or end with 3?
<br><br><br>Click to reveal solutions

<br>(a) First number: 40 choices, second: 31, third: 31 ‚Üí Total: 40 √ó 31 √ó 31 = 38,840
<br>(b) Fix first and last numbers: 1 √ó 22 √ó 1 = 22
<br>(c) Apply Subtraction Rule:

<br>Codes starting with 23: 1 √ó 31 √ó 31 = 961
<br>Codes ending with 3: 31 √ó 31 √ó 1 = 961
<br>Overlap: 22
<br>Total: 961 + 961 - 22 = 1,900



]]></description><link>rosen-videos/sum-rule-and-subtraction-rule.html</link><guid isPermaLink="false">Rosen Videos/Sum Rule and Subtraction Rule.md</guid><pubDate>Tue, 04 Mar 2025 20:16:08 GMT</pubDate></item><item><title><![CDATA[Tautologies, Contradictions, Contingencies, and Satisfiability]]></title><description><![CDATA[ 
 <br><br>In propositional logic, we classify compound propositions based on their truth values. Some statements are always true (tautologies), always false (contradictions), or sometimes true and sometimes false (contingencies). Additionally, a statement is satisfiable if there exists at least one truth value assignment that makes it true.<br>Key Concept: Definitions

<br>A tautology is a proposition that is always true, regardless of the truth values of its variables.
<br>A contradiction is a proposition that is always false, regardless of the truth values of its variables.
<br>A contingency is a proposition that is neither a tautology nor a contradiction.
<br>A proposition is satisfiable if there exists at least one truth assignment that makes it true.

<br><br><br>Example 1: Tautology  
Consider the proposition:  

Truth Table:

Conclusion: Since the last column contains only T, this proposition is a tautology. It is satisfiable but not a contradiction or contingency.
<br><br>Example 2: Contradiction  
Consider the proposition:  

Truth Table:

Conclusion: Since the last column contains only F, this proposition is a contradiction. It is not satisfiable, nor a tautology or contingency.
<br><br>Example 3: Contingency  
Consider the proposition:  

Truth Table:

Conclusion: Since this proposition is sometimes true and sometimes false, it is a contingency. It is satisfiable but neither a tautology nor a contradiction.
<br><br><br>Exercise 1  
Determine whether the following proposition is a tautology, contradiction, or contingency:  

<br>Exercise 2  
Construct a truth table for the following proposition and classify it accordingly:  

<br>Exercise 3  
Explain why a contingency is always satisfiable but a satisfiable proposition is not necessarily a contingency.
<br><br><br>Click to reveal solutions  

<br>
Exercise 1 Solution:  

<br>The proposition simplifies to a tautology because  is logically equivalent to , which appears redundantly.  
<br>Conclusion: Tautology.  


<br>
Exercise 2 Solution:  

<br>Truth table reveals that the proposition always evaluates to T, meaning it is a tautology.  


<br>
Exercise 3 Solution:  

<br>A contingency has at least one true and one false row, ensuring satisfiability.  
<br>However, a satisfiable proposition only requires at least one true row, which could still include tautologies.  



]]></description><link>rosen-videos/tautologies,-contradictions,-contingencies,-and-satisfiability.html</link><guid isPermaLink="false">Rosen Videos/Tautologies, Contradictions, Contingencies, and Satisfiability.md</guid><pubDate>Wed, 05 Mar 2025 01:08:04 GMT</pubDate></item><item><title><![CDATA[The Multiplication Principle of Counting]]></title><description><![CDATA[ 
 <br><br>Accurately counting the number of possibilities in a given situation is crucial in probability, statistics, and algorithm design. The Multiplication Principle of Counting helps break down problems into sequential tasks and determine the total number of outcomes efficiently.<br>Key Concept: Multiplication Principle of Counting
Suppose a procedure can be broken down into a sequence of two tasks:

<br>If there are n ways to do the first task,
<br>And for each way of doing the first task, there are m ways to do the second task,
<br>Then the total number of ways to perform the procedure is n √ó m.

<br><br>Example: License Plates
A license plate has three letters followed by three digits. How many possible license plates can be made?
Solution:

<br>
There are 26 choices for each letter.

<br>
There are 10 choices for each digit.

<br>
The total number of license plates is:



<br><br>When solving counting problems, consider these questions:<br>
<br>Is repetition allowed?
<br>Does order matter?
<br>Example: Batting Order
A baseball team has 9 players. How many different batting orders are possible?
Solution:

<br>
Repetition is not allowed (each player bats once).

<br>
Order matters (different arrangements lead to different lineups).

<br>
The total number of orders is:



<br><br>Exercise 1: Clothing Combinations
You have 5 shirts, 3 pairs of pants, and 2 pairs of shoes. How many different outfits can you make?
<br>Exercise 2: Password Combinations
A password consists of 4 lowercase letters, followed by 2 digits. Letters can be repeated. How many unique passwords are possible?
<br><br>Solutions (Click to Expand)

<br>
Exercise 1: The total number of outfits is:


<br>
Exercise 2: There are 26 choices for each letter and 10 choices for each digit:



]]></description><link>rosen-videos/the-multiplication-principle-of-counting.html</link><guid isPermaLink="false">Rosen Videos/The Multiplication Principle of Counting.md</guid><pubDate>Tue, 04 Mar 2025 20:15:39 GMT</pubDate></item><item><title><![CDATA[Tree Diagrams Worksheet]]></title><description><![CDATA[ 
 <br><br>Tree diagrams are a useful visual aid in counting and probability applications. They help in systematically listing all possible outcomes of a given situation, making it easier to determine probabilities and apply counting principles.<br>Key Concept: Tree Diagrams
A tree diagram is a branching diagram that represents all possible outcomes of an event. Each branch represents a choice, and the full diagram helps enumerate all combinations.
<br><br><br>Fast-Food Choices
At a fast-food restaurant, you can choose between:

<br>A beef burger, turkey burger, or veggie burger.
<br>With or without cheese.
<br>For condiments, you select between mayo and mustard (but not both).

How many different burger options must the restaurant prepare?
<br>Using a tree diagram, we can list out all possible combinations:<br>Beef ‚Üí Cheese ‚Üí Mayo
      ‚Üí Cheese ‚Üí Mustard
      ‚Üí No Cheese ‚Üí Mayo
      ‚Üí No Cheese ‚Üí Mustard
Turkey ‚Üí Cheese ‚Üí Mayo
      ‚Üí Cheese ‚Üí Mustard
      ‚Üí No Cheese ‚Üí Mayo
      ‚Üí No Cheese ‚Üí Mustard
Veggie ‚Üí Cheese ‚Üí Mayo
      ‚Üí Cheese ‚Üí Mustard
      ‚Üí No Cheese ‚Üí Mayo
      ‚Üí No Cheese ‚Üí Mustard
<br>By counting the number of final outcomes, we get 12 different burger options.<br>Alternatively, we apply the product rule:<br>3 (types of burgers) √ó 2 (cheese or no cheese) √ó 2 (mayo or mustard) = 12
<br><br><br>Counting Heads and Tails
A quarter, a dime, a nickel, and a penny are tossed. How many ways can we end up with exactly 2 heads and 2 tails?
<br>Each coin has two outcomes: heads (H) or tails (T). The total number of outcomes is:<br>2 √ó 2 √ó 2 √ó 2 = 16
<br>Listing all outcomes where we get exactly 2 heads and 2 tails:<br>T  T  H  H
T  H  T  H
T  H  H  T
H  T  T  H
H  T  H  T
H  H  T  T
<br>Thus, there are 6 successful outcomes.<br>When we study probability, we will learn that if the coins are fair, the probability of getting 2 heads and 2 tails is:<br>6 / 16 = 3 / 8
<br><br><br>Practice Problems

<br>A restaurant offers 4 main dishes, each with 3 side options and a choice of with or without dessert. How many different meal combinations can be made?
<br>A password consists of two letters (A, B, C, D) followed by a digit (0-9). How many different passwords can be created?
<br>A family has two children. Each child can be a boy (B) or a girl (G). List all possible combinations using a tree diagram.

<br><br><br>Click to reveal solutions

<br>4 √ó 3 √ó 2 = 24 different meal combinations.
<br>4 √ó 4 √ó 10 = 160 possible passwords.
<br>The possible combinations are:

<br>BB
<br>BG
<br>GB
<br>GG



]]></description><link>rosen-videos/tree-diagrams-worksheet.html</link><guid isPermaLink="false">Rosen Videos/Tree Diagrams Worksheet.md</guid><pubDate>Tue, 04 Mar 2025 20:06:09 GMT</pubDate></item><item><title><![CDATA[Truth Tables]]></title><description><![CDATA[ 
 <br><br>A truth table is a tool used in logic to systematically determine the truth values of logical expressions.<br>
Truth tables help us analyze the behavior of logical operators such as AND (‚àß), OR (‚à®), NOT (¬¨), and conditional statements (‚Üí).<br><br><br>Fundamental Truth Tables
AND (‚àß): True only if both statements are true

OR (‚à®): True if at least one statement is true

NOT (¬¨): Negates the truth value of a statement

Conditional (‚Üí): False only when p is true and q is false

<br><br><br>Finding the Truth Table for ¬¨(p ‚à® q)

Finding the Truth Table for ¬¨p ‚àß ¬¨q

Since the final columns of ¬¨(p ‚à® q) and ¬¨p ‚àß ¬¨q are the same, they are logically equivalent.
<br><br><br>Logical Equivalences from DeMorgan‚Äôs Laws

<br>¬¨(p ‚àß q) ‚â° ¬¨p ‚à® ¬¨q
<br>¬¨(p ‚à® q) ‚â° ¬¨p ‚àß ¬¨q

<br><br><br>Constructing the Truth Table for a Statement and Its Converse

Since the columns for p ‚Üí q and q ‚Üí p are different, they are not logically equivalent.
Constructing the Truth Table for a Statement and Its Contrapositive

Since the final columns are identical, p ‚Üí q ‚â° ¬¨q ‚Üí ¬¨p.
<br><br><br>Another Important Equivalence

<br>p ‚Üí q is logically equivalent to ¬¨p ‚à® q.

Truth Table for p ‚Üí q and ¬¨p ‚à® q

Since the final columns match, p ‚Üí q ‚â° ¬¨p ‚à® q.
<br><br><br>Truth Table Construction

<br>Construct the truth table for p ‚äï q (Exclusive OR).
<br>Construct the truth table for p ‚àß (q ‚à® ¬¨p).
<br>Prove that p ‚à® (q ‚àß r) ‚â° (p ‚à® q) ‚àß (p ‚à® r) using truth tables.

<br>Logical Equivalences

<br>Use truth tables to verify ¬¨(p ‚Üí q) ‚â° p ‚àß ¬¨q.
<br>Show that (p ‚Üí q) ‚àß (q ‚Üí r) ‚Üí (p ‚Üí r) is a tautology.

<br><br><br>Click to reveal solutions

<br>Truth Table for p ‚äï q:



<br>Logical Equivalences:

<br>¬¨(p ‚Üí q) ‚â° p ‚àß ¬¨q can be confirmed by comparing their truth tables.
<br>(p ‚Üí q) ‚àß (q ‚Üí r) ‚Üí (p ‚Üí r) results in all T values, proving it's a tautology.



]]></description><link>rosen-videos/truth-tables.html</link><guid isPermaLink="false">Rosen Videos/Truth Tables.md</guid><pubDate>Sat, 01 Mar 2025 23:21:42 GMT</pubDate></item><item><title><![CDATA[Universal and Existential Quantifiers]]></title><description><![CDATA[ 
 <br><br>In logic, quantifiers specify how many instances of a variable satisfy a given propositional function. The two most common quantifiers are:<br>
<br>Universal Quantifier (‚àÄ): States that a proposition is true for all elements in a domain.
<br>Existential Quantifier (‚àÉ): States that a proposition is true for at least one element in a domain.
<br>Understanding quantifiers is essential for mathematical reasoning, proofs, and predicate logic.<br>Key Concept: Propositional Functions and Quantification

<br>A propositional function (also called an open sentence) is an expression containing one or more free variables (variables that have not been assigned a specific value).
<br>A quantified statement binds the variable, turning the propositional function into a proposition.
<br>Notation:

<br>Universal Quantifier:  (For all ,  is true)
<br>Existential Quantifier:  (There exists at least one  for which  is true)



<br><br><br>Example 1: Universal Quantification  
Consider the propositional function:

This statement is true for every integer . We express this as:

Interpretation:  

<br>The variable  is bound by the universal quantifier.
<br>Since every integer is either even or odd, the statement is true.

<br><br>Example 2: Existential Quantification  
Consider the statement:

We express this as:

Proof:  

<br>The statement is true because  is both even and prime.
<br>Since we only need one example to prove an existential statement, this is sufficient.

<br><br><br>Exercise 1  
Express the following statement using a universal quantifier:<br>
"Every natural number is greater than or equal to zero."
<br>Exercise 2  
Express the following statement using an existential quantifier:<br>
"There exists an integer that is both a perfect square and a prime number."<br>
Then determine whether the statement is true or false.
<br>Exercise 3  
Negate the following statement and simplify the expression:  

<br><br><br>Click to reveal solutions  

<br>
Exercise 1 Solution:  

<br>The statement "Every natural number is greater than or equal to zero" can be written as:  




<br>
Exercise 2 Solution:  

<br>The statement "There exists an integer that is both a perfect square and a prime number" can be written as:  


<br>Since the only prime perfect square is 1, which is not considered a prime, the statement is false.


<br>
Exercise 3 Solution:  

<br>The original statement:  


<br>Its negation:  


<br>Applying logical negation:  


<br>Since  for all real numbers, the negated statement is false.



]]></description><link>rosen-videos/universal-and-existential-quantifiers.html</link><guid isPermaLink="false">Rosen Videos/Universal and Existential Quantifiers.md</guid><pubDate>Sat, 01 Mar 2025 23:02:15 GMT</pubDate></item><item><title><![CDATA[YouTube Playlists]]></title><description><![CDATA[ 
 <br>Below are some fantastic youtube playlists that cover discrete math for cs.<br><br>
<br>]]></description><link>rosen-videos/youtube-playlists.html</link><guid isPermaLink="false">Rosen Videos/YouTube Playlists.md</guid><pubDate>Tue, 04 Mar 2025 22:20:23 GMT</pubDate></item></channel></rss>